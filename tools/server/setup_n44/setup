#!/usr/bin/env ruby

eval File.read(File.dirname(__FILE__) + '/config.rb')

# Configuration {{{
ARTURAZ_PUBKEY = "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvQixOdHtH572+yAkRxyDNdo/Q6BLyhUrAtw1E9oOEg6VtECFEEUbQijncU0iMerPpyjbzboX2bGRvA9LRwJEoSrW4pDGV3KTMIUpIMdZzt0n49HsCja8+03++B0HBEjbpeqql9EMDOfTjXQqIE78WNFCsPEBxyKRQDdUQyfXo2f1/0k/WKUScASj3zfTdUKWZPDiuqwVB+v0uR+8n/5dkGaviBxH1Uji82y5c1o+Xpn872FaiJyEtsOfZWS1AN8YKbNL3MZJ+S+bJeCNM3wg7zF0Y1BVXqQrDME2IUhekR5XpkO0UfIcPRZmIKCjl4x//URcNbcT6ihLu/cRru2xcQ== arturaz"
JHO_PUBKEY = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIBmYVjgKrRV3wltV7yTmBKo/Z0ENjA8GaYuJOaw2QTJyoS/5NYiyd+dygCfoS3u+RzbrCyTQppnOaf+zuaOdiRQyqonhEI64kmJJXzmGwL+C8udu798PeWdfw2Lj1ACSYOZBn4utXnK/iK2XqPOjhIGttEo2/PhtVfAFIFB0gWsRw== Jonas Abromaitis"
MIKISM_PUBKEY = "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIB7B6kL0+oQ37yeMhy3MTyWfGXLtEwas9dfZH9IU5lhebIMGqz5VkdvvT/AD3nNInrGzgVc16S1H8fffKqH5YwtaRQLePWrJ1Aq/L9R+Fb9T7OWOOdHiTK6OZ2vPbYeitQzWQzJ1uUBsZpq3ddibnjv+cS37/DwbCDxZOyfkqpfXQ== Mykolas Mickus"
HENRIKAS_PUBKEY = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQ43QAmFhlC4K7BmG1boe2CTIIGC42GPjpFrAkR2kkDCeAXNZF8PYhHcrAy3D2XCBKoA3np+esxOjG3fPbxlOJQPXQp5bMhaR8YABUc58yvrBjtKA/zZRLPf6YebaF20fil5t0TbLFoskNOrEuzRhr0IwvEbPJtXcp3zcXUl09jBFa5OP4a++d3eVHDhUllT+tM8ECZGXaN3S7jSSrf89Ifgd2L3JLu2JVXm4+xkkev1lrUjop5GD6sm2yc+AQ/tdlZMoWbmVrlYZqL5t4UfBWAWM6jRLQNrmLcSG13/rZleiDbEYIWirBQTTt8pZQZpTW6LQ6Ujd8c5R7ZdGvKH85 netyciuks@gmail.com"

CLIENT_PUBKEYS = WEB_PUBKEYS = [ARTURAZ_PUBKEY, JHO_PUBKEY, MIKISM_PUBKEY, 
  HENRIKAS_PUBKEY]

CRONTAB = %Q{
SHELL=/bin/bash

# m h  dom mon dow   command

@daily  /usr/sbin/logrotate -s $HOME/run/logrotate.state -f $HOME/config/logrotate.conf

}

VIMRC = %Q{
syntax enable
" Wrap long lines
set wrap
set smartcase
set enc=utf-8

if version >= 600
	set foldenable
	set foldmethod=marker
  set foldcolumn=3
endif

" Torte colorscheme usually looks ugly on GUI :)
if has('gui_running')
    colorscheme torte
    if has('win32')
        set guifont=Lucida_Console:h10:w6
    endif
else
    set bg=dark
endif
" Makes backspace erase everything
set backspace=2
set autoindent
set mouse=a
" Title
set titlestring="VIM: [%n] %f"
set title
" Wraps lines at xx symbols (nasty ;)
"set textwidth=80
" Make n spaces instead of tab
" Treat them as tab
set shiftwidth=2 tabstop=2 expandtab
set softtabstop=2 smarttab
" Makes status line AOT (always-on-top)
set laststatus=2
set pastetoggle=<F3>
}

MYCNF = %Q{
[client]
port    = 3306
socket    = /var/run/mysqld/mysqld.sock

[mysqld_safe]
socket    = /var/run/mysqld/mysqld.sock
nice    = 0

[mysqld]
user    = mysql
socket    = /var/run/mysqld/mysqld.sock
pid-file    = /var/run/mysqld/mysqld.pid
port    = 3306
basedir   = /usr
datadir   = /var/lib/mysql
tmpdir    = /tmp
skip-external-locking
bind-address    = 127.0.0.1
key_buffer    = 16M
max_allowed_packet  = 16M
thread_stack    = 192K
thread_cache_size       = 8
myisam-recover         = BACKUP
query_cache_limit = 1M
query_cache_size        = 16M

log_error                = /var/log/mysql/error.log

slow_query_log  = 1
slow_query_log_file  = /var/log/mysql/slow.log
long_query_time = 0.1
expire_logs_days  = 10
max_binlog_size         = 100M

[mysqldump]
quick
quote-names
max_allowed_packet  = 16M

[isamchk]
key_buffer    = 16M

!includedir /etc/mysql/conf.d/
}

NEBULACNF = %Q{
[mysqld]
innodb_file_per_table
innodb_rollback_on_timeout = ON
innodb_lock_wait_timeout = 10
# http://dev.mysql.com/doc/refman/5.5/en/innodb-auto-increment-handling.html#innodb-auto-increment-configurable
# This is needed to allow multiple LOAD DATA statements to execute parallely.
innodb_autoinc_lock_mode = 2
# To allow replication on lock mode 2.
binlog_format=row
}

SRVRUNNER = %Q{#!/bin/bash
HOME=/home/#{USER}
PATH=/bin/:/usr/bin:/usr/local/bin
source /etc/profile
source $HOME/.profile

cd $HOME/nebula-server/current/

eval "$@"
}
WEBRUNNER = %Q{#!/bin/bash
HOME=/home/#{USER}
PATH=/bin/:/usr/bin:/usr/local/bin
source /etc/profile
source $HOME/.profile

cd $HOME/web/current/www
source ../.rvmrc

eval "$@"
}

JMX_CONFIG = %Q{
monitorRole  nebula44.mmosmrts.jmx
controlRole  nebula44.mmosmrts.jmx
}

PHP_FPM_RUN = "/var/run/php-fpm"
PHP_FPM_PID = "#{PHP_FPM_RUN}/master.pid"
PHP_FPM_POOL_SOCKET = "#{PHP_FPM_RUN}/#{USER}.socket"

PHP_FPM_POOL_CONF = %Q{
[#{USER}]
user = #{USER}
group = #{USER}
listen = #{PHP_FPM_POOL_SOCKET}
listen.owner = www-data
listen.group = www-data
listen.mode = 0666
pm = dynamic
pm.max_children = 20
pm.min_spare_servers = 4
pm.max_spare_servers = 10
pm.max_requests = 500
chdir = /
catch_workers_output = yes
security.limit_extensions = .php
}

def php_fpm_vhost_conf(suffix)
  %Q{
    AddHandler php5-fcgi .php
    Action php5-fcgi /php5-fcgi-#{suffix}
    Alias /php5-fcgi-#{suffix} /home/#{USER}/php5-fcgi-#{suffix}
    FastCgiExternalServer /home/#{USER}/php5-fcgi-#{suffix} -socket #{PHP_FPM_SOCKET} -pass-header Authorization
  }
end

MONIT_EXIM = %Q{
check process exim4 with pidfile /var/run/exim4/exim.pid
      start program = "/etc/init.d/exim4 start"
      stop program  = "/etc/init.d/exim4 stop"
}
MONIT_MUNIN = %Q{
check process munin-node with pidfile /var/run/munin/munin-node.pid
      start program = "/etc/init.d/munin-node start"
      stop program  = "/etc/init.d/munin-node stop"
}
MONIT_MYSQL = %Q{
check process mysql with pidfile /var/run/mysqld/mysqld.pid
      start program = "/etc/init.d/mysql start"
      stop program  = "/etc/init.d/mysql stop"
}
MONIT_APACHE = %Q{
check process apache with pidfile /var/run/apache2.pid
      start program = "/etc/init.d/apache2 start"
      stop program  = "/etc/init.d/apache2 stop"
}

MONIT_PHP_FPM = %Q{
check process php-fpm with pidfile #{PHP_FPM_PID}
      start program = "/etc/init.d/php5-fpm start"
      stop program  = "/etc/init.d/php5-fpm stop"
}

MONIT_NEBULA_SERVER = %Q{
check process nebula-server with pidfile /home/spacegame/nebula-server/shared/run/daemon.pid
  start program = "/home/spacegame/bin/srvrunner lib/daemon.rb start"
    as uid #{USER} and gid #{USER} with timeout 60 seconds
  stop program = "/home/spacegame/bin/srvrunner lib/daemon.rb stop"
    as uid #{USER} and gid #{USER}
  if failed port 55345 send "?\\n" expect "!\\n" with timeout 5 seconds then restart
}
MONIT_DELAYED_JOB = %Q{
check process dj_system_1
  with pidfile /home/spacegame/web/shared/web/pids/delayed_job.production.system.1.pid
  start program = "/home/spacegame/bin/webrunner script/delayed_job -i production.system.1 --queue=system start"
    as uid spacegame and gid spacegame with timeout 120 seconds
  stop program = "/home/spacegame/bin/webrunner script/delayed_job -i production.system.1 stop"
    as uid spacegame and gid spacegame

check process dj_enroll_1
  with pidfile /home/spacegame/web/shared/web/pids/delayed_job.production.enroll.1.pid
  start program = "/home/spacegame/bin/webrunner script/delayed_job -i production.enroll.1 --queue=enroll start"
    as uid spacegame and gid spacegame with timeout 120 seconds
  stop program = "/home/spacegame/bin/webrunner script/delayed_job -i production.enroll.1 stop"
    as uid spacegame and gid spacegame
}
# }}}

# DSL {{{
def run(cmd)
  status = system cmd
  unless $?.success?
    puts
    puts "Running `#{cmd}` failed with exit status #{$?.exitstatus}!"
    exit
  end
  status
end
def remove(cmd); run "apt-get remove -y --purge #{cmd}"; end
def install(cmd); run "apt-get install -y #{cmd}"; end
def debs(dir, packages)
  base = File.join(File.expand_path(File.dirname(__FILE__)), "debs", DISTRO, dir)
  files = packages.map { |p| %Q{"#{File.join(base, p)}"} }.join(" ")
  run "dpkg -i #{files}"
end
def as(user); run %Q{su -l #{user} -c "#{yield.gsub('"', '\\"')}"}; end
def rvm_str(command=""); %Q{bash -c "source #{BASHRC} && rvm #{command}"}; end
def rvm(command=""); `#{rvm_str(command)}`; end
def rvmdo(version, command="")
  rvm("#{version} do #{command}")
end

PASS_CHARS = "1234567890-=qwertyuiop[]asdfghjkl;zxcvbnm,./~!@#^%&*()_+QWERTYUIOP{}ASDFGHJKLZXCVBNM<>?"
def rand_pass(length)
  (0...length).map do 
    index = rand(PASS_CHARS.size)
    PASS_CHARS[index..index]
  end.join
end

def logrotate(conf)
  file = "#{HOME}/config/logrotate.conf"
  unless File.read(file).include?(conf)
    puts "Appending client web logs logrotate configuration."
    File.append(file, "\n#{conf}\n")
  end
end

def cron(conf)
  contents = `crontab -u #{USER} -l`
  unless contents.include?(conf)
    IO.popen("crontab -u #{USER} -", "w") do |io|
      io.write contents + "\n\n" + conf + "\n"
    end
  end
end

def pubkeys(user, *keys)
  dir = "/home/#{user}/.ssh"
  Dir.mkdir(dir, "700", "#{user}:") unless File.exists?(dir)

  file = "#{dir}/authorized_keys"
  File.write(file, "", "600", "#{user}:") unless file.exists?
  File.ensure(file, "#{ARTURAZ_PUBKEY}\n")

end

def adduser(user)
  puts "Checking for user #{user}."
  system "adduser #{user}"
  pubkeys(user, ARTURAZ_PUBKEY)
end

def apache_vhost(vhost, path, hostname, additional="")
  File.write("/etc/apache2/sites-available/#{vhost}", %Q{
<VirtualHost *:80>
  ServerName #{hostname}

  DocumentRoot "#{path}"
  <Directory #{path}>
    AllowOverride All
    Options -MultiViews -Indexes
  </Directory>

  #{additional}

  ErrorLog #{LOGS}/#{vhost}.error.log
  CustomLog #{LOGS}/#{vhost}.access.log common
</VirtualHost>
})
  run "a2ensite #{vhost}"
  run "/etc/init.d/apache2 reload"
end

def create_mysql(db_name, options={})
  pass = rand_pass(20)
  db = "#{USER}_#{db_name}"
  dbuser = "'#{db}'@'localhost'"
  script = Tempfile.new('mysqlscript')
  script.write(%Q{
-- Grant harmless privilege to user to ensure that it's created.
GRANT USAGE ON *.* TO #{dbuser};
DROP USER #{dbuser};
-- Recreate the user.
CREATE USER #{dbuser} IDENTIFIED BY '#{pass}';
CREATE DATABASE IF NOT EXISTS `#{db}`;
GRANT ALL ON `#{db}`.* TO #{dbuser};
})
  script.write(%Q{
GRANT FILE ON *.* TO #{dbuser};
}) if options[:file]
  script.write(%Q{
GRANT PROCESS ON *.* TO #{dbuser};
}) if options[:process]
  script.write("FLUSH PRIVILEGES;")
  script.close
  puts File.read(script.path)
  run "mysql --defaults-file=/etc/mysql/debian.cnf < #{script.path}"
  script.unlink

  [db, pass]
end

def setup_apache
  install "apache2 apache2-mpm-event"

  File.modify("/etc/apache2/apache2.conf") do |content|
    content.sub(%r{<IfModule mpm_event_module>.*?</IfModule>}m, %Q{
<IfModule mpm_event_module>
  StartServers         #{MPM_EVENT_START_SERVERS}
  MinSpareThreads      #{MPM_EVENT_MIN_SPARE_THREADS}
  MaxSpareThreads      #{MPM_EVENT_MAX_SPARE_THREADS}
  ThreadLimit          #{MPM_EVENT_THREAD_LIMIT}
  ThreadsPerChild      #{MPM_EVENT_THREADS_PER_CHILD}
  MaxClients           #{MPM_EVENT_MAX_CLIENTS}
  MaxRequestsPerChild  #{MPM_EVENT_MAX_REQS_PER_CHILD}
</IfModule>
})
  end

  # Apache status.
  run "a2enmod status"
  File.write("/etc/apache2/mods-enabled/status.conf", %Q{<IfModule mod_status.c>
   #
   # Allow server status reports generated by mod_status,
   # with the URL of http://servername/server-status
   # Uncomment and change the ".example.com" to allow
   # access from other hosts.
   #
   <Location /server-status>
       SetHandler server-status
       Order allow,deny
       Allow from localhost ip6-localhost 127.0.0.1
   #    Allow from .example.com
   </Location>

# For apache munin plugins.
ExtendedStatus On
   
</IfModule>})

  # Apache monit
  File.write("/etc/monit/conf.d/apache", MONIT_APACHE)
  run "/etc/init.d/monit restart"

  run "/etc/init.d/apache2 restart"

  install "liblwp-useragent-determined-perl"
  %w{accesses processes volume}.each do |plugin|
    run "ln -sfv /usr/share/munin/plugins/apache_#{plugin
      } /etc/munin/plugins/"
  end
  run "/etc/init.d/munin-node restart"
end

def setup_php
  run "add-apt-repository ppa:l-mierzwa/lucid-php5"
  run "apt-get update"
  install "libmysqlclient-dev php-apc php5-fpm php5-cli php5-intl"
  run "mkdir -p #{PHP_FPM_RUN}"
  File.modify("/etc/init.d/php5-fpm") do |contents|
    contents.sub("^PIDFILE=.+$", "PIDFILE=#{PHP_FPM_PID}")
  end
  File.modify("/etc/php5/fpm/php-fpm.conf") do |contents|
    contents.sub("^pid = .+$", "pid = #{PHP_FPM_PID}")
  end
  File.write("/etc/php5/fpm/pool.d/#{USER}.conf", PHP_FPM_POOL_CONF)
  run "mv /etc/php5/fpm/pool.d/www.conf /etc/php5/fpm/pool.d/www.conf.example"
  
  # Fix ini files.
  Dir["/etc/php5/conf.d/*.ini"].each do |path|
    File.modify(path) do |contents|
      contents.gsub(/^#/, ';')
    end
  end

  Dir["/etc/php5/*/php.ini"].each do |path|
    File.modify(path) do |content|
      content.sub(/^memory_limit = .+$/, "memory_limit = #{PHP_MEM_LIMIT}").
        sub(/^upload_max_filesize = .+$/, "upload_max_filesize = #{PHP_MAX_UPLOAD}").
        sub(/^post_max_size = .+$/, "post_max_size = #{PHP_MAX_POST}")
    end
  end

  run "/etc/init.d/php5-fpm restart"
  run "a2enmod actions fastcgi alias"
  run "/etc/init.d/apache2 restart"

  File.write("/etc/monit/conf.d/php-fpm", MONIT_PHP_FPM)
  run "/etc/init.d/monit restart"
end

class String
  def and
    output = `#{self} 2>&1`
    yield output if $?.success?
    output
  end

  def or
    output = `#{self} 2>&1`
    yield output unless $?.success?
    output
  end

  def exists?; File.exists?(self); end
  def append(content); File.append(self, content); end
  def read; File.read(self); end
end

class File
  def self.write(name, content, mode=nil, owner=nil)
    file = new(name, "w")
    file.write(content)
    file.close

    perms(name, mode, owner)

    unless File.exist?(name)
      puts "Write failed for #{name}!"
      exit
    end

    file
  end

  def self.perms(name, mode=nil, owner=nil)
    mode ||= "0644"
    run %Q{chmod #{mode} "#{name}"}
    run %Q{chown #{owner} "#{name}"} unless owner.nil?
  end

  def self.append(name, content)
    unless File.exist?(name)
      puts "File #{name} does not exist!"
      exit
    end
    
    c = File.read(name)
    c += content
    file = new(name, "w")
    file.write(c)
    file.close
  end

  def self.modify(name)
    modified = yield File.read(name)
    File.open(name, "w") do |file|
      file.write(modified)
    end
  end

  def self.ensure(name, content, mode=nil, owner=nil)
    if exist?(name)
      unless read(name).include?(content)
        append(name, content)
      end
      
      perms(name, mode, owner)
    else
      write(name, content, mode, owner)
    end
  end
end

class Dir
  def self.mkdir(dir, mode=nil, owner=nil)
    run %Q{mkdir "#{dir}"} unless File.directory?(dir)
    File.perms(dir, mode || "0755", owner)
  end
end

class TrueClass
  def or; end
  def and; yield; end
end

class FalseClass
  def or; yield; end
  def and; end
end

class NilClass
  def or; yield; end
  def and; end
end
# }}}

# Check if root.
`id`.include?("uid=0(root)").or do
  puts "You must be root to run this script!"
  exit
end

if ARGV.size == 0
  puts "Usage: setup_n44 targets"
  puts
  puts "Targets:"
  puts "  basic  - Sets up basic system"
  puts "  sql    - Sets up Mysql subsystem"
  puts "  server - Sets up Nebula server"
  puts "  client - Sets up Nebula client"
  puts "  web    - Sets up Nebula web server"
  exit
end

HOME = "/home/#{USER}"
LOGS = "#{HOME}/logs"
UCH = "#{USER}:"
BASHRC = "/etc/bash.bashrc"
require 'tempfile'

if ARGV.include?("basic") # {{{
  run "locale-gen en_US.UTF-8 lt_LT.UTF-8"
  
  adduser("x11")
  File.write("/home/x11/.vimrc", VIMRC, nil, "x11:")
  `ln -sf /home/x11/.vimrc /root/.vimrc`

  run "apt-get update"
  install "dialog"
  # Remove unnecessary packages.
  remove "samba.* sendmail.* bind9"
  install "man less cron mc rubygems libjson-ruby irb gnupg wget host " +
    "exim4 logrotate netcat ntpdate python-software-properties mutt monit"
  run "dpkg-reconfigure exim4-config"
  # Not sure - it breaks some exim installations.
  #File.ensure("/etc/exim4/exim4.conf.template", "disable_ipv6 = true\n")
  run "dpkg-reconfigure tzdata"

  run "apt-get dist-upgrade -y"

  #`dpkg-reconfigure debconf`

  puts "Installing munin-node"
  install "munin-node"
  run "rm -fv /etc/munin/plugins/nfs*"
  File.ensure(
    "/etc/munin/munin-node.conf",
    "allow ^#{MUNIN_MASTER.gsub(".", "\\.")}$"
  )
  run "/etc/init.d/munin-node restart"

  puts "Installing Git & curl"
  install "git-core curl"

  puts "Installing Ruby build deps"
  install "build-essential bison openssl libreadline6 libreadline6-dev curl " +
    "git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 " +
    "libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev " +
    "ncurses-dev"

  # User creation
  adduser USER
  as(USER) { "mkdir -p ~/config" }
  as(USER) { "mkdir -p ~/run" }
  File.ensure("#{HOME}/.profile", %Q{export environment='production'
export JAVA_OPTS='-server -XX:+TieredCompilation'
export JRUBY_OPTS='--server --1.9 -J-XX:+TieredCompilation'},
    nil, UCH)
  (`crontab -u #{USER} -l`.strip == "").and {
    puts "Installing default crontab for #{USER}"
    IO.popen("crontab -u #{USER} -", "w") do |io|
      io.write CRONTAB
    end
  }
  
  File.ensure("/etc/security/limits.d/spacegame.conf", %Q{
spacegame  soft nofile 20000
spacegame  hard nofile 20000
}, "0600", "root:")

  File.ensure("#{HOME}/.rvmrc", %Q{rvm_trust_rvmrcs_flag=1\n}, nil, UCH)

  # Set up logrotate
  conf = "/home/#{USER}/config/logrotate.conf"
  unless File.exist?(conf)
    puts "Writing base logrotate.conf for #{USER}"
    Dir.mkdir(File.dirname(conf), nil, UCH)
    File.write(conf, "compress\n\n", nil, UCH)
  end

  Dir.mkdir LOGS, nil, UCH
  logrotate %Q{
#{LOGS}/*.log {
  rotate 10
  daily
  missingok
  dateext
}
}
  # Set up SSHD
  File.modify("/etc/ssh/sshd_config") do |contents|
    contents.sub(/^#?PermitRootLogin .+$/, "PermitRootLogin no").
      sub(/^#?PasswordAuthentication .+$/, "PasswordAuthentication no").
      sub(/^#?PubkeyAuthentication .+$/, "PubkeyAuthentication yes")
  end
  run "/etc/init.d/ssh reload"

  # Set up basic monit
  File.write("/etc/monit/monitrc", 
  %Q{# monit configuration file

set daemon 30 with start delay 60

set logfile /var/log/monit.log
set idfile /var/run/monit/monit.id
set statefile /var/run/monit/monit.state

set mailserver localhost
set alert arturas@nebula44.com
set alert elsbergass@gmail.com

# Allow connecting to HTTP server.
set httpd port 2812 
  allow arturas:nebula44.mmosmrts.monit
  allow henrikas:operatoReady1.2.3

include /etc/monit/conf.d/*
  })
  File.write("/etc/monit/conf.d/munin-node", MONIT_MUNIN)
  File.write("/etc/monit/conf.d/exim4", MONIT_EXIM)
  File.modify("/etc/default/monit") do |contents|
    contents.sub("startup=0", "startup=1")
  end
  run "/etc/init.d/monit restart"
  
  puts "Checking for RVM..."
  (rvm() == "").and {
    puts "Installing RVM"
    rvminst="/tmp/rvm-installer"
    run("wget -O #{rvminst} https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer")
    run("chmod +x #{rvminst}")
    run("#{rvminst} stable")
    File.unlink(rvminst)
  
    %W{root #{USER} x11}.each do |user|
      run "adduser #{user} rvm"
    end

    File.ensure(BASHRC, "\n. /usr/local/rvm/scripts/rvm\n")

    puts
    puts "RVM installed and it needs to be loaded."
    puts
    puts "Please run this:"
    puts ". #{BASHRC}"
    exit
  }
end # }}}

if ARGV.include?("sql") # {{{
  run "gpg --keyserver  hkp://keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A"
  run "gpg -a --export CD2EFD2A | apt-key add -"
  File.write("/etc/apt/sources.list.d/percona.list", 
"deb http://repo.percona.com/apt #{DISTRO} main
deb-src http://repo.percona.com/apt #{DISTRO} main")
  run "apt-get update"

  install "percona-server-server xtrabackup libcache-cache-perl libdbd-mysql-perl"
  NEBULACNF_FILE = "/etc/mysql/conf.d/nebula.cnf"
  unless File.exists?(NEBULACNF_FILE)
    puts "Configuring mysqld..."
    File.write(NEBULACNF_FILE, NEBULACNF)
  end

  File.write("/etc/mysql/my.cnf", MYCNF, "0644")

  # This file needs empty line at EOF.
  File.write("/etc/mysql/backup.cnf", %Q{
!include /etc/mysql/my.cnf
!include /etc/mysql/debian.cnf
}, "0600")

  run "/etc/init.d/mysql restart"

  File.write("/etc/monit/conf.d/mysql", MONIT_MYSQL)
  run "/etc/init.d/monit restart"

  %w{queries threads bytes slowqueries}.each do |plugin|
    run "ln -sfv /usr/share/munin/plugins/mysql_#{plugin
      } /etc/munin/plugins/"
  end
  run "/etc/init.d/munin-node restart"
end # }}}

if ARGV.include?("server") # {{{
  # Ensure innodb is configured in the way we need it to be.
  File.ensure("/etc/mysql/conf.d/nebula.cnf", %Q{[mysqld]
innodb_rollback_on_timeout = ON
innodb_lock_wait_timeout = 10})

  install "java-common"

  `java -version 2>&1`.include?("java version \"1.7").or do
    run "add-apt-repository ppa:webupd8team/java"
    run "apt-get update"
    run "mkdir -p /usr/lib/mozilla/plugins"
    install "oracle-jdk7-installer"

    `java -version 2>&1`.include?("java version \"1.7").or do
      puts "Java7 install failed!"
      exit
    end
  end

  puts "Checking for jruby"
  rvm("list rubies").include?(JRUBY).or do
    puts "Building jruby, this will take a while..."
    install "ant"
    rvm("install #{JRUBY} #{JRUBY_INSTALL_OPTS}")
    rvm("#{JRUBY} do gem install bundler")
  end

  Dir.mkdir("#{HOME}/bin", nil, UCH)
  File.write("#{HOME}/bin/srvrunner", SRVRUNNER, 755, UCH)
  as(USER) { "ln -sf #{HOME}/nebula-server/shared/log #{LOGS}/server" }

  logrotate %Q{
#{LOGS}/server/*.log {
  rotate 10
  daily
  missingok
  dateext
  postrotate
    cd #{HOME}/nebula-server/current/ && lib/daemon.rb hup
  endscript
}
}

  puts "Adding server launcher to cron"
  cron "@hourly   $HOME/bin/srvrunner script/dump_galaxy.rb $HOME/web/current/www/public/galaxies/ >/dev/null 2>&1"

  # Linking munin
  puts "Linking munin plugins"
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/counters " +
    "/etc/munin/plugins/nebula44_counts ")
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/counters " +
    "/etc/munin/plugins/nebula44_time ")
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/logged_in.rb " +
    "/etc/munin/plugins/nebula44_logged_in ")
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/memory " +
    "/etc/munin/plugins/nebula44_mem ")
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/tasks " +
    "/etc/munin/plugins/nebula44_tasks ")
  run("ln -sf " +
    "#{HOME}/nebula-server/current/script/munin-plugins/pool " +
    "/etc/munin/plugins/nebula44_pool ")

  # Market plugins
  resources = %w{metal energy zetium creds}
  %w{rates counts}.each do |kind|
    resources.each do |r1|
      resources.each do |r2|
        unless r1 == r2
          run("ln -sf " +
            "#{HOME}/nebula-server/current/script/munin-plugins/market_.rb " +
            "/etc/munin/plugins/nebula44_market_#{kind}_#{r1}_#{r2}")
        end
      end
    end
  end

  run("/etc/init.d/munin-node restart")

  dbuser, pass = create_mysql("game", :file => true, :process => true)
  File.write("#{HOME}/config/db.game.yml", %Q{---
production:
  host: "localhost"
  database: "#{dbuser}"
  username: "#{dbuser}"
  password: "#{pass}"
}, nil, UCH)

  File.ensure("#{HOME}/config/jmx.password", JMX_CONFIG, "0600", UCH)

  File.write("/etc/monit/conf.d/nebula-server", MONIT_NEBULA_SERVER)
  run "/etc/init.d/monit restart"
end # }}}

if ARGV.include?("client") # {{{
  pubkeys(USER, *CLIENT_PUBKEYS)
  setup_apache
  run "a2enmod expires headers"
  Dir.mkdir "#{HOME}/nebula-client", nil, UCH
  apache_vhost("nebula-client", "#{HOME}/nebula-client/current", CLIENT_HOSTNAME)
end # }}}

if ARGV.include?("web") # {{{
  pubkeys(USER, *WEB_PUBKEYS)
  
  rubyv=WEB_RUBY_VERSION # ruby version
  rubygs=WEB_RUBY_GEMSET # ruby gemset
  rvms="#{rubyv}@#{rubygs}"
  puts "Checking for #{rubyv}"
  rvm("list rubies").include?(rubyv).or do
    puts "Building #{rubyv}. This may take a while..."
    rvm "install #{rubyv}"
  end
  File.ensure("#{HOME}/.profile", "\nexport RAILS_ENV='production'\n", nil, UCH)
  Dir.mkdir("#{HOME}/bin", nil, UCH)
  File.write("#{HOME}/bin/webrunner", WEBRUNNER, 755, UCH)

  setup_apache
  setup_php

  # Set up web components.
  install "libmysqlclient-dev libapache2-mod-xsendfile"
  # At least 1.3.16 needed to support +repage.
  # Built without openmp and libjbig
  debs "graphicsmagick-1.3.16", %w{
    graphicsmagick_1.3.16-1_i386 
    graphicsmagick-imagemagick-compat_1.3.16-1_all
    libgraphicsmagick3_1.3.16-1_i386
  }

  # Enable xsendfile for avatars
  File.write("/etc/apache2/mods-available/xsendfile.conf", %Q{
# http://www.qc4blog.com/?p=547
XSendFile On
# http://www.qc4blog.com/?p=555
XSendFileAllowAbove on
})
  run "a2enmod rewrite xsendfile expires headers"

  rvm "use --create #{rvms}"
  (rvmdo(rvms, "which bundle") == "").and {
    rvmdo(rvms, "gem install bundler --no-rdoc --no-ri")
  }
  (rvmdo(rvms, "which passenger-install-apache2-module") == "").and {
    # Passenger build deps
    install "libcurl4-openssl-dev apache2-prefork-dev libapr1-dev libaprutil1-dev"
    rvmdo(rvms, "gem install passenger --no-rdoc --no-ri")
  }

  passenger_load = "/etc/apache2/mods-available/passenger.load"
  unless passenger_load.exists?
    puts "Installing passenger apache2 module..."
    rvmdo(rvms, "passenger-install-apache2-module -a")
    passenger_dir = Dir["/usr/local/rvm/gems/#{rubyv}-*@#{rubygs}/gems/passenger-*"][0]
    if passenger_dir.nil?
      puts "Passenger install failed!"
      exit
    else
      puts "Installing passenger from #{passenger_dir}"
    end
    passenger = passenger_dir.split("/")[-1]
    content = %Q{
LoadModule passenger_module #{passenger_dir}/ext/apache2/mod_passenger.so
PassengerRoot #{passenger_dir}
PassengerRuby #{Dir["/usr/local/rvm/wrappers/#{rubyv}-*@#{rubygs}/ruby"][0]}
PassengerMinInstances #{PASSENGER_MIN_INSTANCES}
PassengerMaxPoolSize #{PASSENGER_MAX_POOL_SIZE}
PassengerPoolIdleTime #{PASSENGER_POOL_IDLE_TIME}
}
    File.write(passenger_load, content)
    run "a2enmod passenger"
  end

  # Install mysql2 gem... Must do tricks to avoid .so conflicts.
  puts 'mysql2 gem tricks... ENGAGE!'
  puts "BACKUPING"
  Dir["/usr/lib/libmysqlclient*.so"].each do |f|
    run("mv -vf #{f} #{f}~")
  end

  puts "SUBSTITUTING"
  Dir["/usr/lib/libmysqlclient*.so.18"].each do |f|
    name = f.sub(/\.18$/, '')
    run("ln -sfv #{f} #{name}")
  end

  puts "COMPILING!"
  rvmdo(rvms, "gem install mysql2 --version='~>0.2.6' --no-rdoc --no-ri")

  puts "RESTORING"
  Dir["/usr/lib/libmysqlclient*.so"].each do |f|
    run("rm -vf #{f}")
    run("mv -vf #{f}~ #{f}")
  end

  puts "Shazam! mysql2 is installed and linked against libmysqlclient18"

  as(USER) { rvm_str("rvmrc trust #{HOME}/web/current/.rvmrc") }

  def create_shared(base, *dirs)
    dirs.each do |dir|
      as(USER) { "mkdir -p #{base}/#{dir}" }
      run "chown #{USER}: #{base}/#{dir}"
      run "chmod 775 #{base}/#{dir}"
    end
  end

  # Forum configuration
  apache_vhost(
    "nebula-forum", "#{HOME}/web/current/forum", 
    "forum.nebula44.#{DOMAIN}", php_fpm_vhost_conf("forum")
  )
  forum_dbuser, forum_pass = create_mysql("forum")
  forum_secret = rand_pass(64)
  forum_cookie = "forum_n44_#{DOMAIN}_#{rand(10000)}"
  forum_uri = "http://forum.nebula44.#{DOMAIN}"
  File.write("#{HOME}/config/forum.php", %Q{<?php

$db_type = 'mysqli';
$db_host = 'localhost';
$db_name = '#{forum_dbuser}';
$db_username = '#{forum_dbuser}';
$db_password = '#{forum_pass}';
$db_prefix = '';
$p_connect = false;

$base_url = "#{forum_uri}";

$cookie_name = "#{forum_cookie}";
$cookie_domain = '.nebula44.#{DOMAIN}';
$cookie_path = '/';
$cookie_secure = 0;

define('FORUM', 1);
define('FORUM_API_SECRET_KEY', "#{forum_secret}");
define('ALLIANCE_FORUMS_CATEGORY', 1);
define('WEB_URL', "http://nebula44.#{DOMAIN}");
define('DEFAULT_LANGUAGE', "#{FORUM_LANG}");
//define('FORUM_DEBUG', 1);
}, nil, UCH)

  create_shared("#{HOME}/web/shared/forum", "cache", "attachments")

  # WIKI configuration
  apache_vhost(
    "nebula-wiki", "#{HOME}/web/current/wiki",
    "wiki.nebula44.#{DOMAIN}", php_fpm_vhost_conf("wiki")
  )
  dbuser, pass = create_mysql("wiki")
  File.write("#{HOME}/config/wiki.php", %Q{<?php

$wgDBtype           = "mysql";
$wgDBserver         = "localhost";
$wgDBname           = "#{dbuser}";
$wgDBuser           = "#{dbuser}";
$wgDBpassword       = "#{pass}";

$wgSecretKey = "#{rand_pass(64)}";
$wgLanguageCode = "#{LOCALE}";
$webDomain = "nebula44.#{DOMAIN}";
$webUrl = "http://$webDomain";
$wgPasswordSender = "apache@wiki.$webDomain";
}, nil, UCH)
  create_shared("#{HOME}/web/shared/wiki", "cache", "uploads")

  # WEB configuration
  apache_vhost("nebula-web", "#{HOME}/web/current/www/public", "nebula44.#{DOMAIN}")
  File.ensure(
    "/etc/apache2/sites-enabled/nebula-web", 
    %Q{PassengerPreStart http://nebula44.#{DOMAIN}}
  )
  apache_vhost(
    "nebula-web-www", "#{HOME}/web/current/www-redirect", 
    "www.nebula44.#{DOMAIN}", php_fpm_vhost_conf("www")
  )
  dbuser, pass = create_mysql("web")
  File.write("#{HOME}/config/db.web.yml", %Q{---
production: &production
  host: "localhost"
  adapter: mysql2
  database: "#{dbuser}"
  username: "#{dbuser}"
  password: "#{pass}"

staging:
  <<: *production

forum_production: &forum_production
  adapter: mysql2
  database: "#{forum_dbuser}"
  username: "#{forum_dbuser}"
  password: "#{forum_pass}"

forum_staging:
  <<: *forum_production

}, nil, UCH)

  File.write("#{HOME}/config/web.rb", %Q{
FORUM_URI = "#{forum_uri}"
FORUM_API_KEY = "#{forum_secret}"
FORUM_COOKIE_NAME = "#{forum_cookie}"
WIKI_URI = 'http://wiki.nebula44.#{DOMAIN}/wiki'
NEWS_FORUM_ID = 2
GA_ACCOUNT_ID = "#{GA_ACCOUNT_ID}"

# This is used in application controller.
LOCALE = :#{LOCALE}

# Debugger wiki link
DEBUGGER_WIKI = "http://wiki.nebula44.com/wiki/Debugger"

ENABLE_WEB2PAY = true

# Currency conversion
SOURCE_CURRENCY = "USD"
TARGET_CURRENCY = "USD"
CURRENCY_CONVERSION_RATIO = 1

# Email configuration
ActionMailer::Base.default_url_options[:host] = "nebula44.#{DOMAIN}"
ActionMailer::Base.perform_deliveries = true
ActionMailer::Base.delivery_method = :sendmail
# -i means ".\\n" does not terminate mail.
# -t is skipped because it fucks up delivery on some MTAs
ActionMailer::Base.sendmail_settings[:arguments] = "-i"
}, nil, UCH)

  as(USER) { "ln -sf #{HOME}/web/shared/web/log #{LOGS}/web" }
  logrotate %Q{
#{LOGS}/web/*.log {
  rotate 10
  daily
  missingok
  dateext
  postrotate
    touch #{HOME}/web/current/www/tmp/restart.txt
  endscript
}
}

  run "/etc/init.d/apache2 restart"

  File.write("/etc/monit/conf.d/delayed_job", MONIT_DELAYED_JOB)
  run "/etc/init.d/monit restart"
end # }}}
