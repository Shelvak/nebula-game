---
<%
def apl_to(*units)
  "[%s]" % units.deep_flat_map do |unit|
    %Q{"#{unit.to_s.underscore}"}
  end.join(", ")
end

# Ground units
trooper = Unit::Trooper
seeker = Unit::Seeker
shocker = Unit::Shocker
scorpion = Unit::Scorpion
mantis = Unit::Mantis
azure = Unit::Azure
zeus = Unit::Zeus

# Npc ground units
gnat = Unit::Gnat
glancer = Unit::Glancer
spudder = Unit::Spudder
gnawer = Unit::Gnawer

# Space units
mule = Unit::Mule
crow = Unit::Crow
cyrix = Unit::Cyrix
dart = Unit::Dart
avenger = Unit::Avenger
rhyno = Unit::Rhyno

# Npc space units
dirac = Unit::Dirac
thor = Unit::Thor
demosis = Unit::Demosis
convoy_ship = Unit::ConvoyShip
boss_ship = Unit::BossShip

ground = [trooper, seeker, shocker, scorpion, mantis, azure, zeus]
npc_ground = [gnat, glancer, spudder, gnawer]

light_space = [crow, cyrix, dart, avenger]
heavy_space = [mule, rhyno]
space = light_space + heavy_space

npc_light_space = [dirac, thor]
npc_heavy_space = [demosis, convoy_ship]
npc_space = npc_light_space + npc_heavy_space

vulcan = [Building::Vulcan, Building::MobileVulcan]
screamer = [Building::Screamer, Building::MobileScreamer]
thunder = [Building::Thunder, Building::MobileThunder]

turrets = vulcan + screamer + thunder

# Level of base technology required to start specialization technologies.
spec_base_tech_req = 3
%>

# Technologies configuration file.

# Multiplier for resource need when overtime is forced
speed_up.resources.mod: 2
# Multiplier for time reduction when overtime is forced
speed_up.time.mod: 1.8
# How much time % does extra 1% (in relation to minimal amount of scientists)
# scientists reduce? E.g. 0.1 would mean that every 100% in additional 
# scientists reduces time by 10%.
scientists.additional: 0.2
# What is max research time reduction? E.g. 80 would mean that technology can
# be reduces to 20% it's upgrade time by using additional scientists.
scientists.additional.max_reduction: 60

### fiery_melters config ###

fiery_melters.coords: [0, 0]
fiery_melters.max_level: 10 # autogenerated by odsimport
fiery_melters.upgrade_time: ((2868.0 + level ** 5.09) * 3.0) / speed # autogenerated by odsimport
fiery_melters.metal.cost: (1451.03 + level ** 4.84) * 0.5 # autogenerated by odsimport
fiery_melters.energy.cost: 3212.13 + level ** 5.55 # autogenerated by odsimport
fiery_melters.zetium.cost: (393.89 + level ** 4.41) * 0.2 # autogenerated by odsimport
fiery_melters.scientists.min: (2868.0 + level ** 5.09) * 0.01 # autogenerated by odsimport
fiery_melters.mod.metal.generate: 10.0 * level # autogenerated by odsimport
fiery_melters.mod.metal.store: 20.0 * level # autogenerated by odsimport
fiery_melters.war_points: (635.38 + 5925.37 * (level + -1.0)) * level # autogenerated by odsimport
fiery_melters.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport

### superconductor_technology config ###

superconductor_technology.coords: [1, 0]
superconductor_technology.max_level: 10 # autogenerated by odsimport
superconductor_technology.upgrade_time: ((2304.0 + level ** 4.94) * 3.0) / speed # autogenerated by odsimport
superconductor_technology.metal.cost: 1451.03 + level ** 4.84 # autogenerated by odsimport
superconductor_technology.energy.cost: (3212.13 + level ** 5.55) * 0.5 # autogenerated by odsimport
superconductor_technology.zetium.cost: (393.89 + level ** 4.41) * 0.2 # autogenerated by odsimport
superconductor_technology.scientists.min: (2304.0 + level ** 4.94) * 0.01 # autogenerated by odsimport
superconductor_technology.mod.energy.generate: 10.0 * level # autogenerated by odsimport
superconductor_technology.mod.energy.store: 20.0 * level # autogenerated by odsimport
superconductor_technology.war_points: (697.29 + 5029.8 * (level + -1.0)) * level # autogenerated by odsimport
superconductor_technology.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport

collector_t3.coords: [2, 0]
collector_t3.max_level: 1 # autogenerated by odsimport
collector_t3.upgrade_time: ((2000.0 * (level + 3.0) + (level + 1.0) ** 3.0 + 4.0 ** (level + 4.1)) * 11.0) / speed # autogenerated by odsimport
collector_t3.metal.cost: (6.0 + 1.6 * level + 0.5 * level ** 1.5) * 21600.0 # autogenerated by odsimport
collector_t3.energy.cost: (2.4 + 1.2 * level + 0.2 * (level + -0.2) ** 2.63) * 32400.0 # autogenerated by odsimport
collector_t3.zetium.cost: (224.64 + 364.73 * (level + -1.0)) * 300.0 # autogenerated by odsimport
collector_t3.requirement.superconductor_technology.level: 6
collector_t3.war_points: (113693.16) * level # autogenerated by odsimport
collector_t3.planets.required: 3.0 # autogenerated by odsimport
collector_t3.scientists.min: (2000.0 * (level + 3.0) + (level + 1.0) ** 3.0 + 4.0 ** (level + 4.1)) * 0.0367 # autogenerated by odsimport

### market config ###

# Coordinates in technology tree
market.coords: [3, 0]

# Upgrade properties
market.max_level: 1 # autogenerated by odsimport
market.upgrade_time: (12600.0) / speed # autogenerated by odsimport
market.metal.cost: 0.0 # autogenerated by odsimport
market.energy.cost: 0.0 # autogenerated by odsimport
market.zetium.cost: 750.0 # autogenerated by odsimport
# Minimum amount of scientists needed
market.scientists.min: 41.958 # autogenerated by odsimport

# Technological requirements
market.war_points: (487.5) * level # autogenerated by odsimport
market.planets.required: level # autogenerated by odsimport

### crane config ###

# Coordinates in technology tree
crane.coords: [4, 0]

# Upgrade properties
crane.max_level: 1 # autogenerated by odsimport
crane.upgrade_time: (39600.0) / speed # autogenerated by odsimport
crane.metal.cost: 11760.0 # autogenerated by odsimport
crane.energy.cost: 16800.0 # autogenerated by odsimport
crane.zetium.cost: 1008.0 # autogenerated by odsimport
# Minimum amount of scientists needed
crane.scientists.min: 132.0 # autogenerated by odsimport
crane.war_points: (6297.2) * level # autogenerated by odsimport
crane.planets.required: level # autogenerated by odsimport

### healing_center config ###

# Coordinates in technology tree
healing_center.coords: [5, 0]

# Upgrade properties
healing_center.max_level: 1 # autogenerated by odsimport
healing_center.upgrade_time: (5355.0) / speed # autogenerated by odsimport
healing_center.metal.cost: 3522.83 # autogenerated by odsimport
healing_center.energy.cost: 5460.38 # autogenerated by odsimport
healing_center.zetium.cost: 352.28 # autogenerated by odsimport
# Minimum amount of scientists needed
healing_center.scientists.min: 17.6715 # autogenerated by odsimport
healing_center.war_points: (1965.44) * level # autogenerated by odsimport
healing_center.planets.required: level # autogenerated by odsimport

### radar config ###

radar.coords: [6, 0]
radar.max_level: 1 # autogenerated by odsimport
radar.upgrade_time: (32400.0) / speed # autogenerated by odsimport
radar.metal.cost: 7241.16 # autogenerated by odsimport
radar.energy.cost: 16004.61 # autogenerated by odsimport
radar.zetium.cost: 983.31 # autogenerated by odsimport
radar.scientists.min: 108.0 # autogenerated by odsimport
radar.war_points: (4726.36) * level # autogenerated by odsimport
radar.planets.required: level # autogenerated by odsimport

### trooper config ###

# Coordinates in technology tree
trooper.coords: [7, 0]

# Upgrade properties
trooper.max_level: 9 # autogenerated by odsimport
trooper.upgrade_time: (2880.0 + 5040.0 * (level + -1.0)) / speed # autogenerated by odsimport
trooper.metal.cost: 1242.0 + 2173.5 * (level + -1.0) # autogenerated by odsimport
trooper.energy.cost: 2484.0 + 4347.0 * (level + -1.0) # autogenerated by odsimport
trooper.zetium.cost: 0.0 # autogenerated by odsimport
# Minimum amount of scientists needed
trooper.scientists.min: (2880.0 + 5040.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
trooper.war_points: (672.75 + 1177.31 * (level + -1.0)) * level # autogenerated by odsimport
trooper.planets.required: 1.0 + 0.25 * (level + -1.0) # autogenerated by odsimport
trooper.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
trooper.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
trooper.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
trooper.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
trooper.applies_to: <%= apl_to(trooper) %>

### trooper_damage config ###

trooper_damage.name: DamageSpecialization
trooper_damage.group_to: trooper
trooper_damage.group_position: 0

# Upgrade properties
trooper_damage.max_level: 10 # autogenerated by odsimport
trooper_damage.upgrade_time: (2880.0 + 4480.0 * (level + -1.0)) / speed # autogenerated by odsimport
trooper_damage.metal.cost: 1242.0 + 1932.0 * (level + -1.0) # autogenerated by odsimport
trooper_damage.energy.cost: 2484.0 + 3864.0 * (level + -1.0) # autogenerated by odsimport
trooper_damage.zetium.cost: 0.0 # autogenerated by odsimport
trooper_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
trooper_damage.scientists.min: (2880.0 + 4480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
trooper_damage.war_points: (672.75 + 1046.5 * (level + -1.0)) * level # autogenerated by odsimport
trooper_damage.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
trooper_damage.requirement.trooper.level: <%= spec_base_tech_req %>
trooper_damage.requirement.trooper_armor.invert: true
trooper_damage.requirement.trooper_critical.invert: true
trooper_damage.requirement.trooper_absorption.invert: true
trooper_damage.applies_to: <%= apl_to(trooper) %>

### trooper_armor config ###

trooper_armor.name: ArmorSpecialization
trooper_armor.group_to: trooper
trooper_armor.group_position: 1

# Upgrade properties
trooper_armor.max_level: 10 # autogenerated by odsimport
trooper_armor.upgrade_time: (2880.0 + 4480.0 * (level + -1.0)) / speed # autogenerated by odsimport
trooper_armor.metal.cost: 1242.0 + 1932.0 * (level + -1.0) # autogenerated by odsimport
trooper_armor.energy.cost: 2484.0 + 3864.0 * (level + -1.0) # autogenerated by odsimport
trooper_armor.zetium.cost: 0.0 # autogenerated by odsimport
trooper_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
trooper_armor.scientists.min: (2880.0 + 4480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
trooper_armor.war_points: (672.75 + 1046.5 * (level + -1.0)) * level # autogenerated by odsimport
trooper_armor.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
trooper_armor.requirement.trooper.level: <%= spec_base_tech_req %>
trooper_armor.requirement.trooper_damage.invert: true
trooper_armor.requirement.trooper_critical.invert: true
trooper_armor.requirement.trooper_absorption.invert: true
trooper_armor.applies_to: <%= apl_to(trooper) %>

### trooper_critical config ###

trooper_critical.name: CriticalSpecialization
trooper_critical.group_to: trooper
trooper_critical.group_position: 2

# Upgrade properties
trooper_critical.max_level: 10 # autogenerated by odsimport
trooper_critical.upgrade_time: (2880.0 + 4480.0 * (level + -1.0)) / speed # autogenerated by odsimport
trooper_critical.metal.cost: 1242.0 + 1932.0 * (level + -1.0) # autogenerated by odsimport
trooper_critical.energy.cost: 2484.0 + 3864.0 * (level + -1.0) # autogenerated by odsimport
trooper_critical.zetium.cost: 0.0 # autogenerated by odsimport
trooper_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
trooper_critical.scientists.min: (2880.0 + 4480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
trooper_critical.war_points: (672.75 + 1046.5 * (level + -1.0)) * level # autogenerated by odsimport
trooper_critical.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
trooper_critical.requirement.trooper.level: <%= spec_base_tech_req %>
trooper_critical.requirement.trooper_damage.invert: true
trooper_critical.requirement.trooper_armor.invert: true
trooper_critical.requirement.trooper_absorption.invert: true
trooper_critical.applies_to: <%= apl_to(trooper) %>

### trooper_absorption config ###

trooper_absorption.name: AbsorptionSpecialization
trooper_absorption.group_to: trooper
trooper_absorption.group_position: 3

# Upgrade properties
trooper_absorption.max_level: 10 # autogenerated by odsimport
trooper_absorption.upgrade_time: (2880.0 + 4480.0 * (level + -1.0)) / speed # autogenerated by odsimport
trooper_absorption.metal.cost: 1242.0 + 1932.0 * (level + -1.0) # autogenerated by odsimport
trooper_absorption.energy.cost: 2484.0 + 3864.0 * (level + -1.0) # autogenerated by odsimport
trooper_absorption.zetium.cost: 0.0 # autogenerated by odsimport
trooper_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
trooper_absorption.scientists.min: (2880.0 + 4480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
trooper_absorption.war_points: (672.75 + 1046.5 * (level + -1.0)) * level # autogenerated by odsimport
trooper_absorption.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
trooper_absorption.requirement.trooper.level: <%= spec_base_tech_req %>
trooper_absorption.requirement.trooper_damage.invert: true
trooper_absorption.requirement.trooper_armor.invert: true
trooper_absorption.requirement.trooper_critical.invert: true
trooper_absorption.applies_to: <%= apl_to(trooper) %>

### shocker config ###

shocker.coords: [8, 0]
shocker.max_level: 10 # autogenerated by odsimport
shocker.upgrade_time: (10200.0 + 15866.67 * (level + -1.0)) / speed # autogenerated by odsimport
shocker.metal.cost: 2782.27 + 4327.98 * (level + -1.0) # autogenerated by odsimport
shocker.energy.cost: 5564.54 + 8655.96 * (level + -1.0) # autogenerated by odsimport
shocker.zetium.cost: 121.72 + 189.35 * (level + -1.0) # autogenerated by odsimport
shocker.scientists.min: (10200.0 + 15866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
shocker.war_points: (1586.18 + 2467.4 * (level + -1.0)) * level # autogenerated by odsimport
shocker.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
shocker.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
shocker.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
shocker.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
shocker.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
shocker.applies_to: <%= apl_to(shocker) %>

### shocker_damage config ###

shocker_damage.name: DamageSpecialization
shocker_damage.group_to: shocker
shocker_damage.group_position: 0

# Upgrade properties
shocker_damage.max_level: 10 # autogenerated by odsimport
shocker_damage.upgrade_time: (10200.0 + 15866.67 * (level + -1.0)) / speed # autogenerated by odsimport
shocker_damage.metal.cost: 2782.27 + 4327.98 * (level + -1.0) # autogenerated by odsimport
shocker_damage.energy.cost: 5564.54 + 8655.96 * (level + -1.0) # autogenerated by odsimport
shocker_damage.zetium.cost: 121.72 + 189.35 * (level + -1.0) # autogenerated by odsimport
shocker_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
shocker_damage.scientists.min: (10200.0 + 15866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
shocker_damage.war_points: (1586.18 + 2467.4 * (level + -1.0)) * level # autogenerated by odsimport
shocker_damage.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
shocker_damage.requirement.shocker.level: <%= spec_base_tech_req %>
shocker_damage.requirement.shocker_armor.invert: true
shocker_damage.requirement.shocker_critical.invert: true
shocker_damage.requirement.shocker_absorption.invert: true
shocker_damage.applies_to: <%= apl_to(shocker) %>

### shocker_armor config ###

shocker_armor.name: ArmorSpecialization
shocker_armor.group_to: shocker
shocker_armor.group_position: 1

# Upgrade properties
shocker_armor.max_level: 10 # autogenerated by odsimport
shocker_armor.upgrade_time: (10200.0 + 15866.67 * (level + -1.0)) / speed # autogenerated by odsimport
shocker_armor.metal.cost: 2782.27 + 4327.98 * (level + -1.0) # autogenerated by odsimport
shocker_armor.energy.cost: 5564.54 + 8655.96 * (level + -1.0) # autogenerated by odsimport
shocker_armor.zetium.cost: 121.72 + 189.35 * (level + -1.0) # autogenerated by odsimport
shocker_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
shocker_armor.scientists.min: (10200.0 + 15866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
shocker_armor.war_points: (1586.18 + 2467.4 * (level + -1.0)) * level # autogenerated by odsimport
shocker_armor.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
shocker_armor.requirement.shocker.level: <%= spec_base_tech_req %>
shocker_armor.requirement.shocker_damage.invert: true
shocker_armor.requirement.shocker_critical.invert: true
shocker_armor.requirement.shocker_absorption.invert: true
shocker_armor.applies_to: <%= apl_to(shocker) %>

### shocker_critical config ###

shocker_critical.name: CriticalSpecialization
shocker_critical.group_to: shocker
shocker_critical.group_position: 2

# Upgrade properties
shocker_critical.max_level: 10 # autogenerated by odsimport
shocker_critical.upgrade_time: (10200.0 + 15866.67 * (level + -1.0)) / speed # autogenerated by odsimport
shocker_critical.metal.cost: 2782.27 + 4327.98 * (level + -1.0) # autogenerated by odsimport
shocker_critical.energy.cost: 5564.54 + 8655.96 * (level + -1.0) # autogenerated by odsimport
shocker_critical.zetium.cost: 121.72 + 189.35 * (level + -1.0) # autogenerated by odsimport
shocker_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
shocker_critical.scientists.min: (10200.0 + 15866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
shocker_critical.war_points: (1586.18 + 2467.4 * (level + -1.0)) * level # autogenerated by odsimport
shocker_critical.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
shocker_critical.requirement.shocker.level: <%= spec_base_tech_req %>
shocker_critical.requirement.shocker_damage.invert: true
shocker_critical.requirement.shocker_armor.invert: true
shocker_critical.requirement.shocker_absorption.invert: true
shocker_critical.applies_to: <%= apl_to(shocker) %>

### shocker_absorption config ###

shocker_absorption.name: AbsorptionSpecialization
shocker_absorption.group_to: shocker
shocker_absorption.group_position: 3

# Upgrade properties
shocker_absorption.max_level: 10 # autogenerated by odsimport
shocker_absorption.upgrade_time: (10200.0 + 15866.67 * (level + -1.0)) / speed # autogenerated by odsimport
shocker_absorption.metal.cost: 2782.27 + 4327.98 * (level + -1.0) # autogenerated by odsimport
shocker_absorption.energy.cost: 5564.54 + 8655.96 * (level + -1.0) # autogenerated by odsimport
shocker_absorption.zetium.cost: 121.72 + 189.35 * (level + -1.0) # autogenerated by odsimport
shocker_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
shocker_absorption.scientists.min: (10200.0 + 15866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
shocker_absorption.war_points: (1586.18 + 2467.4 * (level + -1.0)) * level # autogenerated by odsimport
shocker_absorption.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
shocker_absorption.requirement.shocker.level: <%= spec_base_tech_req %>
shocker_absorption.requirement.shocker_damage.invert: true
shocker_absorption.requirement.shocker_armor.invert: true
shocker_absorption.requirement.shocker_critical.invert: true
shocker_absorption.applies_to: <%= apl_to(shocker) %>

### seeker config ###

seeker.coords: [9, 0]
seeker.max_level: 10 # autogenerated by odsimport
seeker.upgrade_time: (4896.0 + 7616.0 * (level + -1.0)) / speed # autogenerated by odsimport
seeker.metal.cost: 1626.01 + 2529.35 * (level + -1.0) # autogenerated by odsimport
seeker.energy.cost: 3252.02 + 5058.7 * (level + -1.0) # autogenerated by odsimport
seeker.zetium.cost: 0.0 # autogenerated by odsimport
seeker.scientists.min: (4896.0 + 7616.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
seeker.war_points: (880.76 + 1370.07 * (level + -1.0)) * level # autogenerated by odsimport
seeker.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
seeker.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
seeker.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
seeker.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
seeker.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
seeker.applies_to: <%= apl_to(seeker) %>

### seeker_damage config ###

seeker_damage.name: DamageSpecialization
seeker_damage.group_to: seeker
seeker_damage.group_position: 0

# Upgrade properties
seeker_damage.max_level: 10 # autogenerated by odsimport
seeker_damage.upgrade_time: (4896.0 + 7616.0 * (level + -1.0)) / speed # autogenerated by odsimport
seeker_damage.metal.cost: 1626.01 + 2529.35 * (level + -1.0) # autogenerated by odsimport
seeker_damage.energy.cost: 3252.02 + 5058.7 * (level + -1.0) # autogenerated by odsimport
seeker_damage.zetium.cost: 0.0 # autogenerated by odsimport
seeker_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
seeker_damage.scientists.min: (4896.0 + 7616.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
seeker_damage.war_points: (880.76 + 1370.07 * (level + -1.0)) * level # autogenerated by odsimport
seeker_damage.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
seeker_damage.requirement.seeker.level: <%= spec_base_tech_req %>
seeker_damage.requirement.seeker_armor.invert: true
seeker_damage.requirement.seeker_critical.invert: true
seeker_damage.requirement.seeker_absorption.invert: true
seeker_damage.applies_to: <%= apl_to(seeker) %>

### seeker_armor config ###

seeker_armor.name: ArmorSpecialization
seeker_armor.group_to: seeker
seeker_armor.group_position: 1

# Upgrade properties
seeker_armor.max_level: 10 # autogenerated by odsimport
seeker_armor.upgrade_time: (4896.0 + 7616.0 * (level + -1.0)) / speed # autogenerated by odsimport
seeker_armor.metal.cost: 1626.01 + 2529.35 * (level + -1.0) # autogenerated by odsimport
seeker_armor.energy.cost: 3252.02 + 5058.7 * (level + -1.0) # autogenerated by odsimport
seeker_armor.zetium.cost: 0.0 # autogenerated by odsimport
seeker_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
seeker_armor.scientists.min: (4896.0 + 7616.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
seeker_armor.war_points: (880.76 + 1370.07 * (level + -1.0)) * level # autogenerated by odsimport
seeker_armor.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
seeker_armor.requirement.seeker.level: <%= spec_base_tech_req %>
seeker_armor.requirement.seeker_damage.invert: true
seeker_armor.requirement.seeker_critical.invert: true
seeker_armor.requirement.seeker_absorption.invert: true
seeker_armor.applies_to: <%= apl_to(seeker) %>

### seeker_critical config ###

seeker_critical.name: CriticalSpecialization
seeker_critical.group_to: seeker
seeker_critical.group_position: 2

# Upgrade properties
seeker_critical.max_level: 10 # autogenerated by odsimport
seeker_critical.upgrade_time: (4896.0 + 7616.0 * (level + -1.0)) / speed # autogenerated by odsimport
seeker_critical.metal.cost: 1626.01 + 2529.35 * (level + -1.0) # autogenerated by odsimport
seeker_critical.energy.cost: 3252.02 + 5058.7 * (level + -1.0) # autogenerated by odsimport
seeker_critical.zetium.cost: 0.0 # autogenerated by odsimport
seeker_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
seeker_critical.scientists.min: (4896.0 + 7616.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
seeker_critical.war_points: (880.76 + 1370.07 * (level + -1.0)) * level # autogenerated by odsimport
seeker_critical.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
seeker_critical.requirement.seeker.level: <%= spec_base_tech_req %>
seeker_critical.requirement.seeker_damage.invert: true
seeker_critical.requirement.seeker_armor.invert: true
seeker_critical.requirement.seeker_absorption.invert: true
seeker_critical.applies_to: <%= apl_to(seeker) %>

### seeker_absorption config ###

seeker_absorption.name: AbsorptionSpecialization
seeker_absorption.group_to: seeker
seeker_absorption.group_position: 3

# Upgrade properties
seeker_absorption.max_level: 10 # autogenerated by odsimport
seeker_absorption.upgrade_time: (4896.0 + 7616.0 * (level + -1.0)) / speed # autogenerated by odsimport
seeker_absorption.metal.cost: 1626.01 + 2529.35 * (level + -1.0) # autogenerated by odsimport
seeker_absorption.energy.cost: 3252.02 + 5058.7 * (level + -1.0) # autogenerated by odsimport
seeker_absorption.zetium.cost: 0.0 # autogenerated by odsimport
seeker_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
seeker_absorption.scientists.min: (4896.0 + 7616.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
seeker_absorption.war_points: (880.76 + 1370.07 * (level + -1.0)) * level # autogenerated by odsimport
seeker_absorption.planets.required: 1.0 + 0.22 * (level + -1.0) # autogenerated by odsimport
seeker_absorption.requirement.seeker.level: <%= spec_base_tech_req %>
seeker_absorption.requirement.seeker_damage.invert: true
seeker_absorption.requirement.seeker_armor.invert: true
seeker_absorption.requirement.seeker_critical.invert: true
seeker_absorption.applies_to: <%= apl_to(seeker) %>

### metal_extractor_t2 config ###

# Coordinates in technology tree
metal_extractor_t2.coords: [0, 1]

# Upgrade properties
metal_extractor_t2.max_level: 1 # autogenerated by odsimport
metal_extractor_t2.upgrade_time: ((-4000.0 + 1500.0 * (level + 3.0) + (level + 5.0) ** 5.0 + 3.0 ** (level + 6.0)) * 10.0) / speed # autogenerated by odsimport
metal_extractor_t2.metal.cost: (-100.0 + 1.6 * level + level ** 1.5 + 3.0 ** (level + 4.0)) * 16.0 # autogenerated by odsimport
metal_extractor_t2.energy.cost: (3.0 + 10.0 * (level + -3.0) + (level + -0.2) ** 2.0 + 2.0 ** (level + 3.4)) * 1620.0 # autogenerated by odsimport
metal_extractor_t2.zetium.cost: (224.64 + 364.73 * (level + -1.0)) * 10.0 # autogenerated by odsimport
# Minimum amount of scientists needed
metal_extractor_t2.scientists.min: (-4000.0 + 1500.0 * (level + 3.0) + (level + 5.0) ** 5.0 + 3.0 ** (level + 6.0)) * 0.0333 # autogenerated by odsimport

# Technological requirements
metal_extractor_t2.requirement.fiery_melters.level: 4
metal_extractor_t2.war_points: (3051.28) * level # autogenerated by odsimport
metal_extractor_t2.planets.required: 2.0 # autogenerated by odsimport

collector_t2.coords: [1, 1]
collector_t2.max_level: 1 # autogenerated by odsimport
collector_t2.upgrade_time: ((2000.0 * (level + 3.0) + (level + 1.0) ** 3.0 + 4.0 ** (level + 4.1)) * 10.0) / speed # autogenerated by odsimport
collector_t2.metal.cost: (8.0 * level + 0.5 * level ** 2.2) * 1800.0 # autogenerated by odsimport
collector_t2.energy.cost: (4.0 + 0.8 * level + 0.2 * (level + -0.2) ** 1.45) * 2200.0 # autogenerated by odsimport
collector_t2.zetium.cost: (224.64 + 364.73 * (level + -1.0)) * 10.0 # autogenerated by odsimport
collector_t2.requirement.superconductor_technology.level: 4
collector_t2.war_points: (7611.15) * level # autogenerated by odsimport
collector_t2.planets.required: 2.0 # autogenerated by odsimport
collector_t2.scientists.min: (2000.0 * (level + 3.0) + (level + 1.0) ** 3.0 + 4.0 ** (level + 4.1)) * 0.0333 # autogenerated by odsimport

### energy_storage config ###

# Coordinates in technology tree
energy_storage.coords: [2, 1]

# Upgrade properties
energy_storage.max_level: 10 # autogenerated by odsimport
energy_storage.upgrade_time: ((400.0 * (level + 3.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 3.0)) * 40.0) / speed # autogenerated by odsimport
energy_storage.metal.cost: (9636.38 + 14060.62 * (level + -1.0)) * 6.0 # autogenerated by odsimport
energy_storage.energy.cost: (9636.38 + 14060.62 * (level + -1.0)) * 30.0 # autogenerated by odsimport
energy_storage.zetium.cost: (9636.38 + 14060.62 * (level + -1.0)) * 1.5 # autogenerated by odsimport
# Minimum amount of scientists needed
energy_storage.scientists.min: (400.0 * (level + 3.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 3.0)) * 0.1333 # autogenerated by odsimport
energy_storage.mod.energy.store: 180.0 * level # autogenerated by odsimport

# Technological requirements
energy_storage.war_points: (59504.64 + 86824.35 * (level + -1.0)) * level # autogenerated by odsimport
energy_storage.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
energy_storage.requirement.collector_t3.level: 1

resource_transporter.coords: [3, 1]
resource_transporter.max_level: 1 # autogenerated by odsimport
resource_transporter.upgrade_time: ((9968.0 + 12736.89 * (level + -1.0)) * 4.8) / speed # autogenerated by odsimport
resource_transporter.metal.cost: (498.4 + 636.84 * (level + -1.0)) * 16.6667 # autogenerated by odsimport
resource_transporter.energy.cost: (498.4 + 636.84 * (level + -1.0)) * 50.0 # autogenerated by odsimport
resource_transporter.zetium.cost: (498.4 + 636.84 * (level + -1.0)) * 8.3333 # autogenerated by odsimport
resource_transporter.scientists.min: (9968.0 + 12736.89 * (level + -1.0)) * 0.016 # autogenerated by odsimport
resource_transporter.war_points: (8099.0) * level # autogenerated by odsimport
resource_transporter.planets.required: 1.0 + level # autogenerated by odsimport
resource_transporter.requirement.market.level: 1

# [4, 1] is empty.

### building_repair config ###

# Coordinates in technology tree
building_repair.coords: [5, 1]

# Upgrade properties
building_repair.max_level: 6 # autogenerated by odsimport
building_repair.upgrade_time: (8032.5 + 2142.0 * (level + -1.0)) / speed # autogenerated by odsimport
building_repair.metal.cost: 5284.24 + 1409.13 * (level + -1.0) # autogenerated by odsimport
building_repair.energy.cost: 8190.57 + 2184.15 * (level + -1.0) # autogenerated by odsimport
building_repair.zetium.cost: 528.42 + 140.91 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
building_repair.scientists.min: (8032.5 + 2142.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
building_repair.war_points: (2948.16 + 786.18 * (level + -1.0)) * level # autogenerated by odsimport
building_repair.planets.required: 2.0 + 0.6 * (level + -1.0) # autogenerated by odsimport
building_repair.requirement.healing_center.level: 1
building_repair.healing.time.mod: (9.0 + -1.44 * (level + -1.0)) / speed # autogenerated by odsimport
building_repair.healing.cost.mod: 2.25 + -0.2 * (level + -1.0) # autogenerated by odsimport

### alliances config ###

# Coordinates in technology tree
alliances.coords: [6, 1]

# Upgrade properties
alliances.max_level: 4 # autogenerated by odsimport
alliances.requirement.radar.level: 1
# Maximum number of players allowed in alliance.
alliances.max_players: 1.0 + level # autogenerated by odsimport
alliances.upgrade_time: (86400.0 + 129600.0 * (level + -1.0)) / speed # autogenerated by odsimport
alliances.metal.cost: 24319.28 + 48638.56 * (level + -1.0) # autogenerated by odsimport
alliances.energy.cost: 54077.12 + 108154.23 * (level + -1.0) # autogenerated by odsimport
alliances.zetium.cost: 6591.86 + 13183.71 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
alliances.scientists.min: (86400.0 + 129600.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
alliances.war_points: (18046.83 + 36093.65 * (level + -1.0)) * level # autogenerated by odsimport
alliances.planets.required: 1.0 + level # autogenerated by odsimport

### vulcan config ###

# Coordinates in technology tree
vulcan.coords: [7, 1]

# Upgrade properties
vulcan.max_level: 10 # autogenerated by odsimport
vulcan.upgrade_time: (38880.0 + 60480.0 * (level + -1.0)) / speed # autogenerated by odsimport
vulcan.metal.cost: 9119.76 + 14186.29 * (level + -1.0) # autogenerated by odsimport
vulcan.energy.cost: 18941.04 + 29463.84 * (level + -1.0) # autogenerated by odsimport
vulcan.zetium.cost: 2806.08 + 4365.01 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
vulcan.scientists.min: (38880.0 + 60480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
vulcan.war_points: (6839.82 + 10639.72 * (level + -1.0)) * level # autogenerated by odsimport
vulcan.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
vulcan.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
vulcan.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
vulcan.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
vulcan.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
vulcan.applies_to: <%= apl_to(vulcan) %>

### vulcan_damage config ###

vulcan_damage.name: DamageSpecialization
vulcan_damage.group_to: vulcan
vulcan_damage.group_position: 0

# Upgrade properties
vulcan_damage.max_level: 10 # autogenerated by odsimport
vulcan_damage.upgrade_time: (38880.0 + 60480.0 * (level + -1.0)) / speed # autogenerated by odsimport
vulcan_damage.metal.cost: 9119.76 + 14186.29 * (level + -1.0) # autogenerated by odsimport
vulcan_damage.energy.cost: 18941.04 + 29463.84 * (level + -1.0) # autogenerated by odsimport
vulcan_damage.zetium.cost: 2806.08 + 4365.01 * (level + -1.0) # autogenerated by odsimport
vulcan_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
vulcan_damage.scientists.min: (38880.0 + 60480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
vulcan_damage.war_points: (6839.82 + 10639.72 * (level + -1.0)) * level # autogenerated by odsimport
vulcan_damage.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
vulcan_damage.requirement.vulcan.level: <%= spec_base_tech_req %>
vulcan_damage.requirement.vulcan_armor.invert: true
vulcan_damage.requirement.vulcan_critical.invert: true
vulcan_damage.requirement.vulcan_absorption.invert: true
vulcan_damage.applies_to: <%= apl_to(vulcan) %>

### vulcan_armor config ###

vulcan_armor.name: ArmorSpecialization
vulcan_armor.group_to: vulcan
vulcan_armor.group_position: 1

# Upgrade properties
vulcan_armor.max_level: 10 # autogenerated by odsimport
vulcan_armor.upgrade_time: (38880.0 + 60480.0 * (level + -1.0)) / speed # autogenerated by odsimport
vulcan_armor.metal.cost: 9119.76 + 14186.29 * (level + -1.0) # autogenerated by odsimport
vulcan_armor.energy.cost: 18941.04 + 29463.84 * (level + -1.0) # autogenerated by odsimport
vulcan_armor.zetium.cost: 2806.08 + 4365.01 * (level + -1.0) # autogenerated by odsimport
vulcan_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
vulcan_armor.scientists.min: (38880.0 + 60480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
vulcan_armor.war_points: (6839.82 + 10639.72 * (level + -1.0)) * level # autogenerated by odsimport
vulcan_armor.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
vulcan_armor.requirement.vulcan.level: <%= spec_base_tech_req %>
vulcan_armor.requirement.vulcan_damage.invert: true
vulcan_armor.requirement.vulcan_critical.invert: true
vulcan_armor.requirement.vulcan_absorption.invert: true
vulcan_armor.applies_to: <%= apl_to(vulcan) %>

### vulcan_critical config ###

vulcan_critical.name: CriticalSpecialization
vulcan_critical.group_to: vulcan
vulcan_critical.group_position: 2

# Upgrade properties
vulcan_critical.max_level: 10 # autogenerated by odsimport
vulcan_critical.upgrade_time: (38880.0 + 60480.0 * (level + -1.0)) / speed # autogenerated by odsimport
vulcan_critical.metal.cost: 9119.76 + 14186.29 * (level + -1.0) # autogenerated by odsimport
vulcan_critical.energy.cost: 18941.04 + 29463.84 * (level + -1.0) # autogenerated by odsimport
vulcan_critical.zetium.cost: 2806.08 + 4365.01 * (level + -1.0) # autogenerated by odsimport
vulcan_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
vulcan_critical.scientists.min: (38880.0 + 60480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
vulcan_critical.war_points: (6839.82 + 10639.72 * (level + -1.0)) * level # autogenerated by odsimport
vulcan_critical.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
vulcan_critical.requirement.vulcan.level: <%= spec_base_tech_req %>
vulcan_critical.requirement.vulcan_damage.invert: true
vulcan_critical.requirement.vulcan_armor.invert: true
vulcan_critical.requirement.vulcan_absorption.invert: true
vulcan_critical.applies_to: <%= apl_to(vulcan) %>

### vulcan_absorption config ###

vulcan_absorption.name: AbsorptionSpecialization
vulcan_absorption.group_to: vulcan
vulcan_absorption.group_position: 3

# Upgrade properties
vulcan_absorption.max_level: 10 # autogenerated by odsimport
vulcan_absorption.upgrade_time: (38880.0 + 60480.0 * (level + -1.0)) / speed # autogenerated by odsimport
vulcan_absorption.metal.cost: 9119.76 + 14186.29 * (level + -1.0) # autogenerated by odsimport
vulcan_absorption.energy.cost: 18941.04 + 29463.84 * (level + -1.0) # autogenerated by odsimport
vulcan_absorption.zetium.cost: 2806.08 + 4365.01 * (level + -1.0) # autogenerated by odsimport
vulcan_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
vulcan_absorption.scientists.min: (38880.0 + 60480.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
vulcan_absorption.war_points: (6839.82 + 10639.72 * (level + -1.0)) * level # autogenerated by odsimport
vulcan_absorption.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
vulcan_absorption.requirement.vulcan.level: <%= spec_base_tech_req %>
vulcan_absorption.requirement.vulcan_damage.invert: true
vulcan_absorption.requirement.vulcan_armor.invert: true
vulcan_absorption.requirement.vulcan_critical.invert: true
vulcan_absorption.applies_to: <%= apl_to(vulcan) %>

### screamer config ###

# Coordinates in technology tree
screamer.coords: [8, 1]

# Upgrade properties
screamer.max_level: 10 # autogenerated by odsimport
screamer.upgrade_time: (73104.0 + 113717.33 * (level + -1.0)) / speed # autogenerated by odsimport
screamer.metal.cost: 19895.2 + 30948.09 * (level + -1.0) # autogenerated by odsimport
screamer.energy.cost: 41320.8 + 64276.8 * (level + -1.0) # autogenerated by odsimport
screamer.zetium.cost: 6121.6 + 9522.49 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
screamer.scientists.min: (73104.0 + 113717.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
screamer.war_points: (14921.4 + 23211.07 * (level + -1.0)) * level # autogenerated by odsimport
screamer.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
screamer.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
screamer.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
screamer.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
screamer.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
screamer.applies_to: <%= apl_to(screamer) %>

### screamer_damage config ###

screamer_damage.name: DamageSpecialization
screamer_damage.group_to: screamer
screamer_damage.group_position: 0

# Upgrade properties
screamer_damage.max_level: 10 # autogenerated by odsimport
screamer_damage.upgrade_time: (73104.0 + 113717.33 * (level + -1.0)) / speed # autogenerated by odsimport
screamer_damage.metal.cost: 19895.2 + 30948.09 * (level + -1.0) # autogenerated by odsimport
screamer_damage.energy.cost: 41320.8 + 64276.8 * (level + -1.0) # autogenerated by odsimport
screamer_damage.zetium.cost: 6121.6 + 9522.49 * (level + -1.0) # autogenerated by odsimport
screamer_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
screamer_damage.scientists.min: (73104.0 + 113717.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
screamer_damage.war_points: (14921.4 + 23211.07 * (level + -1.0)) * level # autogenerated by odsimport
screamer_damage.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
screamer_damage.requirement.screamer.level: <%= spec_base_tech_req %>
screamer_damage.requirement.screamer_armor.invert: true
screamer_damage.requirement.screamer_critical.invert: true
screamer_damage.requirement.screamer_absorption.invert: true
screamer_damage.applies_to: <%= apl_to(screamer) %>

### screamer_armor config ###

screamer_armor.name: ArmorSpecialization
screamer_armor.group_to: screamer
screamer_armor.group_position: 1

# Upgrade properties
screamer_armor.max_level: 10 # autogenerated by odsimport
screamer_armor.upgrade_time: (73104.0 + 113717.33 * (level + -1.0)) / speed # autogenerated by odsimport
screamer_armor.metal.cost: 19895.2 + 30948.09 * (level + -1.0) # autogenerated by odsimport
screamer_armor.energy.cost: 41320.8 + 64276.8 * (level + -1.0) # autogenerated by odsimport
screamer_armor.zetium.cost: 6121.6 + 9522.49 * (level + -1.0) # autogenerated by odsimport
screamer_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
screamer_armor.scientists.min: (73104.0 + 113717.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
screamer_armor.war_points: (14921.4 + 23211.07 * (level + -1.0)) * level # autogenerated by odsimport
screamer_armor.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
screamer_armor.requirement.screamer.level: <%= spec_base_tech_req %>
screamer_armor.requirement.screamer_damage.invert: true
screamer_armor.requirement.screamer_critical.invert: true
screamer_armor.requirement.screamer_absorption.invert: true
screamer_armor.applies_to: <%= apl_to(screamer) %>

### screamer_critical config ###

screamer_critical.name: CriticalSpecialization
screamer_critical.group_to: screamer
screamer_critical.group_position: 2

# Upgrade properties
screamer_critical.max_level: 10 # autogenerated by odsimport
screamer_critical.upgrade_time: (73104.0 + 113717.33 * (level + -1.0)) / speed # autogenerated by odsimport
screamer_critical.metal.cost: 19895.2 + 30948.09 * (level + -1.0) # autogenerated by odsimport
screamer_critical.energy.cost: 41320.8 + 64276.8 * (level + -1.0) # autogenerated by odsimport
screamer_critical.zetium.cost: 6121.6 + 9522.49 * (level + -1.0) # autogenerated by odsimport
screamer_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
screamer_critical.scientists.min: (73104.0 + 113717.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
screamer_critical.war_points: (14921.4 + 23211.07 * (level + -1.0)) * level # autogenerated by odsimport
screamer_critical.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
screamer_critical.requirement.screamer.level: <%= spec_base_tech_req %>
screamer_critical.requirement.screamer_damage.invert: true
screamer_critical.requirement.screamer_armor.invert: true
screamer_critical.requirement.screamer_absorption.invert: true
screamer_critical.applies_to: <%= apl_to(screamer) %>

### screamer_absorption config ###

screamer_absorption.name: AbsorptionSpecialization
screamer_absorption.group_to: screamer
screamer_absorption.group_position: 3

# Upgrade properties
screamer_absorption.max_level: 10 # autogenerated by odsimport
screamer_absorption.upgrade_time: (73104.0 + 113717.33 * (level + -1.0)) / speed # autogenerated by odsimport
screamer_absorption.metal.cost: 19895.2 + 30948.09 * (level + -1.0) # autogenerated by odsimport
screamer_absorption.energy.cost: 41320.8 + 64276.8 * (level + -1.0) # autogenerated by odsimport
screamer_absorption.zetium.cost: 6121.6 + 9522.49 * (level + -1.0) # autogenerated by odsimport
screamer_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
screamer_absorption.scientists.min: (73104.0 + 113717.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
screamer_absorption.war_points: (14921.4 + 23211.07 * (level + -1.0)) * level # autogenerated by odsimport
screamer_absorption.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
screamer_absorption.requirement.screamer.level: <%= spec_base_tech_req %>
screamer_absorption.requirement.screamer_damage.invert: true
screamer_absorption.requirement.screamer_armor.invert: true
screamer_absorption.requirement.screamer_critical.invert: true
screamer_absorption.applies_to: <%= apl_to(screamer) %>

### thunder config ###

# Coordinates in technology tree
thunder.coords: [9, 1]

# Upgrade properties
thunder.max_level: 10 # autogenerated by odsimport
thunder.upgrade_time: (97200.0 + 151200.0 * (level + -1.0)) / speed # autogenerated by odsimport
thunder.metal.cost: 19656.0 + 30576.0 * (level + -1.0) # autogenerated by odsimport
thunder.energy.cost: 40824.0 + 63504.0 * (level + -1.0) # autogenerated by odsimport
thunder.zetium.cost: 6048.0 + 9408.0 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thunder.scientists.min: (97200.0 + 151200.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
thunder.war_points: (14742.0 + 22932.0 * (level + -1.0)) * level # autogenerated by odsimport
thunder.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
thunder.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
thunder.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
thunder.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
thunder.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
thunder.applies_to: <%= apl_to(thunder) %>

### thunder_damage config ###

thunder_damage.name: DamageSpecialization
thunder_damage.group_to: thunder
thunder_damage.group_position: 0

# Upgrade properties
thunder_damage.max_level: 10 # autogenerated by odsimport
thunder_damage.upgrade_time: (97200.0 + 151200.0 * (level + -1.0)) / speed # autogenerated by odsimport
thunder_damage.metal.cost: 19656.0 + 30576.0 * (level + -1.0) # autogenerated by odsimport
thunder_damage.energy.cost: 40824.0 + 63504.0 * (level + -1.0) # autogenerated by odsimport
thunder_damage.zetium.cost: 6048.0 + 9408.0 * (level + -1.0) # autogenerated by odsimport
thunder_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thunder_damage.scientists.min: (97200.0 + 151200.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thunder_damage.war_points: (14742.0 + 22932.0 * (level + -1.0)) * level # autogenerated by odsimport
thunder_damage.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
thunder_damage.requirement.thunder.level: <%= spec_base_tech_req %>
thunder_damage.requirement.thunder_armor.invert: true
thunder_damage.requirement.thunder_critical.invert: true
thunder_damage.requirement.thunder_absorption.invert: true
thunder_damage.applies_to: <%= apl_to(thunder) %>

### thunder_armor config ###

thunder_armor.name: ArmorSpecialization
thunder_armor.group_to: thunder
thunder_armor.group_position: 1

# Upgrade properties
thunder_armor.max_level: 10 # autogenerated by odsimport
thunder_armor.upgrade_time: (97200.0 + 151200.0 * (level + -1.0)) / speed # autogenerated by odsimport
thunder_armor.metal.cost: 19656.0 + 30576.0 * (level + -1.0) # autogenerated by odsimport
thunder_armor.energy.cost: 40824.0 + 63504.0 * (level + -1.0) # autogenerated by odsimport
thunder_armor.zetium.cost: 6048.0 + 9408.0 * (level + -1.0) # autogenerated by odsimport
thunder_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thunder_armor.scientists.min: (97200.0 + 151200.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thunder_armor.war_points: (14742.0 + 22932.0 * (level + -1.0)) * level # autogenerated by odsimport
thunder_armor.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
thunder_armor.requirement.thunder.level: <%= spec_base_tech_req %>
thunder_armor.requirement.thunder_damage.invert: true
thunder_armor.requirement.thunder_critical.invert: true
thunder_armor.requirement.thunder_absorption.invert: true
thunder_armor.applies_to: <%= apl_to(thunder) %>

### thunder_critical config ###

thunder_critical.name: CriticalSpecialization
thunder_critical.group_to: thunder
thunder_critical.group_position: 2

# Upgrade properties
thunder_critical.max_level: 10 # autogenerated by odsimport
thunder_critical.upgrade_time: (97200.0 + 151200.0 * (level + -1.0)) / speed # autogenerated by odsimport
thunder_critical.metal.cost: 19656.0 + 30576.0 * (level + -1.0) # autogenerated by odsimport
thunder_critical.energy.cost: 40824.0 + 63504.0 * (level + -1.0) # autogenerated by odsimport
thunder_critical.zetium.cost: 6048.0 + 9408.0 * (level + -1.0) # autogenerated by odsimport
thunder_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thunder_critical.scientists.min: (97200.0 + 151200.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thunder_critical.war_points: (14742.0 + 22932.0 * (level + -1.0)) * level # autogenerated by odsimport
thunder_critical.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
thunder_critical.requirement.thunder.level: <%= spec_base_tech_req %>
thunder_critical.requirement.thunder_damage.invert: true
thunder_critical.requirement.thunder_armor.invert: true
thunder_critical.requirement.thunder_absorption.invert: true
thunder_critical.applies_to: <%= apl_to(thunder) %>

### thunder_absorption config ###

thunder_absorption.name: AbsorptionSpecialization
thunder_absorption.group_to: thunder
thunder_absorption.group_position: 3

# Upgrade properties
thunder_absorption.max_level: 10 # autogenerated by odsimport
thunder_absorption.upgrade_time: (97200.0 + 151200.0 * (level + -1.0)) / speed # autogenerated by odsimport
thunder_absorption.metal.cost: 19656.0 + 30576.0 * (level + -1.0) # autogenerated by odsimport
thunder_absorption.energy.cost: 40824.0 + 63504.0 * (level + -1.0) # autogenerated by odsimport
thunder_absorption.zetium.cost: 6048.0 + 9408.0 * (level + -1.0) # autogenerated by odsimport
thunder_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thunder_absorption.scientists.min: (97200.0 + 151200.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thunder_absorption.war_points: (14742.0 + 22932.0 * (level + -1.0)) * level # autogenerated by odsimport
thunder_absorption.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
thunder_absorption.requirement.thunder.level: <%= spec_base_tech_req %>
thunder_absorption.requirement.thunder_damage.invert: true
thunder_absorption.requirement.thunder_armor.invert: true
thunder_absorption.requirement.thunder_critical.invert: true
thunder_absorption.applies_to: <%= apl_to(thunder) %>

### metal_storage config ###

# Coordinates in technology tree
metal_storage.coords: [0, 2]

# Upgrade properties
metal_storage.max_level: 10 # autogenerated by odsimport
metal_storage.upgrade_time: ((-1200.0 + 750.0 * (level + 2.0) + (level + 10.0) ** 3.0 + 2.0 ** (level + 6.0)) * 25.0) / speed # autogenerated by odsimport
metal_storage.metal.cost: (4353.09 + 2414.47 * (level + -1.0)) * 20.0 # autogenerated by odsimport
metal_storage.energy.cost: (4353.09 + 2414.47 * (level + -1.0)) * 50.0 # autogenerated by odsimport
metal_storage.zetium.cost: (4353.09 + 2414.47 * (level + -1.0)) * 4.0 # autogenerated by odsimport
# Minimum amount of scientists needed
metal_storage.scientists.min: (-1200.0 + 750.0 * (level + 2.0) + (level + 10.0) ** 3.0 + 2.0 ** (level + 6.0)) * 0.0833 # autogenerated by odsimport
metal_storage.mod.metal.store: 180.0 * level # autogenerated by odsimport

# Technological requirements
metal_storage.war_points: (63192.42 + 35050.09 * (level + -1.0)) * level # autogenerated by odsimport
metal_storage.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
metal_storage.requirement.metal_extractor_t2.level: 1

### powdered_zetium config ###

powdered_zetium.coords: [1, 2]
powdered_zetium.max_level: 10 # autogenerated by odsimport
powdered_zetium.upgrade_time: ((9017.0 + level ** 5.22) * 3.0) / speed # autogenerated by odsimport
powdered_zetium.metal.cost: (1451.03 + level ** 4.84) * 1.2 # autogenerated by odsimport
powdered_zetium.energy.cost: (3212.13 + level ** 5.55) * 1.2 # autogenerated by odsimport
powdered_zetium.zetium.cost: (393.89 + level ** 4.41) * 0.2 # autogenerated by odsimport
powdered_zetium.requirement.zetium_extraction.level: 1
powdered_zetium.war_points: (1035.33 + 8538.96 * (level + -1.0)) * level # autogenerated by odsimport
powdered_zetium.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
powdered_zetium.scientists.min: (9017.0 + level ** 5.22) * 0.01 # autogenerated by odsimport
powdered_zetium.mod.zetium.generate: 10.0 * level # autogenerated by odsimport
powdered_zetium.mod.zetium.store: 20.0 * level # autogenerated by odsimport

### zetium_extraction config ###

zetium_extraction.coords: [2, 2]
zetium_extraction.metal.cost: (level + 0.1 * level ** 1.1) * 787.5 # autogenerated by odsimport
zetium_extraction.energy.cost: (0.5 * level + 0.1 * level ** 1.1) * 4410.0 # autogenerated by odsimport
zetium_extraction.zetium.cost: 0.0 # autogenerated by odsimport
zetium_extraction.max_level: 1 # autogenerated by odsimport
zetium_extraction.upgrade_time: ((200.0 + 250.0 * (level + 2.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 2.0)) * 10.0) / speed # autogenerated by odsimport
zetium_extraction.scientists.min: (200.0 + 250.0 * (level + 2.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 2.0)) * 0.0333 # autogenerated by odsimport
zetium_extraction.war_points: (568.18) * level # autogenerated by odsimport
zetium_extraction.planets.required: level # autogenerated by odsimport

### defensive_portal config ###

# Coordinates in technology tree
defensive_portal.coords: [3, 2]

# Upgrade properties
defensive_portal.max_level: 1 # autogenerated by odsimport
defensive_portal.upgrade_time: (113400.0) / speed # autogenerated by odsimport
defensive_portal.metal.cost: 56700.0 # autogenerated by odsimport
defensive_portal.energy.cost: 81000.0 # autogenerated by odsimport
defensive_portal.zetium.cost: 4860.0 # autogenerated by odsimport
# Minimum amount of scientists needed
defensive_portal.scientists.min: 372.6 # autogenerated by odsimport
defensive_portal.war_points: (30361.5) * level # autogenerated by odsimport
defensive_portal.planets.required: level # autogenerated by odsimport
defensive_portal.requirement.resource_transporter.level: 1

### space_damage config ###

# Coordinates in technology tree
space_damage.coords: [4, 2]

# Upgrade properties
space_damage.max_level: 10 # autogenerated by odsimport
space_damage.mod.damage: 3.9 + 5.01 * (level + -1.0) # autogenerated by odsimport
space_damage.upgrade_time: (90621.6 + 140966.93 * (level + -1.0)) / speed # autogenerated by odsimport
space_damage.metal.cost: 32479.72 + 50524.0 * (level + -1.0) # autogenerated by odsimport
space_damage.energy.cost: 46690.41 + 72629.53 * (level + -1.0) # autogenerated by odsimport
space_damage.zetium.cost: 4418.54 + 6873.28 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
space_damage.scientists.min: (90621.6 + 140966.93 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
space_damage.war_points: (18486.08 + 28756.13 * (level + -1.0)) * level # autogenerated by odsimport
space_damage.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
space_damage.requirement.ground_damage.invert: true
space_damage.requirement.space_armor.invert: true
space_damage.requirement.ground_armor.invert: true
space_damage.applies_to: <%= apl_to space %>

### ground_damage config ###

# Coordinates in technology tree
ground_damage.coords: [5, 2]

# Upgrade properties
ground_damage.max_level: 10 # autogenerated by odsimport
ground_damage.mod.damage: 3.9 + 5.01 * (level + -1.0) # autogenerated by odsimport
ground_damage.upgrade_time: (17722.29 + 27568.0 * (level + -1.0)) / speed # autogenerated by odsimport
ground_damage.metal.cost: 6101.33 + 9490.97 * (level + -1.0) # autogenerated by odsimport
ground_damage.energy.cost: 9714.48 + 15111.41 * (level + -1.0) # autogenerated by odsimport
ground_damage.zetium.cost: 687.9 + 1070.06 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
ground_damage.scientists.min: (17722.29 + 27568.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
ground_damage.war_points: (3482.47 + 5417.18 * (level + -1.0)) * level # autogenerated by odsimport
ground_damage.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
ground_damage.requirement.space_damage.invert: true
ground_damage.requirement.space_armor.invert: true
ground_damage.requirement.ground_armor.invert: true
ground_damage.applies_to: <%= apl_to ground %>

### space_critical config ###

# Coordinates in technology tree
space_critical.coords: [6, 2]

# Upgrade properties
space_critical.max_level: 10 # autogenerated by odsimport
space_critical.mod.critical: 0.75 + 1.86 * (level + -1.0) # autogenerated by odsimport
space_critical.upgrade_time: (90621.6 + 140966.93 * (level + -1.0)) / speed # autogenerated by odsimport
space_critical.metal.cost: 32479.72 + 50524.0 * (level + -1.0) # autogenerated by odsimport
space_critical.energy.cost: 46690.41 + 72629.53 * (level + -1.0) # autogenerated by odsimport
space_critical.zetium.cost: 4418.54 + 6873.28 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
space_critical.scientists.min: (90621.6 + 140966.93 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
space_critical.war_points: (18486.08 + 28756.13 * (level + -1.0)) * level # autogenerated by odsimport
space_critical.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
space_critical.requirement.ground_critical.invert: true
space_critical.requirement.space_absorption.invert: true
space_critical.requirement.ground_absorption.invert: true
space_critical.applies_to: <%= apl_to space %>

### ground_critical config ###

# Coordinates in technology tree
ground_critical.coords: [7, 2]

# Upgrade properties
ground_critical.max_level: 10 # autogenerated by odsimport
ground_critical.mod.critical: 0.75 + 1.86 * (level + -1.0) # autogenerated by odsimport
ground_critical.upgrade_time: (17722.29 + 27568.0 * (level + -1.0)) / speed # autogenerated by odsimport
ground_critical.metal.cost: 6101.33 + 9490.97 * (level + -1.0) # autogenerated by odsimport
ground_critical.energy.cost: 9714.48 + 15111.41 * (level + -1.0) # autogenerated by odsimport
ground_critical.zetium.cost: 687.9 + 1070.06 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
ground_critical.scientists.min: (17722.29 + 27568.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
ground_critical.war_points: (3482.47 + 5417.18 * (level + -1.0)) * level # autogenerated by odsimport
ground_critical.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
ground_critical.requirement.space_critical.invert: true
ground_critical.requirement.space_absorption.invert: true
ground_critical.requirement.ground_absorption.invert: true
ground_critical.applies_to: <%= apl_to ground %>

### turret_damage config ###

# Coordinates in technology tree
turret_damage.coords: [8, 2]

# Upgrade properties
turret_damage.max_level: 10 # autogenerated by odsimport
turret_damage.upgrade_time: (69728.0 + 108465.78 * (level + -1.0)) / speed # autogenerated by odsimport
turret_damage.metal.cost: 16223.65 + 25236.79 * (level + -1.0) # autogenerated by odsimport
turret_damage.energy.cost: 33695.28 + 52414.88 * (level + -1.0) # autogenerated by odsimport
turret_damage.zetium.cost: 4991.89 + 7765.17 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
turret_damage.scientists.min: (69728.0 + 108465.78 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
turret_damage.mod.damage: 3.9 + 5.01 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
turret_damage.war_points: (12167.74 + 18927.6 * (level + -1.0)) * level # autogenerated by odsimport
turret_damage.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
turret_damage.requirement.turret_armor.invert: true
turret_damage.requirement.turret_critical.invert: true
turret_damage.requirement.turret_absorption.invert: true
turret_damage.applies_to: <%= apl_to turrets %>

### turret_armor config ###

# Coordinates in technology tree
turret_armor.coords: [9, 2]

# Upgrade properties
turret_armor.max_level: 10 # autogenerated by odsimport
turret_armor.upgrade_time: (69728.0 + 108465.78 * (level + -1.0)) / speed # autogenerated by odsimport
turret_armor.metal.cost: 16223.65 + 25236.79 * (level + -1.0) # autogenerated by odsimport
turret_armor.energy.cost: 33695.28 + 52414.88 * (level + -1.0) # autogenerated by odsimport
turret_armor.zetium.cost: 4991.89 + 7765.17 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
turret_armor.scientists.min: (69728.0 + 108465.78 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
turret_armor.mod.armor: 2.29 + 3.4 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
turret_armor.war_points: (12167.74 + 18927.6 * (level + -1.0)) * level # autogenerated by odsimport
turret_armor.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
turret_armor.requirement.turret_damage.invert: true
turret_armor.requirement.turret_critical.invert: true
turret_armor.requirement.turret_absorption.invert: true
turret_armor.applies_to: <%= apl_to turrets %>

### zetium_storage config ###

# Coordinates in technology tree
zetium_storage.coords: [0, 3]

# Upgrade properties
zetium_storage.max_level: 10 # autogenerated by odsimport
zetium_storage.upgrade_time: ((1000.0 + 750.0 * (level + 2.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 6.0)) * 20.0) / speed # autogenerated by odsimport
zetium_storage.metal.cost: (1181.66 + 961.62 * (level + -1.0)) * 50.0 # autogenerated by odsimport
zetium_storage.energy.cost: (1181.66 + 961.62 * (level + -1.0)) * 200.0 # autogenerated by odsimport
zetium_storage.zetium.cost: (1181.66 + 961.62 * (level + -1.0)) * 22.0 # autogenerated by odsimport
# Minimum amount of scientists needed
zetium_storage.scientists.min: (1000.0 + 750.0 * (level + 2.0) + (level + 3.0) ** 4.0 + 2.0 ** (level + 6.0)) * 0.0667 # autogenerated by odsimport
zetium_storage.mod.zetium.store: 180.0 * level # autogenerated by odsimport

# Technological requirements
zetium_storage.war_points: (61702.29 + 50212.56 * (level + -1.0)) * level # autogenerated by odsimport
zetium_storage.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
zetium_storage.requirement.zetium_extractor_t2.level: 1

### zetium_extractor_t2 config ###

# Coordinates in technology tree
zetium_extractor_t2.coords: [1, 3]

# Upgrade properties
zetium_extractor_t2.max_level: 1 # autogenerated by odsimport
zetium_extractor_t2.upgrade_time: ((14000.0 * level + level ** 4.0 + 7.0 ** (level + 2.0)) * 10.0) / speed # autogenerated by odsimport
zetium_extractor_t2.metal.cost: (3.0 * level + 0.5 * level ** 4.4 + 5.0 ** level) * 360.0 # autogenerated by odsimport
zetium_extractor_t2.energy.cost: (-100.0 + 1400.0 * level + (level + 1.0) ** 4.0 + 4.5 ** (level + 2.0)) * 30.0 # autogenerated by odsimport
zetium_extractor_t2.zetium.cost: (25.0 * level + level ** 3.3 + 3.0 ** level) * 40.0 # autogenerated by odsimport
# Minimum amount of scientists needed
zetium_extractor_t2.scientists.min: (14000.0 * level + level ** 4.0 + 7.0 ** (level + 2.0)) * 0.0333 # autogenerated by odsimport

# Technological requirements
zetium_extractor_t2.requirement.powdered_zetium.level: 4
zetium_extractor_t2.war_points: (6321.66) * level # autogenerated by odsimport
zetium_extractor_t2.planets.required: 2.0 # autogenerated by odsimport

# [2, 3] is empty
# [3, 3] is empty

### space_armor config ###

# Coordinates in technology tree
space_armor.coords: [4, 3]

# Upgrade properties
space_armor.max_level: 10 # autogenerated by odsimport
space_armor.mod.armor: 2.29 + 3.4 * (level + -1.0) # autogenerated by odsimport
space_armor.upgrade_time: (90621.6 + 140966.93 * (level + -1.0)) / speed # autogenerated by odsimport
space_armor.metal.cost: 32479.72 + 50524.0 * (level + -1.0) # autogenerated by odsimport
space_armor.energy.cost: 46690.41 + 72629.53 * (level + -1.0) # autogenerated by odsimport
space_armor.zetium.cost: 4418.54 + 6873.28 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
space_armor.scientists.min: (90621.6 + 140966.93 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
space_armor.war_points: (18486.08 + 28756.13 * (level + -1.0)) * level # autogenerated by odsimport
space_armor.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
space_armor.requirement.ground_damage.invert: true
space_armor.requirement.space_damage.invert: true
space_armor.requirement.ground_armor.invert: true
space_armor.applies_to: <%= apl_to space %>

### ground_armor config ###

# Coordinates in technology tree
ground_armor.coords: [5, 3]

# Upgrade properties
ground_armor.max_level: 10 # autogenerated by odsimport
ground_armor.mod.armor: 2.29 + 3.4 * (level + -1.0) # autogenerated by odsimport
ground_armor.upgrade_time: (17722.29 + 27568.0 * (level + -1.0)) / speed # autogenerated by odsimport
ground_armor.metal.cost: 6101.33 + 9490.97 * (level + -1.0) # autogenerated by odsimport
ground_armor.energy.cost: 9714.48 + 15111.41 * (level + -1.0) # autogenerated by odsimport
ground_armor.zetium.cost: 687.9 + 1070.06 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
ground_armor.scientists.min: (17722.29 + 27568.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
ground_armor.war_points: (3482.47 + 5417.18 * (level + -1.0)) * level # autogenerated by odsimport
ground_armor.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
ground_armor.requirement.space_damage.invert: true
ground_armor.requirement.space_armor.invert: true
ground_armor.requirement.ground_damage.invert: true
ground_armor.applies_to: <%= apl_to ground %>

### space_absorption config ###

# Coordinates in technology tree
space_absorption.coords: [6, 3]

# Upgrade properties
space_absorption.max_level: 10 # autogenerated by odsimport
space_absorption.mod.absorption: 3.46 + 4.57 * (level + -1.0) # autogenerated by odsimport
space_absorption.upgrade_time: (90621.6 + 140966.93 * (level + -1.0)) / speed # autogenerated by odsimport
space_absorption.metal.cost: 32479.72 + 50524.0 * (level + -1.0) # autogenerated by odsimport
space_absorption.energy.cost: 46690.41 + 72629.53 * (level + -1.0) # autogenerated by odsimport
space_absorption.zetium.cost: 4418.54 + 6873.28 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
space_absorption.scientists.min: (90621.6 + 140966.93 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
space_absorption.war_points: (18486.08 + 28756.13 * (level + -1.0)) * level # autogenerated by odsimport
space_absorption.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
space_absorption.requirement.ground_absorption.invert: true
space_absorption.requirement.space_critical.invert: true
space_absorption.requirement.ground_critical.invert: true
space_absorption.applies_to: <%= apl_to space %>

### ground_absorption config ###

# Coordinates in technology tree
ground_absorption.coords: [7, 3]

# Upgrade properties
ground_absorption.max_level: 10 # autogenerated by odsimport
ground_absorption.mod.absorption: 3.46 + 4.57 * (level + -1.0) # autogenerated by odsimport
ground_absorption.upgrade_time: (17722.29 + 27568.0 * (level + -1.0)) / speed # autogenerated by odsimport
ground_absorption.metal.cost: 6101.33 + 9490.97 * (level + -1.0) # autogenerated by odsimport
ground_absorption.energy.cost: 9714.48 + 15111.41 * (level + -1.0) # autogenerated by odsimport
ground_absorption.zetium.cost: 687.9 + 1070.06 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
ground_absorption.scientists.min: (17722.29 + 27568.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
ground_absorption.war_points: (3482.47 + 5417.18 * (level + -1.0)) * level # autogenerated by odsimport
ground_absorption.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
ground_absorption.requirement.space_absorption.invert: true
ground_absorption.requirement.space_critical.invert: true
ground_absorption.requirement.ground_critical.invert: true
ground_absorption.applies_to: <%= apl_to ground %>

### turret_critical config ###

# Coordinates in technology tree
turret_critical.coords: [8, 3]

# Upgrade properties
turret_critical.max_level: 10 # autogenerated by odsimport
turret_critical.upgrade_time: (69728.0 + 108465.78 * (level + -1.0)) / speed # autogenerated by odsimport
turret_critical.metal.cost: 16223.65 + 25236.79 * (level + -1.0) # autogenerated by odsimport
turret_critical.energy.cost: 33695.28 + 52414.88 * (level + -1.0) # autogenerated by odsimport
turret_critical.zetium.cost: 4991.89 + 7765.17 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
turret_critical.scientists.min: (69728.0 + 108465.78 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
turret_critical.mod.critical: 0.75 + 1.86 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
turret_critical.war_points: (12167.74 + 18927.6 * (level + -1.0)) * level # autogenerated by odsimport
turret_critical.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
turret_critical.requirement.turret_damage.invert: true
turret_critical.requirement.turret_armor.invert: true
turret_critical.requirement.turret_absorption.invert: true
turret_critical.applies_to: <%= apl_to turrets %>

### turret_absorption config ###

# Coordinates in technology tree
turret_absorption.coords: [9, 3]

# Upgrade properties
turret_absorption.max_level: 10 # autogenerated by odsimport
turret_absorption.upgrade_time: (69728.0 + 108465.78 * (level + -1.0)) / speed # autogenerated by odsimport
turret_absorption.metal.cost: 16223.65 + 25236.79 * (level + -1.0) # autogenerated by odsimport
turret_absorption.energy.cost: 33695.28 + 52414.88 * (level + -1.0) # autogenerated by odsimport
turret_absorption.zetium.cost: 4991.89 + 7765.17 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
turret_absorption.scientists.min: (69728.0 + 108465.78 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
turret_absorption.mod.absorption: 3.46 + 4.57 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
turret_absorption.war_points: (12167.74 + 18927.6 * (level + -1.0)) * level # autogenerated by odsimport
turret_absorption.planets.required: 1.0 + 0.33 * (level + -1.0) # autogenerated by odsimport
turret_absorption.requirement.turret_damage.invert: true
turret_absorption.requirement.turret_armor.invert: true
turret_absorption.requirement.turret_critical.invert: true
turret_absorption.applies_to: <%= apl_to turrets %>

# [0, 4] is empty

### jumper config ###

# Coordinates in technology tree
jumper.coords: [1, 4]

# Upgrade properties
jumper.max_level: 1 # autogenerated by odsimport
jumper.upgrade_time: (6759.0) / speed # autogenerated by odsimport
jumper.metal.cost: 2591.4 # autogenerated by odsimport
jumper.energy.cost: 3627.96 # autogenerated by odsimport
jumper.zetium.cost: 453.5 # autogenerated by odsimport
# Minimum amount of scientists needed
jumper.scientists.min: 22.3047 # autogenerated by odsimport

# Technological requirements
jumper.war_points: (1530.01) * level # autogenerated by odsimport
jumper.planets.required: 1.0 # autogenerated by odsimport
jumper.requirement.space_factory.level: 1

### space_factory config ###

# Coordinates in technology tree
space_factory.coords: [2, 4]

# Upgrade properties
space_factory.max_level: 1 # autogenerated by odsimport
space_factory.upgrade_time: ((23657.0 + 59142.5 * (level + -1.0)) * 0.4) / speed # autogenerated by odsimport
space_factory.metal.cost: (16196.25 + 19435.5 * (level + -1.0)) * 0.4 # autogenerated by odsimport
space_factory.energy.cost: (22674.75 + 27209.7 * (level + -1.0)) * 0.4 # autogenerated by odsimport
space_factory.zetium.cost: (1133.74 + 1360.49 * (level + -1.0)) * 0.4 # autogenerated by odsimport
# Minimum amount of scientists needed
space_factory.scientists.min: (23657.0 + 59142.5 * (level + -1.0)) * 0.0013 # autogenerated by odsimport

# Technological requirements
space_factory.requirement.zetium_extraction.level: 1
space_factory.war_points: (3382.86) * level # autogenerated by odsimport
space_factory.planets.required: level # autogenerated by odsimport

# [3, 4] is empty
# [4, 4] is empty

### scorpion config ###

# Coordinates in technology tree
scorpion.coords: [5, 4]
scorpion.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
scorpion.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
scorpion.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
scorpion.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
scorpion.applies_to: <%= apl_to scorpion %>

# Upgrade properties
scorpion.max_level: 9 # autogenerated by odsimport
scorpion.upgrade_time: (40800.0 + 71400.0 * (level + -1.0)) / speed # autogenerated by odsimport
scorpion.metal.cost: 9394.2 + 16439.85 * (level + -1.0) # autogenerated by odsimport
scorpion.energy.cost: 14561.01 + 25481.77 * (level + -1.0) # autogenerated by odsimport
scorpion.zetium.cost: 939.42 + 1643.99 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
scorpion.scientists.min: (40800.0 + 71400.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
scorpion.war_points: (5241.18 + 9172.07 * (level + -1.0)) * level # autogenerated by odsimport
scorpion.planets.required: 1.0 + 0.5 * (level + -1.0) # autogenerated by odsimport
scorpion.requirement.ground_factory.level: 1

### scorpion_damage config ###

scorpion_damage.name: DamageSpecialization
scorpion_damage.group_to: scorpion
scorpion_damage.group_position: 0

# Upgrade properties
scorpion_damage.max_level: 10 # autogenerated by odsimport
scorpion_damage.upgrade_time: (40800.0 + 63466.67 * (level + -1.0)) / speed # autogenerated by odsimport
scorpion_damage.metal.cost: 9394.2 + 14613.2 * (level + -1.0) # autogenerated by odsimport
scorpion_damage.energy.cost: 14561.01 + 22650.46 * (level + -1.0) # autogenerated by odsimport
scorpion_damage.zetium.cost: 939.42 + 1461.32 * (level + -1.0) # autogenerated by odsimport
scorpion_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
scorpion_damage.scientists.min: (40800.0 + 63466.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
scorpion_damage.war_points: (5241.18 + 8152.95 * (level + -1.0)) * level # autogenerated by odsimport
scorpion_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
scorpion_damage.requirement.scorpion.level: <%= spec_base_tech_req %>
scorpion_damage.requirement.scorpion_armor.invert: true
scorpion_damage.requirement.scorpion_critical.invert: true
scorpion_damage.requirement.scorpion_absorption.invert: true
scorpion_damage.applies_to: <%= apl_to(scorpion) %>

### scorpion_armor config ###

scorpion_armor.name: ArmorSpecialization
scorpion_armor.group_to: scorpion
scorpion_armor.group_position: 1

# Upgrade properties
scorpion_armor.max_level: 10 # autogenerated by odsimport
scorpion_armor.upgrade_time: (40800.0 + 63466.67 * (level + -1.0)) / speed # autogenerated by odsimport
scorpion_armor.metal.cost: 9394.2 + 14613.2 * (level + -1.0) # autogenerated by odsimport
scorpion_armor.energy.cost: 14561.01 + 22650.46 * (level + -1.0) # autogenerated by odsimport
scorpion_armor.zetium.cost: 939.42 + 1461.32 * (level + -1.0) # autogenerated by odsimport
scorpion_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
scorpion_armor.scientists.min: (40800.0 + 63466.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
scorpion_armor.war_points: (5241.18 + 8152.95 * (level + -1.0)) * level # autogenerated by odsimport
scorpion_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
scorpion_armor.requirement.scorpion.level: <%= spec_base_tech_req %>
scorpion_armor.requirement.scorpion_damage.invert: true
scorpion_armor.requirement.scorpion_critical.invert: true
scorpion_armor.requirement.scorpion_absorption.invert: true
scorpion_armor.applies_to: <%= apl_to(scorpion) %>

### scorpion_critical config ###

scorpion_critical.name: CriticalSpecialization
scorpion_critical.group_to: scorpion
scorpion_critical.group_position: 2

# Upgrade properties
scorpion_critical.max_level: 10 # autogenerated by odsimport
scorpion_critical.upgrade_time: (40800.0 + 63466.67 * (level + -1.0)) / speed # autogenerated by odsimport
scorpion_critical.metal.cost: 9394.2 + 14613.2 * (level + -1.0) # autogenerated by odsimport
scorpion_critical.energy.cost: 14561.01 + 22650.46 * (level + -1.0) # autogenerated by odsimport
scorpion_critical.zetium.cost: 939.42 + 1461.32 * (level + -1.0) # autogenerated by odsimport
scorpion_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
scorpion_critical.scientists.min: (40800.0 + 63466.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
scorpion_critical.war_points: (5241.18 + 8152.95 * (level + -1.0)) * level # autogenerated by odsimport
scorpion_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
scorpion_critical.requirement.scorpion.level: <%= spec_base_tech_req %>
scorpion_critical.requirement.scorpion_damage.invert: true
scorpion_critical.requirement.scorpion_armor.invert: true
scorpion_critical.requirement.scorpion_absorption.invert: true
scorpion_critical.applies_to: <%= apl_to(scorpion) %>

### scorpion_absorption config ###

scorpion_absorption.name: AbsorptionSpecialization
scorpion_absorption.group_to: scorpion
scorpion_absorption.group_position: 3

# Upgrade properties
scorpion_absorption.max_level: 10 # autogenerated by odsimport
scorpion_absorption.upgrade_time: (40800.0 + 63466.67 * (level + -1.0)) / speed # autogenerated by odsimport
scorpion_absorption.metal.cost: 9394.2 + 14613.2 * (level + -1.0) # autogenerated by odsimport
scorpion_absorption.energy.cost: 14561.01 + 22650.46 * (level + -1.0) # autogenerated by odsimport
scorpion_absorption.zetium.cost: 939.42 + 1461.32 * (level + -1.0) # autogenerated by odsimport
scorpion_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
scorpion_absorption.scientists.min: (40800.0 + 63466.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
scorpion_absorption.war_points: (5241.18 + 8152.95 * (level + -1.0)) * level # autogenerated by odsimport
scorpion_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
scorpion_absorption.requirement.scorpion.level: <%= spec_base_tech_req %>
scorpion_absorption.requirement.scorpion_damage.invert: true
scorpion_absorption.requirement.scorpion_armor.invert: true
scorpion_absorption.requirement.scorpion_critical.invert: true
scorpion_absorption.applies_to: <%= apl_to(scorpion) %>

### ground_factory config ###

# Coordinates in technology tree
ground_factory.coords: [6, 4]

# Upgrade properties
ground_factory.max_level: 1 # autogenerated by odsimport
ground_factory.upgrade_time: ((35700.0 + 89250.0 * (level + -1.0)) * 0.8) / speed # autogenerated by odsimport
ground_factory.metal.cost: (23485.5 + 28182.6 * (level + -1.0)) * 0.8 # autogenerated by odsimport
ground_factory.energy.cost: (36402.53 + 43683.03 * (level + -1.0)) * 0.8 # autogenerated by odsimport
ground_factory.zetium.cost: (2348.55 + 2818.26 * (level + -1.0)) * 0.8 # autogenerated by odsimport
# Minimum amount of scientists needed
ground_factory.scientists.min: (35700.0 + 89250.0 * (level + -1.0)) * 0.0027 # autogenerated by odsimport
ground_factory.war_points: (10482.36) * level # autogenerated by odsimport
ground_factory.planets.required: level # autogenerated by odsimport

### mdh config ###

# Coordinates in technology tree
mdh.coords: [7, 4]

# Upgrade properties
mdh.max_level: 1 # autogenerated by odsimport
mdh.upgrade_time: (66000.0) / speed # autogenerated by odsimport
mdh.metal.cost: 19600.0 # autogenerated by odsimport
mdh.energy.cost: 28000.0 # autogenerated by odsimport
mdh.zetium.cost: 1680.0 # autogenerated by odsimport
# Minimum amount of scientists needed
mdh.scientists.min: 217.8 # autogenerated by odsimport

# Technological requirements
mdh.requirement.ground_factory.level: 1
mdh.war_points: (10495.33) * level # autogenerated by odsimport
mdh.planets.required: 1.0 # autogenerated by odsimport

# [8, 4] is empty
# [9, 4] is empty

### light_flight config ###

# Coordinates in technology tree
light_flight.coords: [0, 5]

# Upgrade properties
light_flight.max_level: 10 # autogenerated by odsimport
light_flight.upgrade_time: (87518.0 + 136139.11 * (level + -1.0)) / speed # autogenerated by odsimport
light_flight.metal.cost: 31266.43 + 48636.67 * (level + -1.0) # autogenerated by odsimport
light_flight.energy.cost: 44908.67 + 69857.94 * (level + -1.0) # autogenerated by odsimport
light_flight.zetium.cost: 4042.11 + 6287.73 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
light_flight.scientists.min: (87518.0 + 136139.11 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
light_flight.applies_to: <%= apl_to light_space %>

# How much % does it decrease flight time?
light_flight.mod.speed: 9.5 + 10.61 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
light_flight.war_points: (17654.07 + 27461.89 * (level + -1.0)) * level # autogenerated by odsimport
light_flight.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
light_flight.requirement.space_factory.level: 1
light_flight.requirement.heavy_flight.invert: true

### heavy_flight config ###

# Coordinates in technology tree
heavy_flight.coords: [1, 5]

# Upgrade properties
heavy_flight.max_level: 10 # autogenerated by odsimport
heavy_flight.upgrade_time: (87518.0 + 136139.11 * (level + -1.0)) / speed # autogenerated by odsimport
heavy_flight.metal.cost: 31266.43 + 48636.67 * (level + -1.0) # autogenerated by odsimport
heavy_flight.energy.cost: 44908.67 + 69857.94 * (level + -1.0) # autogenerated by odsimport
heavy_flight.zetium.cost: 4042.11 + 6287.73 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
heavy_flight.scientists.min: (87518.0 + 136139.11 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
heavy_flight.applies_to: <%= apl_to heavy_space %>

# How much % does it decrease flight time?
heavy_flight.mod.speed: 9.5 + 10.61 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
heavy_flight.war_points: (17654.07 + 27461.89 * (level + -1.0)) * level # autogenerated by odsimport
heavy_flight.planets.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
heavy_flight.requirement.space_factory.level: 1
heavy_flight.requirement.light_flight.invert: true

# [2, 5] is empty

### crow config ###

# Coordinates in technology tree
crow.coords: [3, 5]
crow.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
crow.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
crow.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
crow.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
crow.mod.speed: 5.67 + 6.79 * (level + -1.0) # autogenerated by odsimport
crow.applies_to: <%= apl_to crow %>

# Upgrade properties
crow.max_level: 9 # autogenerated by odsimport
crow.upgrade_time: (27036.0 + 47313.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow.metal.cost: 12957.0 + 22674.75 * (level + -1.0) # autogenerated by odsimport
crow.energy.cost: 18139.8 + 31744.65 * (level + -1.0) # autogenerated by odsimport
crow.zetium.cost: 906.99 + 1587.23 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow.scientists.min: (27036.0 + 47313.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow.war_points: (6765.71 + 11840.0 * (level + -1.0)) * level # autogenerated by odsimport
crow.planets.required: 1.0 + 0.5 * (level + -1.0) # autogenerated by odsimport
crow.requirement.space_factory.level: 1

### crow_damage config ###

crow_damage.name: DamageSpecialization
crow_damage.group_to: crow
crow_damage.group_position: 0

# Upgrade properties
crow_damage.max_level: 10 # autogenerated by odsimport
crow_damage.upgrade_time: (27036.0 + 42056.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow_damage.metal.cost: 12957.0 + 20155.33 * (level + -1.0) # autogenerated by odsimport
crow_damage.energy.cost: 18139.8 + 28217.47 * (level + -1.0) # autogenerated by odsimport
crow_damage.zetium.cost: 906.99 + 1410.87 * (level + -1.0) # autogenerated by odsimport
crow_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow_damage.scientists.min: (27036.0 + 42056.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow_damage.war_points: (6765.71 + 10524.44 * (level + -1.0)) * level # autogenerated by odsimport
crow_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
crow_damage.requirement.crow.level: <%= spec_base_tech_req %>
crow_damage.requirement.crow_armor.invert: true
crow_damage.requirement.crow_critical.invert: true
crow_damage.requirement.crow_absorption.invert: true
crow_damage.requirement.crow_speed.invert: true
crow_damage.applies_to: <%= apl_to(crow) %>

### crow_armor config ###

crow_armor.name: ArmorSpecialization
crow_armor.group_to: crow
crow_armor.group_position: 1

# Upgrade properties
crow_armor.max_level: 10 # autogenerated by odsimport
crow_armor.upgrade_time: (27036.0 + 42056.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow_armor.metal.cost: 12957.0 + 20155.33 * (level + -1.0) # autogenerated by odsimport
crow_armor.energy.cost: 18139.8 + 28217.47 * (level + -1.0) # autogenerated by odsimport
crow_armor.zetium.cost: 906.99 + 1410.87 * (level + -1.0) # autogenerated by odsimport
crow_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow_armor.scientists.min: (27036.0 + 42056.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow_armor.war_points: (6765.71 + 10524.44 * (level + -1.0)) * level # autogenerated by odsimport
crow_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
crow_armor.requirement.crow.level: <%= spec_base_tech_req %>
crow_armor.requirement.crow_damage.invert: true
crow_armor.requirement.crow_critical.invert: true
crow_armor.requirement.crow_absorption.invert: true
crow_armor.requirement.crow_speed.invert: true
crow_armor.applies_to: <%= apl_to(crow) %>

### crow_critical config ###

crow_critical.name: CriticalSpecialization
crow_critical.group_to: crow
crow_critical.group_position: 2

# Upgrade properties
crow_critical.max_level: 10 # autogenerated by odsimport
crow_critical.upgrade_time: (27036.0 + 42056.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow_critical.metal.cost: 12957.0 + 20155.33 * (level + -1.0) # autogenerated by odsimport
crow_critical.energy.cost: 18139.8 + 28217.47 * (level + -1.0) # autogenerated by odsimport
crow_critical.zetium.cost: 906.99 + 1410.87 * (level + -1.0) # autogenerated by odsimport
crow_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow_critical.scientists.min: (27036.0 + 42056.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow_critical.war_points: (6765.71 + 10524.44 * (level + -1.0)) * level # autogenerated by odsimport
crow_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
crow_critical.requirement.crow.level: <%= spec_base_tech_req %>
crow_critical.requirement.crow_damage.invert: true
crow_critical.requirement.crow_armor.invert: true
crow_critical.requirement.crow_absorption.invert: true
crow_critical.requirement.crow_speed.invert: true
crow_critical.applies_to: <%= apl_to(crow) %>

### crow_absorption config ###

crow_absorption.name: AbsorptionSpecialization
crow_absorption.group_to: crow
crow_absorption.group_position: 3

# Upgrade properties
crow_absorption.max_level: 10 # autogenerated by odsimport
crow_absorption.upgrade_time: (27036.0 + 42056.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow_absorption.metal.cost: 12957.0 + 20155.33 * (level + -1.0) # autogenerated by odsimport
crow_absorption.energy.cost: 18139.8 + 28217.47 * (level + -1.0) # autogenerated by odsimport
crow_absorption.zetium.cost: 906.99 + 1410.87 * (level + -1.0) # autogenerated by odsimport
crow_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow_absorption.scientists.min: (27036.0 + 42056.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow_absorption.war_points: (6765.71 + 10524.44 * (level + -1.0)) * level # autogenerated by odsimport
crow_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
crow_absorption.requirement.crow.level: <%= spec_base_tech_req %>
crow_absorption.requirement.crow_damage.invert: true
crow_absorption.requirement.crow_armor.invert: true
crow_absorption.requirement.crow_critical.invert: true
crow_absorption.requirement.crow_speed.invert: true
crow_absorption.applies_to: <%= apl_to(crow) %>

### crow_speed config ###

crow_speed.name: SpeedSpecialization
crow_speed.group_to: crow
crow_speed.group_position: 4

# Upgrade properties
crow_speed.max_level: 10 # autogenerated by odsimport
crow_speed.upgrade_time: (27036.0 + 42056.0 * (level + -1.0)) / speed # autogenerated by odsimport
crow_speed.metal.cost: 12957.0 + 20155.33 * (level + -1.0) # autogenerated by odsimport
crow_speed.energy.cost: 18139.8 + 28217.47 * (level + -1.0) # autogenerated by odsimport
crow_speed.zetium.cost: 906.99 + 1410.87 * (level + -1.0) # autogenerated by odsimport
crow_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
crow_speed.scientists.min: (27036.0 + 42056.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
crow_speed.war_points: (6765.71 + 10524.44 * (level + -1.0)) * level # autogenerated by odsimport
crow_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
crow_speed.requirement.crow.level: <%= spec_base_tech_req %>
crow_speed.requirement.crow_damage.invert: true
crow_speed.requirement.crow_armor.invert: true
crow_speed.requirement.crow_critical.invert: true
crow_speed.requirement.crow_absorption.invert: true
crow_speed.applies_to: <%= apl_to(crow) %>

### cyrix config ###

# Coordinates in technology tree
cyrix.coords: [4, 5]
cyrix.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
cyrix.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
cyrix.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
cyrix.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
cyrix.mod.speed: 6.67 * (level + -1.0) # autogenerated by odsimport
cyrix.applies_to: <%= apl_to cyrix %>

# Upgrade properties
cyrix.max_level: 10 # autogenerated by odsimport
cyrix.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix.requirement.space_factory.level: 1

### cyrix_damage config ###

cyrix_damage.name: DamageSpecialization
cyrix_damage.group_to: cyrix
cyrix_damage.group_position: 0

# Upgrade properties
cyrix_damage.max_level: 10 # autogenerated by odsimport
cyrix_damage.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix_damage.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix_damage.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix_damage.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
cyrix_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix_damage.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix_damage.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix_damage.requirement.cyrix.level: <%= spec_base_tech_req %>
cyrix_damage.requirement.cyrix_armor.invert: true
cyrix_damage.requirement.cyrix_critical.invert: true
cyrix_damage.requirement.cyrix_absorption.invert: true
cyrix_damage.requirement.cyrix_speed.invert: true
cyrix_damage.applies_to: <%= apl_to(cyrix) %>

### cyrix_armor config ###

cyrix_armor.name: ArmorSpecialization
cyrix_armor.group_to: cyrix
cyrix_armor.group_position: 1

# Upgrade properties
cyrix_armor.max_level: 10 # autogenerated by odsimport
cyrix_armor.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix_armor.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix_armor.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix_armor.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
cyrix_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix_armor.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix_armor.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix_armor.requirement.cyrix.level: <%= spec_base_tech_req %>
cyrix_armor.requirement.cyrix_damage.invert: true
cyrix_armor.requirement.cyrix_critical.invert: true
cyrix_armor.requirement.cyrix_absorption.invert: true
cyrix_armor.requirement.cyrix_speed.invert: true
cyrix_armor.applies_to: <%= apl_to(cyrix) %>

### cyrix_critical config ###

cyrix_critical.name: CriticalSpecialization
cyrix_critical.group_to: cyrix
cyrix_critical.group_position: 2

# Upgrade properties
cyrix_critical.max_level: 10 # autogenerated by odsimport
cyrix_critical.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix_critical.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix_critical.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix_critical.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
cyrix_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix_critical.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix_critical.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix_critical.requirement.cyrix.level: <%= spec_base_tech_req %>
cyrix_critical.requirement.cyrix_damage.invert: true
cyrix_critical.requirement.cyrix_armor.invert: true
cyrix_critical.requirement.cyrix_absorption.invert: true
cyrix_critical.requirement.cyrix_speed.invert: true
cyrix_critical.applies_to: <%= apl_to(cyrix) %>

### cyrix_absorption config ###

cyrix_absorption.name: AbsorptionSpecialization
cyrix_absorption.group_to: cyrix
cyrix_absorption.group_position: 3

# Upgrade properties
cyrix_absorption.max_level: 10 # autogenerated by odsimport
cyrix_absorption.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix_absorption.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix_absorption.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix_absorption.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
cyrix_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix_absorption.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix_absorption.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix_absorption.requirement.cyrix.level: <%= spec_base_tech_req %>
cyrix_absorption.requirement.cyrix_damage.invert: true
cyrix_absorption.requirement.cyrix_armor.invert: true
cyrix_absorption.requirement.cyrix_critical.invert: true
cyrix_absorption.requirement.cyrix_speed.invert: true
cyrix_absorption.applies_to: <%= apl_to(cyrix) %>

### cyrix_speed config ###

cyrix_speed.name: SpeedSpecialization
cyrix_speed.group_to: cyrix
cyrix_speed.group_position: 4

# Upgrade properties
cyrix_speed.max_level: 10 # autogenerated by odsimport
cyrix_speed.upgrade_time: (45240.0 + 70373.33 * (level + -1.0)) / speed # autogenerated by odsimport
cyrix_speed.metal.cost: 19515.81 + 30357.92 * (level + -1.0) # autogenerated by odsimport
cyrix_speed.energy.cost: 27021.89 + 42034.05 * (level + -1.0) # autogenerated by odsimport
cyrix_speed.zetium.cost: 1688.87 + 2627.13 * (level + -1.0) # autogenerated by odsimport
cyrix_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
cyrix_speed.scientists.min: (45240.0 + 70373.33 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
cyrix_speed.war_points: (10367.77 + 16127.65 * (level + -1.0)) * level # autogenerated by odsimport
cyrix_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
cyrix_speed.requirement.cyrix.level: <%= spec_base_tech_req %>
cyrix_speed.requirement.cyrix_damage.invert: true
cyrix_speed.requirement.cyrix_armor.invert: true
cyrix_speed.requirement.cyrix_critical.invert: true
cyrix_speed.requirement.cyrix_absorption.invert: true
cyrix_speed.applies_to: <%= apl_to(cyrix) %>

### mantis config ###

# Coordinates in technology tree
mantis.coords: [5, 5]

# Upgrade properties
mantis.max_level: 10 # autogenerated by odsimport
mantis.upgrade_time: (18360.0 + 28560.0 * (level + -1.0)) / speed # autogenerated by odsimport
mantis.metal.cost: 6327.72 + 9843.12 * (level + -1.0) # autogenerated by odsimport
mantis.energy.cost: 9807.97 + 15256.84 * (level + -1.0) # autogenerated by odsimport
mantis.zetium.cost: 632.77 + 984.31 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mantis.scientists.min: (18360.0 + 28560.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
mantis.requirement.ground_factory.level: 1
mantis.war_points: (3530.34 + 5491.64 * (level + -1.0)) * level # autogenerated by odsimport
mantis.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mantis.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
mantis.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
mantis.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
mantis.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
mantis.applies_to: <%= apl_to(mantis) %>

### mantis_damage config ###

mantis_damage.name: DamageSpecialization
mantis_damage.group_to: mantis
mantis_damage.group_position: 0

# Upgrade properties
mantis_damage.max_level: 10 # autogenerated by odsimport
mantis_damage.upgrade_time: (18360.0 + 28560.0 * (level + -1.0)) / speed # autogenerated by odsimport
mantis_damage.metal.cost: 6327.72 + 9843.12 * (level + -1.0) # autogenerated by odsimport
mantis_damage.energy.cost: 9807.97 + 15256.84 * (level + -1.0) # autogenerated by odsimport
mantis_damage.zetium.cost: 632.77 + 984.31 * (level + -1.0) # autogenerated by odsimport
mantis_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mantis_damage.scientists.min: (18360.0 + 28560.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mantis_damage.war_points: (3530.34 + 5491.64 * (level + -1.0)) * level # autogenerated by odsimport
mantis_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mantis_damage.requirement.mantis.level: <%= spec_base_tech_req %>
mantis_damage.requirement.mantis_armor.invert: true
mantis_damage.requirement.mantis_critical.invert: true
mantis_damage.requirement.mantis_absorption.invert: true
mantis_damage.applies_to: <%= apl_to(mantis) %>

### mantis_armor config ###

mantis_armor.name: ArmorSpecialization
mantis_armor.group_to: mantis
mantis_armor.group_position: 1

# Upgrade properties
mantis_armor.max_level: 10 # autogenerated by odsimport
mantis_armor.upgrade_time: (18360.0 + 28560.0 * (level + -1.0)) / speed # autogenerated by odsimport
mantis_armor.metal.cost: 6327.72 + 9843.12 * (level + -1.0) # autogenerated by odsimport
mantis_armor.energy.cost: 9807.97 + 15256.84 * (level + -1.0) # autogenerated by odsimport
mantis_armor.zetium.cost: 632.77 + 984.31 * (level + -1.0) # autogenerated by odsimport
mantis_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mantis_armor.scientists.min: (18360.0 + 28560.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mantis_armor.war_points: (3530.34 + 5491.64 * (level + -1.0)) * level # autogenerated by odsimport
mantis_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mantis_armor.requirement.mantis.level: <%= spec_base_tech_req %>
mantis_armor.requirement.mantis_damage.invert: true
mantis_armor.requirement.mantis_critical.invert: true
mantis_armor.requirement.mantis_absorption.invert: true
mantis_armor.applies_to: <%= apl_to(mantis) %>

### mantis_critical config ###

mantis_critical.name: CriticalSpecialization
mantis_critical.group_to: mantis
mantis_critical.group_position: 2

# Upgrade properties
mantis_critical.max_level: 10 # autogenerated by odsimport
mantis_critical.upgrade_time: (18360.0 + 28560.0 * (level + -1.0)) / speed # autogenerated by odsimport
mantis_critical.metal.cost: 6327.72 + 9843.12 * (level + -1.0) # autogenerated by odsimport
mantis_critical.energy.cost: 9807.97 + 15256.84 * (level + -1.0) # autogenerated by odsimport
mantis_critical.zetium.cost: 632.77 + 984.31 * (level + -1.0) # autogenerated by odsimport
mantis_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mantis_critical.scientists.min: (18360.0 + 28560.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mantis_critical.war_points: (3530.34 + 5491.64 * (level + -1.0)) * level # autogenerated by odsimport
mantis_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mantis_critical.requirement.mantis.level: <%= spec_base_tech_req %>
mantis_critical.requirement.mantis_damage.invert: true
mantis_critical.requirement.mantis_armor.invert: true
mantis_critical.requirement.mantis_absorption.invert: true
mantis_critical.applies_to: <%= apl_to(mantis) %>

### mantis_absorption config ###

mantis_absorption.name: AbsorptionSpecialization
mantis_absorption.group_to: mantis
mantis_absorption.group_position: 3

# Upgrade properties
mantis_absorption.max_level: 10 # autogenerated by odsimport
mantis_absorption.upgrade_time: (18360.0 + 28560.0 * (level + -1.0)) / speed # autogenerated by odsimport
mantis_absorption.metal.cost: 6327.72 + 9843.12 * (level + -1.0) # autogenerated by odsimport
mantis_absorption.energy.cost: 9807.97 + 15256.84 * (level + -1.0) # autogenerated by odsimport
mantis_absorption.zetium.cost: 632.77 + 984.31 * (level + -1.0) # autogenerated by odsimport
mantis_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mantis_absorption.scientists.min: (18360.0 + 28560.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mantis_absorption.war_points: (3530.34 + 5491.64 * (level + -1.0)) * level # autogenerated by odsimport
mantis_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mantis_absorption.requirement.mantis.level: <%= spec_base_tech_req %>
mantis_absorption.requirement.mantis_damage.invert: true
mantis_absorption.requirement.mantis_armor.invert: true
mantis_absorption.requirement.mantis_critical.invert: true
mantis_absorption.applies_to: <%= apl_to(mantis) %>

# [6, 5] is empty

### mobile_vulcan config ###

# Coordinates in technology tree
mobile_vulcan.coords: [7, 5]

# Upgrade properties
mobile_vulcan.max_level: 1 # autogenerated by odsimport
mobile_vulcan.upgrade_time: (46656.0) / speed # autogenerated by odsimport
mobile_vulcan.metal.cost: 27359.28 # autogenerated by odsimport
mobile_vulcan.energy.cost: 56823.12 # autogenerated by odsimport
mobile_vulcan.zetium.cost: 8418.24 # autogenerated by odsimport
# Minimum amount of scientists needed
mobile_vulcan.scientists.min: 155.1312 # autogenerated by odsimport

# Technological requirements
mobile_vulcan.war_points: (20519.46) * level # autogenerated by odsimport
mobile_vulcan.planets.required: 2.0 # autogenerated by odsimport
mobile_vulcan.requirement.mdh.level: 1

### mobile_screamer config ###

# Coordinates in technology tree
mobile_screamer.coords: [8, 5]

# Upgrade properties
mobile_screamer.max_level: 1 # autogenerated by odsimport
mobile_screamer.upgrade_time: (87724.8) / speed # autogenerated by odsimport
mobile_screamer.metal.cost: 59685.6 # autogenerated by odsimport
mobile_screamer.energy.cost: 123962.4 # autogenerated by odsimport
mobile_screamer.zetium.cost: 18364.8 # autogenerated by odsimport
# Minimum amount of scientists needed
mobile_screamer.scientists.min: 291.68496 # autogenerated by odsimport

# Technological requirements
mobile_screamer.war_points: (44764.2) * level # autogenerated by odsimport
mobile_screamer.planets.required: 2.0 # autogenerated by odsimport
mobile_screamer.requirement.mdh.level: 1

### mobile_thunder config ###

# Coordinates in technology tree
mobile_thunder.coords: [9, 5]

# Upgrade properties
mobile_thunder.max_level: 1 # autogenerated by odsimport
mobile_thunder.upgrade_time: (116640.0) / speed # autogenerated by odsimport
mobile_thunder.metal.cost: 58968.0 # autogenerated by odsimport
mobile_thunder.energy.cost: 122472.0 # autogenerated by odsimport
mobile_thunder.zetium.cost: 18144.0 # autogenerated by odsimport
# Minimum amount of scientists needed
mobile_thunder.scientists.min: 387.828 # autogenerated by odsimport

# Technological requirements
mobile_thunder.war_points: (44226.0) * level # autogenerated by odsimport
mobile_thunder.planets.required: 2.0 # autogenerated by odsimport
mobile_thunder.requirement.mdh.level: 1

### mule config ###

# Coordinates in technology tree
mule.coords: [0, 6]
mule.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
mule.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
mule.mod.speed: 5.67 + 6.79 * (level + -1.0) # autogenerated by odsimport
mule.mod.storage: 1.64 + 2.77 * (level + -1.0) # autogenerated by odsimport
mule.applies_to: <%= apl_to mule %>

# Upgrade properties
mule.max_level: 9 # autogenerated by odsimport
mule.upgrade_time: (72000.0 + 126000.0 * (level + -1.0)) / speed # autogenerated by odsimport
mule.metal.cost: 25200.0 + 44100.0 * (level + -1.0) # autogenerated by odsimport
mule.energy.cost: 36000.0 + 63000.0 * (level + -1.0) # autogenerated by odsimport
mule.zetium.cost: 2160.0 + 3780.0 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mule.scientists.min: (72000.0 + 126000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mule.war_points: (13494.0 + 23614.5 * (level + -1.0)) * level # autogenerated by odsimport
mule.planets.required: 1.0 + 0.5 * (level + -1.0) # autogenerated by odsimport
mule.requirement.space_factory.level: 1

### mule_armor config ###

mule_armor.name: ArmorSpecialization
mule_armor.group_to: mule
mule_armor.group_position: 0

# Upgrade properties
mule_armor.max_level: 10 # autogenerated by odsimport
mule_armor.upgrade_time: (72000.0 + 112000.0 * (level + -1.0)) / speed # autogenerated by odsimport
mule_armor.metal.cost: 25200.0 + 39200.0 * (level + -1.0) # autogenerated by odsimport
mule_armor.energy.cost: 36000.0 + 56000.0 * (level + -1.0) # autogenerated by odsimport
mule_armor.zetium.cost: 2160.0 + 3360.0 * (level + -1.0) # autogenerated by odsimport
mule_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mule_armor.scientists.min: (72000.0 + 112000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mule_armor.war_points: (13494.0 + 20990.67 * (level + -1.0)) * level # autogenerated by odsimport
mule_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mule_armor.requirement.mule.level: <%= spec_base_tech_req %>
mule_armor.requirement.mule_absorption.invert: true
mule_armor.requirement.mule_speed.invert: true
mule_armor.requirement.mule_storage.invert: true
mule_armor.applies_to: <%= apl_to(mule) %>

### mule_absorption config ###

mule_absorption.name: AbsorptionSpecialization
mule_absorption.group_to: mule
mule_absorption.group_position: 1

# Upgrade properties
mule_absorption.max_level: 10 # autogenerated by odsimport
mule_absorption.upgrade_time: (72000.0 + 112000.0 * (level + -1.0)) / speed # autogenerated by odsimport
mule_absorption.metal.cost: 25200.0 + 39200.0 * (level + -1.0) # autogenerated by odsimport
mule_absorption.energy.cost: 36000.0 + 56000.0 * (level + -1.0) # autogenerated by odsimport
mule_absorption.zetium.cost: 2160.0 + 3360.0 * (level + -1.0) # autogenerated by odsimport
mule_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mule_absorption.scientists.min: (72000.0 + 112000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mule_absorption.war_points: (13494.0 + 20990.67 * (level + -1.0)) * level # autogenerated by odsimport
mule_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mule_absorption.requirement.mule.level: <%= spec_base_tech_req %>
mule_absorption.requirement.mule_armor.invert: true
mule_absorption.requirement.mule_speed.invert: true
mule_absorption.requirement.mule_storage.invert: true
mule_absorption.applies_to: <%= apl_to(mule) %>

### mule_speed config ###

mule_speed.name: SpeedSpecialization
mule_speed.group_to: mule
mule_speed.group_position: 2

# Upgrade properties
mule_speed.max_level: 10 # autogenerated by odsimport
mule_speed.upgrade_time: (72000.0 + 112000.0 * (level + -1.0)) / speed # autogenerated by odsimport
mule_speed.metal.cost: 25200.0 + 39200.0 * (level + -1.0) # autogenerated by odsimport
mule_speed.energy.cost: 36000.0 + 56000.0 * (level + -1.0) # autogenerated by odsimport
mule_speed.zetium.cost: 2160.0 + 3360.0 * (level + -1.0) # autogenerated by odsimport
mule_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mule_speed.scientists.min: (72000.0 + 112000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mule_speed.war_points: (13494.0 + 20990.67 * (level + -1.0)) * level # autogenerated by odsimport
mule_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mule_speed.requirement.mule.level: <%= spec_base_tech_req %>
mule_speed.requirement.mule_armor.invert: true
mule_speed.requirement.mule_absorption.invert: true
mule_speed.requirement.mule_storage.invert: true
mule_speed.applies_to: <%= apl_to(mule) %>

### mule_storage config ###

mule_storage.name: StorageSpecialization
mule_storage.group_to: mule
mule_storage.group_position: 3

# Upgrade properties
mule_storage.max_level: 10 # autogenerated by odsimport
mule_storage.upgrade_time: (72000.0 + 112000.0 * (level + -1.0)) / speed # autogenerated by odsimport
mule_storage.metal.cost: 25200.0 + 39200.0 * (level + -1.0) # autogenerated by odsimport
mule_storage.energy.cost: 36000.0 + 56000.0 * (level + -1.0) # autogenerated by odsimport
mule_storage.zetium.cost: 2160.0 + 3360.0 * (level + -1.0) # autogenerated by odsimport
mule_storage.mod.storage: 4.36 + 5.47 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
mule_storage.scientists.min: (72000.0 + 112000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
mule_storage.war_points: (13494.0 + 20990.67 * (level + -1.0)) * level # autogenerated by odsimport
mule_storage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
mule_storage.requirement.mule.level: <%= spec_base_tech_req %>
mule_storage.requirement.mule_armor.invert: true
mule_storage.requirement.mule_absorption.invert: true
mule_storage.requirement.mule_speed.invert: true
mule_storage.applies_to: <%= apl_to(mule) %>

### avenger config ###

# Coordinates in technology tree
avenger.coords: [1, 6]
avenger.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
avenger.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
avenger.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
avenger.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
avenger.mod.speed: 6.67 * (level + -1.0) # autogenerated by odsimport
avenger.applies_to: <%= apl_to avenger %>

# Upgrade properties
avenger.max_level: 10 # autogenerated by odsimport
avenger.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger.requirement.space_factory.level: 1

### avenger_damage config ###

avenger_damage.name: DamageSpecialization
avenger_damage.group_to: avenger
avenger_damage.group_position: 0

# Upgrade properties
avenger_damage.max_level: 10 # autogenerated by odsimport
avenger_damage.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger_damage.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger_damage.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger_damage.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
avenger_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger_damage.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger_damage.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger_damage.requirement.avenger.level: <%= spec_base_tech_req %>
avenger_damage.requirement.avenger_armor.invert: true
avenger_damage.requirement.avenger_critical.invert: true
avenger_damage.requirement.avenger_absorption.invert: true
avenger_damage.requirement.avenger_speed.invert: true
avenger_damage.applies_to: <%= apl_to(avenger) %>

### avenger_armor config ###

avenger_armor.name: ArmorSpecialization
avenger_armor.group_to: avenger
avenger_armor.group_position: 1

# Upgrade properties
avenger_armor.max_level: 10 # autogenerated by odsimport
avenger_armor.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger_armor.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger_armor.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger_armor.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
avenger_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger_armor.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger_armor.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger_armor.requirement.avenger.level: <%= spec_base_tech_req %>
avenger_armor.requirement.avenger_damage.invert: true
avenger_armor.requirement.avenger_critical.invert: true
avenger_armor.requirement.avenger_absorption.invert: true
avenger_armor.requirement.avenger_speed.invert: true
avenger_armor.applies_to: <%= apl_to(avenger) %>

### avenger_critical config ###

avenger_critical.name: CriticalSpecialization
avenger_critical.group_to: avenger
avenger_critical.group_position: 2

# Upgrade properties
avenger_critical.max_level: 10 # autogenerated by odsimport
avenger_critical.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger_critical.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger_critical.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger_critical.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
avenger_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger_critical.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger_critical.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger_critical.requirement.avenger.level: <%= spec_base_tech_req %>
avenger_critical.requirement.avenger_damage.invert: true
avenger_critical.requirement.avenger_armor.invert: true
avenger_critical.requirement.avenger_absorption.invert: true
avenger_critical.requirement.avenger_speed.invert: true
avenger_critical.applies_to: <%= apl_to(avenger) %>

### avenger_absorption config ###

avenger_absorption.name: AbsorptionSpecialization
avenger_absorption.group_to: avenger
avenger_absorption.group_position: 3

# Upgrade properties
avenger_absorption.max_level: 10 # autogenerated by odsimport
avenger_absorption.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger_absorption.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger_absorption.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger_absorption.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
avenger_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger_absorption.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger_absorption.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger_absorption.requirement.avenger.level: <%= spec_base_tech_req %>
avenger_absorption.requirement.avenger_damage.invert: true
avenger_absorption.requirement.avenger_armor.invert: true
avenger_absorption.requirement.avenger_critical.invert: true
avenger_absorption.requirement.avenger_speed.invert: true
avenger_absorption.applies_to: <%= apl_to(avenger) %>

### avenger_speed config ###

avenger_speed.name: SpeedSpecialization
avenger_speed.group_to: avenger
avenger_speed.group_position: 4

# Upgrade properties
avenger_speed.max_level: 10 # autogenerated by odsimport
avenger_speed.upgrade_time: (56784.0 + 88330.67 * (level + -1.0)) / speed # autogenerated by odsimport
avenger_speed.metal.cost: 26168.36 + 40706.33 * (level + -1.0) # autogenerated by odsimport
avenger_speed.energy.cost: 36233.11 + 56362.61 * (level + -1.0) # autogenerated by odsimport
avenger_speed.zetium.cost: 2264.57 + 3522.66 * (level + -1.0) # autogenerated by odsimport
avenger_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
avenger_speed.scientists.min: (56784.0 + 88330.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
avenger_speed.war_points: (13901.94 + 21625.24 * (level + -1.0)) * level # autogenerated by odsimport
avenger_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
avenger_speed.requirement.avenger.level: <%= spec_base_tech_req %>
avenger_speed.requirement.avenger_damage.invert: true
avenger_speed.requirement.avenger_armor.invert: true
avenger_speed.requirement.avenger_critical.invert: true
avenger_speed.requirement.avenger_absorption.invert: true
avenger_speed.applies_to: <%= apl_to(avenger) %>

# [2, 6] is empty

### dart config ###

# Coordinates in technology tree
dart.coords: [3, 6]
dart.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
dart.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
dart.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
dart.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
dart.mod.speed: 6.67 * (level + -1.0) # autogenerated by odsimport
dart.applies_to: <%= apl_to dart %>

# Upgrade properties
dart.max_level: 10 # autogenerated by odsimport
dart.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart.requirement.crow.level: 3

### dart_damage config ###

dart_damage.name: DamageSpecialization
dart_damage.group_to: dart
dart_damage.group_position: 0

# Upgrade properties
dart_damage.max_level: 10 # autogenerated by odsimport
dart_damage.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart_damage.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart_damage.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart_damage.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
dart_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart_damage.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart_damage.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart_damage.requirement.dart.level: <%= spec_base_tech_req %>
dart_damage.requirement.dart_armor.invert: true
dart_damage.requirement.dart_critical.invert: true
dart_damage.requirement.dart_absorption.invert: true
dart_damage.requirement.dart_speed.invert: true
dart_damage.applies_to: <%= apl_to(dart) %>

### dart_armor config ###

dart_armor.name: ArmorSpecialization
dart_armor.group_to: dart
dart_armor.group_position: 1

# Upgrade properties
dart_armor.max_level: 10 # autogenerated by odsimport
dart_armor.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart_armor.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart_armor.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart_armor.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
dart_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart_armor.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart_armor.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart_armor.requirement.dart.level: <%= spec_base_tech_req %>
dart_armor.requirement.dart_damage.invert: true
dart_armor.requirement.dart_critical.invert: true
dart_armor.requirement.dart_absorption.invert: true
dart_armor.requirement.dart_speed.invert: true
dart_armor.applies_to: <%= apl_to(dart) %>

### dart_critical config ###

dart_critical.name: CriticalSpecialization
dart_critical.group_to: dart
dart_critical.group_position: 2

# Upgrade properties
dart_critical.max_level: 10 # autogenerated by odsimport
dart_critical.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart_critical.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart_critical.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart_critical.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
dart_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart_critical.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart_critical.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart_critical.requirement.dart.level: <%= spec_base_tech_req %>
dart_critical.requirement.dart_damage.invert: true
dart_critical.requirement.dart_armor.invert: true
dart_critical.requirement.dart_absorption.invert: true
dart_critical.requirement.dart_speed.invert: true
dart_critical.applies_to: <%= apl_to(dart) %>

### dart_absorption config ###

dart_absorption.name: AbsorptionSpecialization
dart_absorption.group_to: dart
dart_absorption.group_position: 3

# Upgrade properties
dart_absorption.max_level: 10 # autogenerated by odsimport
dart_absorption.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart_absorption.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart_absorption.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart_absorption.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
dart_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart_absorption.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart_absorption.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart_absorption.requirement.dart.level: <%= spec_base_tech_req %>
dart_absorption.requirement.dart_damage.invert: true
dart_absorption.requirement.dart_armor.invert: true
dart_absorption.requirement.dart_critical.invert: true
dart_absorption.requirement.dart_speed.invert: true
dart_absorption.applies_to: <%= apl_to(dart) %>

### dart_speed config ###

dart_speed.name: SpeedSpecialization
dart_speed.group_to: dart
dart_speed.group_position: 4

# Upgrade properties
dart_speed.max_level: 10 # autogenerated by odsimport
dart_speed.upgrade_time: (46200.0 + 71866.67 * (level + -1.0)) / speed # autogenerated by odsimport
dart_speed.metal.cost: 31016.96 + 48248.6 * (level + -1.0) # autogenerated by odsimport
dart_speed.energy.cost: 42946.56 + 66805.76 * (level + -1.0) # autogenerated by odsimport
dart_speed.zetium.cost: 2684.16 + 4175.36 * (level + -1.0) # autogenerated by odsimport
dart_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dart_speed.scientists.min: (46200.0 + 71866.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dart_speed.war_points: (16477.76 + 25632.07 * (level + -1.0)) * level # autogenerated by odsimport
dart_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
dart_speed.requirement.dart.level: <%= spec_base_tech_req %>
dart_speed.requirement.dart_damage.invert: true
dart_speed.requirement.dart_armor.invert: true
dart_speed.requirement.dart_critical.invert: true
dart_speed.requirement.dart_absorption.invert: true
dart_speed.applies_to: <%= apl_to(dart) %>

### rhyno config ###

# Coordinates in technology tree
rhyno.coords: [4, 6]
rhyno.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
rhyno.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
rhyno.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
rhyno.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
rhyno.mod.speed: 6.67 * (level + -1.0) # autogenerated by odsimport
rhyno.mod.storage: 2.64 * (level + -1.0) # autogenerated by odsimport
rhyno.applies_to: <%= apl_to rhyno %>

# Upgrade properties
rhyno.max_level: 10 # autogenerated by odsimport
rhyno.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno.requirement.cyrix.level: 3

### rhyno_damage config ###

rhyno_damage.name: DamageSpecialization
rhyno_damage.group_to: rhyno
rhyno_damage.group_position: 0

# Upgrade properties
rhyno_damage.max_level: 10 # autogenerated by odsimport
rhyno_damage.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_damage.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_damage.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_damage.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_damage.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_damage.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_damage.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_damage.requirement.rhyno_armor.invert: true
rhyno_damage.requirement.rhyno_critical.invert: true
rhyno_damage.requirement.rhyno_absorption.invert: true
rhyno_damage.requirement.rhyno_speed.invert: true
rhyno_damage.requirement.rhyno_storage.invert: true
rhyno_damage.applies_to: <%= apl_to(rhyno) %>

### rhyno_armor config ###

rhyno_armor.name: ArmorSpecialization
rhyno_armor.group_to: rhyno
rhyno_armor.group_position: 1

# Upgrade properties
rhyno_armor.max_level: 10 # autogenerated by odsimport
rhyno_armor.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_armor.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_armor.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_armor.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_armor.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_armor.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_armor.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_armor.requirement.rhyno_damage.invert: true
rhyno_armor.requirement.rhyno_critical.invert: true
rhyno_armor.requirement.rhyno_absorption.invert: true
rhyno_armor.requirement.rhyno_speed.invert: true
rhyno_armor.requirement.rhyno_storage.invert: true
rhyno_armor.applies_to: <%= apl_to(rhyno) %>

### rhyno_critical config ###

rhyno_critical.name: CriticalSpecialization
rhyno_critical.group_to: rhyno
rhyno_critical.group_position: 2

# Upgrade properties
rhyno_critical.max_level: 10 # autogenerated by odsimport
rhyno_critical.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_critical.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_critical.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_critical.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_critical.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_critical.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_critical.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_critical.requirement.rhyno_damage.invert: true
rhyno_critical.requirement.rhyno_armor.invert: true
rhyno_critical.requirement.rhyno_absorption.invert: true
rhyno_critical.requirement.rhyno_speed.invert: true
rhyno_critical.requirement.rhyno_storage.invert: true
rhyno_critical.applies_to: <%= apl_to(rhyno) %>

### rhyno_absorption config ###

rhyno_absorption.name: AbsorptionSpecialization
rhyno_absorption.group_to: rhyno
rhyno_absorption.group_position: 3

# Upgrade properties
rhyno_absorption.max_level: 10 # autogenerated by odsimport
rhyno_absorption.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_absorption.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_absorption.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_absorption.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_absorption.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_absorption.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_absorption.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_absorption.requirement.rhyno_damage.invert: true
rhyno_absorption.requirement.rhyno_armor.invert: true
rhyno_absorption.requirement.rhyno_critical.invert: true
rhyno_absorption.requirement.rhyno_speed.invert: true
rhyno_absorption.requirement.rhyno_storage.invert: true
rhyno_absorption.applies_to: <%= apl_to(rhyno) %>

### rhyno_speed config ###

rhyno_speed.name: SpeedSpecialization
rhyno_speed.group_to: rhyno
rhyno_speed.group_position: 4

# Upgrade properties
rhyno_speed.max_level: 10 # autogenerated by odsimport
rhyno_speed.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_speed.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_speed.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_speed.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_speed.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_speed.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_speed.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_speed.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_speed.requirement.rhyno_damage.invert: true
rhyno_speed.requirement.rhyno_armor.invert: true
rhyno_speed.requirement.rhyno_critical.invert: true
rhyno_speed.requirement.rhyno_absorption.invert: true
rhyno_speed.requirement.rhyno_storage.invert: true
rhyno_speed.applies_to: <%= apl_to(rhyno) %>

### rhyno_storage config ###

rhyno_storage.name: StorageSpecialization
rhyno_storage.group_to: rhyno
rhyno_storage.group_position: 5

# Upgrade properties
rhyno_storage.max_level: 10 # autogenerated by odsimport
rhyno_storage.upgrade_time: (277848.0 + 432208.0 * (level + -1.0)) / speed # autogenerated by odsimport
rhyno_storage.metal.cost: 72740.46 + 113151.83 * (level + -1.0) # autogenerated by odsimport
rhyno_storage.energy.cost: 109110.69 + 169727.74 * (level + -1.0) # autogenerated by odsimport
rhyno_storage.zetium.cost: 14548.09 + 22630.37 * (level + -1.0) # autogenerated by odsimport
rhyno_storage.mod.storage: 4.36 + 5.47 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
rhyno_storage.scientists.min: (277848.0 + 432208.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
rhyno_storage.war_points: (44917.23 + 69871.25 * (level + -1.0)) * level # autogenerated by odsimport
rhyno_storage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
rhyno_storage.requirement.rhyno.level: <%= spec_base_tech_req %>
rhyno_storage.requirement.rhyno_damage.invert: true
rhyno_storage.requirement.rhyno_armor.invert: true
rhyno_storage.requirement.rhyno_critical.invert: true
rhyno_storage.requirement.rhyno_absorption.invert: true
rhyno_storage.requirement.rhyno_speed.invert: true
rhyno_storage.applies_to: <%= apl_to(rhyno) %>

### azure config ###

# Coordinates in technology tree
azure.coords: [5, 6]

# Upgrade properties
azure.max_level: 10 # autogenerated by odsimport
azure.upgrade_time: (19920.0 + 30986.67 * (level + -1.0)) / speed # autogenerated by odsimport
azure.metal.cost: 6522.24 + 10145.71 * (level + -1.0) # autogenerated by odsimport
azure.energy.cost: 10109.47 + 15725.85 * (level + -1.0) # autogenerated by odsimport
azure.zetium.cost: 652.22 + 1014.57 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
azure.scientists.min: (19920.0 + 30986.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
azure.requirement.ground_factory.level: 1
azure.war_points: (3638.87 + 5660.46 * (level + -1.0)) * level # autogenerated by odsimport
azure.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
azure.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
azure.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
azure.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
azure.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
azure.applies_to: <%= apl_to(azure) %>

### azure_damage config ###

azure_damage.name: DamageSpecialization
azure_damage.group_to: azure
azure_damage.group_position: 0

# Upgrade properties
azure_damage.max_level: 10 # autogenerated by odsimport
azure_damage.upgrade_time: (19920.0 + 30986.67 * (level + -1.0)) / speed # autogenerated by odsimport
azure_damage.metal.cost: 6522.24 + 10145.71 * (level + -1.0) # autogenerated by odsimport
azure_damage.energy.cost: 10109.47 + 15725.85 * (level + -1.0) # autogenerated by odsimport
azure_damage.zetium.cost: 652.22 + 1014.57 * (level + -1.0) # autogenerated by odsimport
azure_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
azure_damage.scientists.min: (19920.0 + 30986.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
azure_damage.war_points: (3638.87 + 5660.46 * (level + -1.0)) * level # autogenerated by odsimport
azure_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
azure_damage.requirement.azure.level: <%= spec_base_tech_req %>
azure_damage.requirement.azure_armor.invert: true
azure_damage.requirement.azure_critical.invert: true
azure_damage.requirement.azure_absorption.invert: true
azure_damage.applies_to: <%= apl_to(azure) %>

### azure_armor config ###

azure_armor.name: ArmorSpecialization
azure_armor.group_to: azure
azure_armor.group_position: 1

# Upgrade properties
azure_armor.max_level: 10 # autogenerated by odsimport
azure_armor.upgrade_time: (19920.0 + 30986.67 * (level + -1.0)) / speed # autogenerated by odsimport
azure_armor.metal.cost: 6522.24 + 10145.71 * (level + -1.0) # autogenerated by odsimport
azure_armor.energy.cost: 10109.47 + 15725.85 * (level + -1.0) # autogenerated by odsimport
azure_armor.zetium.cost: 652.22 + 1014.57 * (level + -1.0) # autogenerated by odsimport
azure_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
azure_armor.scientists.min: (19920.0 + 30986.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
azure_armor.war_points: (3638.87 + 5660.46 * (level + -1.0)) * level # autogenerated by odsimport
azure_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
azure_armor.requirement.azure.level: <%= spec_base_tech_req %>
azure_armor.requirement.azure_damage.invert: true
azure_armor.requirement.azure_critical.invert: true
azure_armor.requirement.azure_absorption.invert: true
azure_armor.applies_to: <%= apl_to(azure) %>

### azure_critical config ###

azure_critical.name: CriticalSpecialization
azure_critical.group_to: azure
azure_critical.group_position: 2

# Upgrade properties
azure_critical.max_level: 10 # autogenerated by odsimport
azure_critical.upgrade_time: (19920.0 + 30986.67 * (level + -1.0)) / speed # autogenerated by odsimport
azure_critical.metal.cost: 6522.24 + 10145.71 * (level + -1.0) # autogenerated by odsimport
azure_critical.energy.cost: 10109.47 + 15725.85 * (level + -1.0) # autogenerated by odsimport
azure_critical.zetium.cost: 652.22 + 1014.57 * (level + -1.0) # autogenerated by odsimport
azure_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
azure_critical.scientists.min: (19920.0 + 30986.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
azure_critical.war_points: (3638.87 + 5660.46 * (level + -1.0)) * level # autogenerated by odsimport
azure_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
azure_critical.requirement.azure.level: <%= spec_base_tech_req %>
azure_critical.requirement.azure_damage.invert: true
azure_critical.requirement.azure_armor.invert: true
azure_critical.requirement.azure_absorption.invert: true
azure_critical.applies_to: <%= apl_to(azure) %>

### azure_absorption config ###

azure_absorption.name: AbsorptionSpecialization
azure_absorption.group_to: azure
azure_absorption.group_position: 3

# Upgrade properties
azure_absorption.max_level: 10 # autogenerated by odsimport
azure_absorption.upgrade_time: (19920.0 + 30986.67 * (level + -1.0)) / speed # autogenerated by odsimport
azure_absorption.metal.cost: 6522.24 + 10145.71 * (level + -1.0) # autogenerated by odsimport
azure_absorption.energy.cost: 10109.47 + 15725.85 * (level + -1.0) # autogenerated by odsimport
azure_absorption.zetium.cost: 652.22 + 1014.57 * (level + -1.0) # autogenerated by odsimport
azure_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
azure_absorption.scientists.min: (19920.0 + 30986.67 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
azure_absorption.war_points: (3638.87 + 5660.46 * (level + -1.0)) * level # autogenerated by odsimport
azure_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
azure_absorption.requirement.azure.level: <%= spec_base_tech_req %>
azure_absorption.requirement.azure_damage.invert: true
azure_absorption.requirement.azure_armor.invert: true
azure_absorption.requirement.azure_critical.invert: true
azure_absorption.applies_to: <%= apl_to(azure) %>

# [6, 6] is empty

### zeus config ###

# Coordinates in technology tree
zeus.coords: [7, 6]

# Upgrade properties
zeus.max_level: 10 # autogenerated by odsimport
zeus.upgrade_time: (27000.0 + 42000.0 * (level + -1.0)) / speed # autogenerated by odsimport
zeus.metal.cost: 14814.9 + 23045.4 * (level + -1.0) # autogenerated by odsimport
zeus.energy.cost: 22222.35 + 34568.1 * (level + -1.0) # autogenerated by odsimport
zeus.zetium.cost: 2469.15 + 3840.9 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
zeus.scientists.min: (27000.0 + 42000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
zeus.requirement.ground_factory.level: 1
zeus.war_points: (8827.21 + 13731.22 * (level + -1.0)) * level # autogenerated by odsimport
zeus.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
zeus.mod.armor: 2.43 * (level + -1.0) # autogenerated by odsimport
zeus.mod.damage: 3.11 * (level + -1.0) # autogenerated by odsimport
zeus.mod.critical: 1.11 * (level + -1.0) # autogenerated by odsimport
zeus.mod.absorption: 3.3 * (level + -1.0) # autogenerated by odsimport
zeus.applies_to: <%= apl_to(zeus) %>

### zeus_damage config ###

zeus_damage.name: DamageSpecialization
zeus_damage.group_to: zeus
zeus_damage.group_position: 0

# Upgrade properties
zeus_damage.max_level: 10 # autogenerated by odsimport
zeus_damage.upgrade_time: (27000.0 + 42000.0 * (level + -1.0)) / speed # autogenerated by odsimport
zeus_damage.metal.cost: 14814.9 + 23045.4 * (level + -1.0) # autogenerated by odsimport
zeus_damage.energy.cost: 22222.35 + 34568.1 * (level + -1.0) # autogenerated by odsimport
zeus_damage.zetium.cost: 2469.15 + 3840.9 * (level + -1.0) # autogenerated by odsimport
zeus_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
zeus_damage.scientists.min: (27000.0 + 42000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
zeus_damage.war_points: (8827.21 + 13731.22 * (level + -1.0)) * level # autogenerated by odsimport
zeus_damage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
zeus_damage.requirement.zeus.level: <%= spec_base_tech_req %>
zeus_damage.requirement.zeus_armor.invert: true
zeus_damage.requirement.zeus_critical.invert: true
zeus_damage.requirement.zeus_absorption.invert: true
zeus_damage.applies_to: <%= apl_to(zeus) %>

### zeus_armor config ###

zeus_armor.name: ArmorSpecialization
zeus_armor.group_to: zeus
zeus_armor.group_position: 1

# Upgrade properties
zeus_armor.max_level: 10 # autogenerated by odsimport
zeus_armor.upgrade_time: (27000.0 + 42000.0 * (level + -1.0)) / speed # autogenerated by odsimport
zeus_armor.metal.cost: 14814.9 + 23045.4 * (level + -1.0) # autogenerated by odsimport
zeus_armor.energy.cost: 22222.35 + 34568.1 * (level + -1.0) # autogenerated by odsimport
zeus_armor.zetium.cost: 2469.15 + 3840.9 * (level + -1.0) # autogenerated by odsimport
zeus_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
zeus_armor.scientists.min: (27000.0 + 42000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
zeus_armor.war_points: (8827.21 + 13731.22 * (level + -1.0)) * level # autogenerated by odsimport
zeus_armor.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
zeus_armor.requirement.zeus.level: <%= spec_base_tech_req %>
zeus_armor.requirement.zeus_damage.invert: true
zeus_armor.requirement.zeus_critical.invert: true
zeus_armor.requirement.zeus_absorption.invert: true
zeus_armor.applies_to: <%= apl_to(zeus) %>

### zeus_critical config ###

zeus_critical.name: CriticalSpecialization
zeus_critical.group_to: zeus
zeus_critical.group_position: 2

# Upgrade properties
zeus_critical.max_level: 10 # autogenerated by odsimport
zeus_critical.upgrade_time: (27000.0 + 42000.0 * (level + -1.0)) / speed # autogenerated by odsimport
zeus_critical.metal.cost: 14814.9 + 23045.4 * (level + -1.0) # autogenerated by odsimport
zeus_critical.energy.cost: 22222.35 + 34568.1 * (level + -1.0) # autogenerated by odsimport
zeus_critical.zetium.cost: 2469.15 + 3840.9 * (level + -1.0) # autogenerated by odsimport
zeus_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
zeus_critical.scientists.min: (27000.0 + 42000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
zeus_critical.war_points: (8827.21 + 13731.22 * (level + -1.0)) * level # autogenerated by odsimport
zeus_critical.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
zeus_critical.requirement.zeus.level: <%= spec_base_tech_req %>
zeus_critical.requirement.zeus_damage.invert: true
zeus_critical.requirement.zeus_armor.invert: true
zeus_critical.requirement.zeus_absorption.invert: true
zeus_critical.applies_to: <%= apl_to(zeus) %>

### zeus_absorption config ###

zeus_absorption.name: AbsorptionSpecialization
zeus_absorption.group_to: zeus
zeus_absorption.group_position: 3

# Upgrade properties
zeus_absorption.max_level: 10 # autogenerated by odsimport
zeus_absorption.upgrade_time: (27000.0 + 42000.0 * (level + -1.0)) / speed # autogenerated by odsimport
zeus_absorption.metal.cost: 14814.9 + 23045.4 * (level + -1.0) # autogenerated by odsimport
zeus_absorption.energy.cost: 22222.35 + 34568.1 * (level + -1.0) # autogenerated by odsimport
zeus_absorption.zetium.cost: 2469.15 + 3840.9 * (level + -1.0) # autogenerated by odsimport
zeus_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
zeus_absorption.scientists.min: (27000.0 + 42000.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
zeus_absorption.war_points: (8827.21 + 13731.22 * (level + -1.0)) * level # autogenerated by odsimport
zeus_absorption.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
zeus_absorption.requirement.zeus.level: <%= spec_base_tech_req %>
zeus_absorption.requirement.zeus_damage.invert: true
zeus_absorption.requirement.zeus_armor.invert: true
zeus_absorption.requirement.zeus_critical.invert: true
zeus_absorption.applies_to: <%= apl_to(zeus) %>

# [8, 6] is empty
# [9, 6] is empty

### ship_storage config ###

# Coordinates in technology tree
ship_storage.coords: [0, 7]

# Upgrade properties
ship_storage.max_level: 10 # autogenerated by odsimport
ship_storage.upgrade_time: (26238.6 + 74828.6 * (level + -1.0)) / speed # autogenerated by odsimport
ship_storage.metal.cost: (7345.53 + 20948.38 * (level + -1.0)) * 2.5 # autogenerated by odsimport
ship_storage.energy.cost: (10883.3 + 31037.56 * (level + -1.0)) * 2.0 # autogenerated by odsimport
ship_storage.zetium.cost: (1253.11 + 3573.68 * (level + -1.0)) * 3.75 # autogenerated by odsimport

# Minimum amount of scientists needed
ship_storage.scientists.min: (26238.6 + 74828.6 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
ship_storage.applies_to: <%= apl_to mule, rhyno %>

# How much more % does ships have storage.
ship_storage.mod.storage: 35.0 * level # autogenerated by odsimport

# Technological requirements
ship_storage.war_points: (11380.74 + 32456.19 * (level + -1.0)) * level # autogenerated by odsimport
ship_storage.planets.required: 1.0 + 0.44 * (level + -1.0) # autogenerated by odsimport
ship_storage.requirement.mule.level: 3

# [1, 7] is empty (reserved for orion)
# [2, 7] is empty
# [3, 7] is empty
# [4, 7] is empty
# [5, 7] is empty
# [6, 7] is empty
# [7, 7] is empty
# [8, 7] is empty
# [9, 7] is empty

### npc_space_damage config ###

# Coordinates in technology tree
npc_space_damage.coords: [0, 8]

# Upgrade properties
npc_space_damage.max_level: 10 # autogenerated by odsimport
npc_space_damage.mod.damage: 3.9 + 5.01 * (level + -1.0) # autogenerated by odsimport
npc_space_damage.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_space_damage.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_space_damage.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_space_damage.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_space_damage.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_space_damage.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_space_damage.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_space_damage.requirement.npc_space_armor.invert: true
npc_space_damage.requirement.npc_ground_damage.invert: true
npc_space_damage.requirement.npc_ground_armor.invert: true
npc_space_damage.applies_to: <%= apl_to npc_space %>

### npc_space_armor config ###

# Coordinates in technology tree
npc_space_armor.coords: [1, 8]

# Upgrade properties
npc_space_armor.max_level: 10 # autogenerated by odsimport
npc_space_armor.mod.armor: 2.29 + 3.4 * (level + -1.0) # autogenerated by odsimport
npc_space_armor.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_space_armor.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_space_armor.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_space_armor.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_space_armor.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_space_armor.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_space_armor.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_space_armor.requirement.npc_space_damage.invert: true
npc_space_armor.requirement.npc_ground_damage.invert: true
npc_space_armor.requirement.npc_ground_armor.invert: true
npc_space_armor.applies_to: <%= apl_to npc_space %>

### npc_ground_damage config ###

# Coordinates in technology tree
npc_ground_damage.coords: [2, 8]

# Upgrade properties
npc_ground_damage.max_level: 10 # autogenerated by odsimport
npc_ground_damage.mod.damage: 3.9 + 5.01 * (level + -1.0) # autogenerated by odsimport
npc_ground_damage.upgrade_time: (7562.25 + 11763.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_ground_damage.metal.cost: 11564.8 + 17989.69 * (level + -1.0) # autogenerated by odsimport
npc_ground_damage.energy.cost: 18551.52 + 28857.93 * (level + -1.0) # autogenerated by odsimport
npc_ground_damage.zetium.cost: 1424.26 + 2215.51 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_ground_damage.scientists.min: (7562.25 + 11763.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_ground_damage.war_points: (6694.08 + 10413.01 * (level + -1.0)) * level # autogenerated by odsimport
npc_ground_damage.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_ground_damage.requirement.npc_space_damage.invert: true
npc_ground_damage.requirement.npc_space_armor.invert: true
npc_ground_damage.requirement.npc_ground_armor.invert: true
npc_ground_damage.applies_to: <%= apl_to npc_ground %>

### npc_ground_armor config ###

# Coordinates in technology tree
npc_ground_armor.coords: [3, 8]

# Upgrade properties
npc_ground_armor.max_level: 10 # autogenerated by odsimport
npc_ground_armor.mod.armor: 2.29 + 3.4 * (level + -1.0) # autogenerated by odsimport
npc_ground_armor.upgrade_time: (7562.25 + 11763.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_ground_armor.metal.cost: 11564.8 + 17989.69 * (level + -1.0) # autogenerated by odsimport
npc_ground_armor.energy.cost: 18551.52 + 28857.93 * (level + -1.0) # autogenerated by odsimport
npc_ground_armor.zetium.cost: 1424.26 + 2215.51 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_ground_armor.scientists.min: (7562.25 + 11763.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_ground_armor.war_points: (6694.08 + 10413.01 * (level + -1.0)) * level # autogenerated by odsimport
npc_ground_armor.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_ground_armor.requirement.npc_space_damage.invert: true
npc_ground_armor.requirement.npc_space_armor.invert: true
npc_ground_armor.requirement.npc_ground_damage.invert: true
npc_ground_armor.applies_to: <%= apl_to npc_ground %>

# [4, 8] is empty

### npc_space_critical config ###

# Coordinates in technology tree
npc_space_critical.coords: [5, 8]

# Upgrade properties
npc_space_critical.max_level: 10 # autogenerated by odsimport
npc_space_critical.mod.critical: 0.75 + 1.86 * (level + -1.0) # autogenerated by odsimport
npc_space_critical.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_space_critical.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_space_critical.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_space_critical.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_space_critical.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_space_critical.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_space_critical.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_space_critical.requirement.npc_ground_critical.invert: true
npc_space_critical.requirement.npc_space_absorption.invert: true
npc_space_critical.requirement.npc_ground_absorption.invert: true
npc_space_critical.applies_to: <%= apl_to npc_space %>

### npc_space_absorption config ###

# Coordinates in technology tree
npc_space_absorption.coords: [6, 8]

# Upgrade properties
npc_space_absorption.max_level: 10 # autogenerated by odsimport
npc_space_absorption.mod.absorption: 3.46 + 4.57 * (level + -1.0) # autogenerated by odsimport
npc_space_absorption.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_space_absorption.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_space_absorption.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_space_absorption.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_space_absorption.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_space_absorption.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_space_absorption.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_space_absorption.requirement.npc_ground_absorption.invert: true
npc_space_absorption.requirement.npc_space_critical.invert: true
npc_space_absorption.requirement.npc_ground_critical.invert: true
npc_space_absorption.applies_to: <%= apl_to npc_space %>

### npc_ground_critical config ###

# Coordinates in technology tree
npc_ground_critical.coords: [7, 8]

# Upgrade properties
npc_ground_critical.max_level: 10 # autogenerated by odsimport
npc_ground_critical.mod.critical: 0.75 + 1.86 * (level + -1.0) # autogenerated by odsimport
npc_ground_critical.upgrade_time: (7562.25 + 11763.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_ground_critical.metal.cost: 11564.8 + 17989.69 * (level + -1.0) # autogenerated by odsimport
npc_ground_critical.energy.cost: 18551.52 + 28857.93 * (level + -1.0) # autogenerated by odsimport
npc_ground_critical.zetium.cost: 1424.26 + 2215.51 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_ground_critical.scientists.min: (7562.25 + 11763.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_ground_critical.war_points: (6694.08 + 10413.01 * (level + -1.0)) * level # autogenerated by odsimport
npc_ground_critical.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_ground_critical.requirement.npc_space_critical.invert: true
npc_ground_critical.requirement.npc_space_absorption.invert: true
npc_ground_critical.requirement.npc_ground_absorption.invert: true
npc_ground_critical.applies_to: <%= apl_to npc_ground %>

### npc_ground_absorption config ###

# Coordinates in technology tree
npc_ground_absorption.coords: [8, 8]

# Upgrade properties
npc_ground_absorption.max_level: 10 # autogenerated by odsimport
npc_ground_absorption.mod.absorption: 3.46 + 4.57 * (level + -1.0) # autogenerated by odsimport
npc_ground_absorption.upgrade_time: (7562.25 + 11763.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_ground_absorption.metal.cost: 11564.8 + 17989.69 * (level + -1.0) # autogenerated by odsimport
npc_ground_absorption.energy.cost: 18551.52 + 28857.93 * (level + -1.0) # autogenerated by odsimport
npc_ground_absorption.zetium.cost: 1424.26 + 2215.51 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_ground_absorption.scientists.min: (7562.25 + 11763.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
npc_ground_absorption.war_points: (6694.08 + 10413.01 * (level + -1.0)) * level # autogenerated by odsimport
npc_ground_absorption.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
npc_ground_absorption.requirement.npc_space_absorption.invert: true
npc_ground_absorption.requirement.npc_space_critical.invert: true
npc_ground_absorption.requirement.npc_ground_critical.invert: true
npc_ground_absorption.applies_to: <%= apl_to npc_ground %>

# [9, 8] is empty

### gnat config ###

# Coordinates in technology tree
gnat.coords: [0, 9]

# Upgrade properties
gnat.max_level: 9 # autogenerated by odsimport
gnat.upgrade_time: (1719.0 + 3008.25 * (level + -1.0)) / speed # autogenerated by odsimport
gnat.metal.cost: 3002.4 + 5254.2 * (level + -1.0) # autogenerated by odsimport
gnat.energy.cost: 6004.8 + 10508.4 * (level + -1.0) # autogenerated by odsimport
gnat.zetium.cost: 0.0 # autogenerated by odsimport
# Minimum amount of scientists needed
gnat.scientists.min: (1719.0 + 3008.25 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
gnat.war_points: (1626.3 + 2846.03 * (level + -1.0)) * level # autogenerated by odsimport
gnat.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport
gnat.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
gnat.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
gnat.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
gnat.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
gnat.applies_to: <%= apl_to(gnat) %>

### gnat_damage config ###

gnat_damage.name: DamageSpecialization
gnat_damage.group_to: gnat
gnat_damage.group_position: 0

# Upgrade properties
gnat_damage.max_level: 10 # autogenerated by odsimport
gnat_damage.upgrade_time: (1719.0 + 2674.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnat_damage.metal.cost: 3002.4 + 4670.4 * (level + -1.0) # autogenerated by odsimport
gnat_damage.energy.cost: 6004.8 + 9340.8 * (level + -1.0) # autogenerated by odsimport
gnat_damage.zetium.cost: 0.0 # autogenerated by odsimport
gnat_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnat_damage.scientists.min: (1719.0 + 2674.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnat_damage.war_points: (1626.3 + 2529.8 * (level + -1.0)) * level # autogenerated by odsimport
gnat_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnat_damage.requirement.gnat.level: <%= spec_base_tech_req %>
gnat_damage.requirement.gnat_armor.invert: true
gnat_damage.requirement.gnat_critical.invert: true
gnat_damage.requirement.gnat_absorption.invert: true
gnat_damage.applies_to: <%= apl_to(gnat) %>

### gnat_armor config ###

gnat_armor.name: ArmorSpecialization
gnat_armor.group_to: gnat
gnat_armor.group_position: 1

# Upgrade properties
gnat_armor.max_level: 10 # autogenerated by odsimport
gnat_armor.upgrade_time: (1719.0 + 2674.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnat_armor.metal.cost: 3002.4 + 4670.4 * (level + -1.0) # autogenerated by odsimport
gnat_armor.energy.cost: 6004.8 + 9340.8 * (level + -1.0) # autogenerated by odsimport
gnat_armor.zetium.cost: 0.0 # autogenerated by odsimport
gnat_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnat_armor.scientists.min: (1719.0 + 2674.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnat_armor.war_points: (1626.3 + 2529.8 * (level + -1.0)) * level # autogenerated by odsimport
gnat_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnat_armor.requirement.gnat.level: <%= spec_base_tech_req %>
gnat_armor.requirement.gnat_damage.invert: true
gnat_armor.requirement.gnat_critical.invert: true
gnat_armor.requirement.gnat_absorption.invert: true
gnat_armor.applies_to: <%= apl_to(gnat) %>

### gnat_critical config ###

gnat_critical.name: CriticalSpecialization
gnat_critical.group_to: gnat
gnat_critical.group_position: 2

# Upgrade properties
gnat_critical.max_level: 10 # autogenerated by odsimport
gnat_critical.upgrade_time: (1719.0 + 2674.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnat_critical.metal.cost: 3002.4 + 4670.4 * (level + -1.0) # autogenerated by odsimport
gnat_critical.energy.cost: 6004.8 + 9340.8 * (level + -1.0) # autogenerated by odsimport
gnat_critical.zetium.cost: 0.0 # autogenerated by odsimport
gnat_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnat_critical.scientists.min: (1719.0 + 2674.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnat_critical.war_points: (1626.3 + 2529.8 * (level + -1.0)) * level # autogenerated by odsimport
gnat_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnat_critical.requirement.gnat.level: <%= spec_base_tech_req %>
gnat_critical.requirement.gnat_damage.invert: true
gnat_critical.requirement.gnat_armor.invert: true
gnat_critical.requirement.gnat_absorption.invert: true
gnat_critical.applies_to: <%= apl_to(gnat) %>

### gnat_absorption config ###

gnat_absorption.name: AbsorptionSpecialization
gnat_absorption.group_to: gnat
gnat_absorption.group_position: 3

# Upgrade properties
gnat_absorption.max_level: 10 # autogenerated by odsimport
gnat_absorption.upgrade_time: (1719.0 + 2674.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnat_absorption.metal.cost: 3002.4 + 4670.4 * (level + -1.0) # autogenerated by odsimport
gnat_absorption.energy.cost: 6004.8 + 9340.8 * (level + -1.0) # autogenerated by odsimport
gnat_absorption.zetium.cost: 0.0 # autogenerated by odsimport
gnat_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnat_absorption.scientists.min: (1719.0 + 2674.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnat_absorption.war_points: (1626.3 + 2529.8 * (level + -1.0)) * level # autogenerated by odsimport
gnat_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnat_absorption.requirement.gnat.level: <%= spec_base_tech_req %>
gnat_absorption.requirement.gnat_damage.invert: true
gnat_absorption.requirement.gnat_armor.invert: true
gnat_absorption.requirement.gnat_critical.invert: true
gnat_absorption.applies_to: <%= apl_to(gnat) %>

### glancer config ###

# Coordinates in technology tree
glancer.coords: [1, 9]

# Upgrade properties
glancer.max_level: 9 # autogenerated by odsimport
glancer.upgrade_time: (5670.0 + 9922.5 * (level + -1.0)) / speed # autogenerated by odsimport
glancer.metal.cost: 5349.89 + 9362.3 * (level + -1.0) # autogenerated by odsimport
glancer.energy.cost: 10699.78 + 18724.61 * (level + -1.0) # autogenerated by odsimport
glancer.zetium.cost: 234.06 + 409.6 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
glancer.scientists.min: (5670.0 + 9922.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
glancer.war_points: (3049.99 + 5337.49 * (level + -1.0)) * level # autogenerated by odsimport
glancer.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport
glancer.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
glancer.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
glancer.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
glancer.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
glancer.applies_to: <%= apl_to(glancer) %>

### glancer_damage config ###

glancer_damage.name: DamageSpecialization
glancer_damage.group_to: glancer
glancer_damage.group_position: 0

# Upgrade properties
glancer_damage.max_level: 10 # autogenerated by odsimport
glancer_damage.upgrade_time: (5670.0 + 8820.0 * (level + -1.0)) / speed # autogenerated by odsimport
glancer_damage.metal.cost: 5349.89 + 8322.05 * (level + -1.0) # autogenerated by odsimport
glancer_damage.energy.cost: 10699.78 + 16644.1 * (level + -1.0) # autogenerated by odsimport
glancer_damage.zetium.cost: 234.06 + 364.09 * (level + -1.0) # autogenerated by odsimport
glancer_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
glancer_damage.scientists.min: (5670.0 + 8820.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
glancer_damage.war_points: (3049.99 + 4744.43 * (level + -1.0)) * level # autogenerated by odsimport
glancer_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
glancer_damage.requirement.glancer.level: <%= spec_base_tech_req %>
glancer_damage.requirement.glancer_armor.invert: true
glancer_damage.requirement.glancer_critical.invert: true
glancer_damage.requirement.glancer_absorption.invert: true
glancer_damage.applies_to: <%= apl_to(glancer) %>

### glancer_armor config ###

glancer_armor.name: ArmorSpecialization
glancer_armor.group_to: glancer
glancer_armor.group_position: 1

# Upgrade properties
glancer_armor.max_level: 10 # autogenerated by odsimport
glancer_armor.upgrade_time: (5670.0 + 8820.0 * (level + -1.0)) / speed # autogenerated by odsimport
glancer_armor.metal.cost: 5349.89 + 8322.05 * (level + -1.0) # autogenerated by odsimport
glancer_armor.energy.cost: 10699.78 + 16644.1 * (level + -1.0) # autogenerated by odsimport
glancer_armor.zetium.cost: 234.06 + 364.09 * (level + -1.0) # autogenerated by odsimport
glancer_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
glancer_armor.scientists.min: (5670.0 + 8820.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
glancer_armor.war_points: (3049.99 + 4744.43 * (level + -1.0)) * level # autogenerated by odsimport
glancer_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
glancer_armor.requirement.glancer.level: <%= spec_base_tech_req %>
glancer_armor.requirement.glancer_damage.invert: true
glancer_armor.requirement.glancer_critical.invert: true
glancer_armor.requirement.glancer_absorption.invert: true
glancer_armor.applies_to: <%= apl_to(glancer) %>

### glancer_critical config ###

glancer_critical.name: CriticalSpecialization
glancer_critical.group_to: glancer
glancer_critical.group_position: 2

# Upgrade properties
glancer_critical.max_level: 10 # autogenerated by odsimport
glancer_critical.upgrade_time: (5670.0 + 8820.0 * (level + -1.0)) / speed # autogenerated by odsimport
glancer_critical.metal.cost: 5349.89 + 8322.05 * (level + -1.0) # autogenerated by odsimport
glancer_critical.energy.cost: 10699.78 + 16644.1 * (level + -1.0) # autogenerated by odsimport
glancer_critical.zetium.cost: 234.06 + 364.09 * (level + -1.0) # autogenerated by odsimport
glancer_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
glancer_critical.scientists.min: (5670.0 + 8820.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
glancer_critical.war_points: (3049.99 + 4744.43 * (level + -1.0)) * level # autogenerated by odsimport
glancer_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
glancer_critical.requirement.glancer.level: <%= spec_base_tech_req %>
glancer_critical.requirement.glancer_damage.invert: true
glancer_critical.requirement.glancer_armor.invert: true
glancer_critical.requirement.glancer_absorption.invert: true
glancer_critical.applies_to: <%= apl_to(glancer) %>

### glancer_absorption config ###

glancer_absorption.name: AbsorptionSpecialization
glancer_absorption.group_to: glancer
glancer_absorption.group_position: 3

# Upgrade properties
glancer_absorption.max_level: 10 # autogenerated by odsimport
glancer_absorption.upgrade_time: (5670.0 + 8820.0 * (level + -1.0)) / speed # autogenerated by odsimport
glancer_absorption.metal.cost: 5349.89 + 8322.05 * (level + -1.0) # autogenerated by odsimport
glancer_absorption.energy.cost: 10699.78 + 16644.1 * (level + -1.0) # autogenerated by odsimport
glancer_absorption.zetium.cost: 234.06 + 364.09 * (level + -1.0) # autogenerated by odsimport
glancer_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
glancer_absorption.scientists.min: (5670.0 + 8820.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
glancer_absorption.war_points: (3049.99 + 4744.43 * (level + -1.0)) * level # autogenerated by odsimport
glancer_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
glancer_absorption.requirement.glancer.level: <%= spec_base_tech_req %>
glancer_absorption.requirement.glancer_damage.invert: true
glancer_absorption.requirement.glancer_armor.invert: true
glancer_absorption.requirement.glancer_critical.invert: true
glancer_absorption.applies_to: <%= apl_to(glancer) %>

### spudder config ###

# Coordinates in technology tree
spudder.coords: [2, 9]

# Upgrade properties
spudder.max_level: 9 # autogenerated by odsimport
spudder.upgrade_time: (8280.0 + 14490.0 * (level + -1.0)) / speed # autogenerated by odsimport
spudder.metal.cost: 12822.84 + 22439.97 * (level + -1.0) # autogenerated by odsimport
spudder.energy.cost: 19875.4 + 34781.95 * (level + -1.0) # autogenerated by odsimport
spudder.zetium.cost: 1282.28 + 2244.0 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
spudder.scientists.min: (8280.0 + 14490.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
spudder.war_points: (7154.08 + 12519.63 * (level + -1.0)) * level # autogenerated by odsimport
spudder.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport
spudder.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
spudder.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
spudder.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
spudder.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
spudder.applies_to: <%= apl_to(spudder) %>

### spudder_damage config ###

spudder_damage.name: DamageSpecialization
spudder_damage.group_to: spudder
spudder_damage.group_position: 0

# Upgrade properties
spudder_damage.max_level: 10 # autogenerated by odsimport
spudder_damage.upgrade_time: (8280.0 + 12880.0 * (level + -1.0)) / speed # autogenerated by odsimport
spudder_damage.metal.cost: 12822.84 + 19946.64 * (level + -1.0) # autogenerated by odsimport
spudder_damage.energy.cost: 19875.4 + 30917.29 * (level + -1.0) # autogenerated by odsimport
spudder_damage.zetium.cost: 1282.28 + 1994.66 * (level + -1.0) # autogenerated by odsimport
spudder_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
spudder_damage.scientists.min: (8280.0 + 12880.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
spudder_damage.war_points: (7154.08 + 11128.56 * (level + -1.0)) * level # autogenerated by odsimport
spudder_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
spudder_damage.requirement.spudder.level: <%= spec_base_tech_req %>
spudder_damage.requirement.spudder_armor.invert: true
spudder_damage.requirement.spudder_critical.invert: true
spudder_damage.requirement.spudder_absorption.invert: true
spudder_damage.applies_to: <%= apl_to(spudder) %>

### spudder_armor config ###

spudder_armor.name: ArmorSpecialization
spudder_armor.group_to: spudder
spudder_armor.group_position: 1

# Upgrade properties
spudder_armor.max_level: 10 # autogenerated by odsimport
spudder_armor.upgrade_time: (8280.0 + 12880.0 * (level + -1.0)) / speed # autogenerated by odsimport
spudder_armor.metal.cost: 12822.84 + 19946.64 * (level + -1.0) # autogenerated by odsimport
spudder_armor.energy.cost: 19875.4 + 30917.29 * (level + -1.0) # autogenerated by odsimport
spudder_armor.zetium.cost: 1282.28 + 1994.66 * (level + -1.0) # autogenerated by odsimport
spudder_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
spudder_armor.scientists.min: (8280.0 + 12880.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
spudder_armor.war_points: (7154.08 + 11128.56 * (level + -1.0)) * level # autogenerated by odsimport
spudder_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
spudder_armor.requirement.spudder.level: <%= spec_base_tech_req %>
spudder_armor.requirement.spudder_damage.invert: true
spudder_armor.requirement.spudder_critical.invert: true
spudder_armor.requirement.spudder_absorption.invert: true
spudder_armor.applies_to: <%= apl_to(spudder) %>

### spudder_critical config ###

spudder_critical.name: CriticalSpecialization
spudder_critical.group_to: spudder
spudder_critical.group_position: 2

# Upgrade properties
spudder_critical.max_level: 10 # autogenerated by odsimport
spudder_critical.upgrade_time: (8280.0 + 12880.0 * (level + -1.0)) / speed # autogenerated by odsimport
spudder_critical.metal.cost: 12822.84 + 19946.64 * (level + -1.0) # autogenerated by odsimport
spudder_critical.energy.cost: 19875.4 + 30917.29 * (level + -1.0) # autogenerated by odsimport
spudder_critical.zetium.cost: 1282.28 + 1994.66 * (level + -1.0) # autogenerated by odsimport
spudder_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
spudder_critical.scientists.min: (8280.0 + 12880.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
spudder_critical.war_points: (7154.08 + 11128.56 * (level + -1.0)) * level # autogenerated by odsimport
spudder_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
spudder_critical.requirement.spudder.level: <%= spec_base_tech_req %>
spudder_critical.requirement.spudder_damage.invert: true
spudder_critical.requirement.spudder_armor.invert: true
spudder_critical.requirement.spudder_absorption.invert: true
spudder_critical.applies_to: <%= apl_to(spudder) %>

### spudder_absorption config ###

spudder_absorption.name: AbsorptionSpecialization
spudder_absorption.group_to: spudder
spudder_absorption.group_position: 3

# Upgrade properties
spudder_absorption.max_level: 10 # autogenerated by odsimport
spudder_absorption.upgrade_time: (8280.0 + 12880.0 * (level + -1.0)) / speed # autogenerated by odsimport
spudder_absorption.metal.cost: 12822.84 + 19946.64 * (level + -1.0) # autogenerated by odsimport
spudder_absorption.energy.cost: 19875.4 + 30917.29 * (level + -1.0) # autogenerated by odsimport
spudder_absorption.zetium.cost: 1282.28 + 1994.66 * (level + -1.0) # autogenerated by odsimport
spudder_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
spudder_absorption.scientists.min: (8280.0 + 12880.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
spudder_absorption.war_points: (7154.08 + 11128.56 * (level + -1.0)) * level # autogenerated by odsimport
spudder_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
spudder_absorption.requirement.spudder.level: <%= spec_base_tech_req %>
spudder_absorption.requirement.spudder_damage.invert: true
spudder_absorption.requirement.spudder_armor.invert: true
spudder_absorption.requirement.spudder_critical.invert: true
spudder_absorption.applies_to: <%= apl_to(spudder) %>

### gnawer config ###

# Coordinates in technology tree
gnawer.coords: [3, 9]

# Upgrade properties
gnawer.max_level: 9 # autogenerated by odsimport
gnawer.upgrade_time: (14580.0 + 25515.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnawer.metal.cost: 25084.08 + 43897.14 * (level + -1.0) # autogenerated by odsimport
gnawer.energy.cost: 37626.12 + 65845.71 * (level + -1.0) # autogenerated by odsimport
gnawer.zetium.cost: 4180.68 + 7316.19 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnawer.scientists.min: (14580.0 + 25515.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
gnawer.war_points: (14945.93 + 26155.38 * (level + -1.0)) * level # autogenerated by odsimport
gnawer.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport
gnawer.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
gnawer.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
gnawer.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
gnawer.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
gnawer.applies_to: <%= apl_to(gnawer) %>

### gnawer_damage config ###

gnawer_damage.name: DamageSpecialization
gnawer_damage.group_to: gnawer
gnawer_damage.group_position: 0

# Upgrade properties
gnawer_damage.max_level: 10 # autogenerated by odsimport
gnawer_damage.upgrade_time: (14580.0 + 22680.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnawer_damage.metal.cost: 25084.08 + 39019.68 * (level + -1.0) # autogenerated by odsimport
gnawer_damage.energy.cost: 37626.12 + 58529.52 * (level + -1.0) # autogenerated by odsimport
gnawer_damage.zetium.cost: 4180.68 + 6503.28 * (level + -1.0) # autogenerated by odsimport
gnawer_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnawer_damage.scientists.min: (14580.0 + 22680.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnawer_damage.war_points: (14945.93 + 23249.23 * (level + -1.0)) * level # autogenerated by odsimport
gnawer_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnawer_damage.requirement.gnawer.level: <%= spec_base_tech_req %>
gnawer_damage.requirement.gnawer_armor.invert: true
gnawer_damage.requirement.gnawer_critical.invert: true
gnawer_damage.requirement.gnawer_absorption.invert: true
gnawer_damage.applies_to: <%= apl_to(gnawer) %>

### gnawer_armor config ###

gnawer_armor.name: ArmorSpecialization
gnawer_armor.group_to: gnawer
gnawer_armor.group_position: 1

# Upgrade properties
gnawer_armor.max_level: 10 # autogenerated by odsimport
gnawer_armor.upgrade_time: (14580.0 + 22680.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnawer_armor.metal.cost: 25084.08 + 39019.68 * (level + -1.0) # autogenerated by odsimport
gnawer_armor.energy.cost: 37626.12 + 58529.52 * (level + -1.0) # autogenerated by odsimport
gnawer_armor.zetium.cost: 4180.68 + 6503.28 * (level + -1.0) # autogenerated by odsimport
gnawer_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnawer_armor.scientists.min: (14580.0 + 22680.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnawer_armor.war_points: (14945.93 + 23249.23 * (level + -1.0)) * level # autogenerated by odsimport
gnawer_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnawer_armor.requirement.gnawer.level: <%= spec_base_tech_req %>
gnawer_armor.requirement.gnawer_damage.invert: true
gnawer_armor.requirement.gnawer_critical.invert: true
gnawer_armor.requirement.gnawer_absorption.invert: true
gnawer_armor.applies_to: <%= apl_to(gnawer) %>

### gnawer_critical config ###

gnawer_critical.name: CriticalSpecialization
gnawer_critical.group_to: gnawer
gnawer_critical.group_position: 2

# Upgrade properties
gnawer_critical.max_level: 10 # autogenerated by odsimport
gnawer_critical.upgrade_time: (14580.0 + 22680.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnawer_critical.metal.cost: 25084.08 + 39019.68 * (level + -1.0) # autogenerated by odsimport
gnawer_critical.energy.cost: 37626.12 + 58529.52 * (level + -1.0) # autogenerated by odsimport
gnawer_critical.zetium.cost: 4180.68 + 6503.28 * (level + -1.0) # autogenerated by odsimport
gnawer_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnawer_critical.scientists.min: (14580.0 + 22680.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnawer_critical.war_points: (14945.93 + 23249.23 * (level + -1.0)) * level # autogenerated by odsimport
gnawer_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnawer_critical.requirement.gnawer.level: <%= spec_base_tech_req %>
gnawer_critical.requirement.gnawer_damage.invert: true
gnawer_critical.requirement.gnawer_armor.invert: true
gnawer_critical.requirement.gnawer_absorption.invert: true
gnawer_critical.applies_to: <%= apl_to(gnawer) %>

### gnawer_absorption config ###

gnawer_absorption.name: AbsorptionSpecialization
gnawer_absorption.group_to: gnawer
gnawer_absorption.group_position: 3

# Upgrade properties
gnawer_absorption.max_level: 10 # autogenerated by odsimport
gnawer_absorption.upgrade_time: (14580.0 + 22680.0 * (level + -1.0)) / speed # autogenerated by odsimport
gnawer_absorption.metal.cost: 25084.08 + 39019.68 * (level + -1.0) # autogenerated by odsimport
gnawer_absorption.energy.cost: 37626.12 + 58529.52 * (level + -1.0) # autogenerated by odsimport
gnawer_absorption.zetium.cost: 4180.68 + 6503.28 * (level + -1.0) # autogenerated by odsimport
gnawer_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
gnawer_absorption.scientists.min: (14580.0 + 22680.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
gnawer_absorption.war_points: (14945.93 + 23249.23 * (level + -1.0)) * level # autogenerated by odsimport
gnawer_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
gnawer_absorption.requirement.gnawer.level: <%= spec_base_tech_req %>
gnawer_absorption.requirement.gnawer_damage.invert: true
gnawer_absorption.requirement.gnawer_armor.invert: true
gnawer_absorption.requirement.gnawer_critical.invert: true
gnawer_absorption.applies_to: <%= apl_to(gnawer) %>

# [4, 9] is empty

### dirac config ###

# Coordinates in technology tree
dirac.coords: [5, 9]
dirac.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
dirac.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
dirac.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
dirac.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
dirac.mod.speed: 5.67 + 6.79 * (level + -1.0) # autogenerated by odsimport
dirac.applies_to: <%= apl_to dirac %>

# Upgrade properties
dirac.max_level: 9 # autogenerated by odsimport
dirac.upgrade_time: (18380.25 + 32165.44 * (level + -1.0)) / speed # autogenerated by odsimport
dirac.metal.cost: 35840.45 + 62720.79 * (level + -1.0) # autogenerated by odsimport
dirac.energy.cost: 50176.63 + 87809.11 * (level + -1.0) # autogenerated by odsimport
dirac.zetium.cost: 2508.83 + 4390.46 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac.scientists.min: (18380.25 + 32165.44 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac.war_points: (18714.69 + 32750.71 * (level + -1.0)) * level # autogenerated by odsimport
dirac.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport

### dirac_damage config ###

dirac_damage.name: DamageSpecialization
dirac_damage.group_to: dirac
dirac_damage.group_position: 0

# Upgrade properties
dirac_damage.max_level: 10 # autogenerated by odsimport
dirac_damage.upgrade_time: (18380.25 + 28591.5 * (level + -1.0)) / speed # autogenerated by odsimport
dirac_damage.metal.cost: 35840.45 + 55751.82 * (level + -1.0) # autogenerated by odsimport
dirac_damage.energy.cost: 50176.63 + 78052.54 * (level + -1.0) # autogenerated by odsimport
dirac_damage.zetium.cost: 2508.83 + 3902.63 * (level + -1.0) # autogenerated by odsimport
dirac_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac_damage.scientists.min: (18380.25 + 28591.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac_damage.war_points: (18714.69 + 29111.74 * (level + -1.0)) * level # autogenerated by odsimport
dirac_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
dirac_damage.requirement.dirac.level: <%= spec_base_tech_req %>
dirac_damage.requirement.dirac_armor.invert: true
dirac_damage.requirement.dirac_critical.invert: true
dirac_damage.requirement.dirac_absorption.invert: true
dirac_damage.requirement.dirac_speed.invert: true
dirac_damage.applies_to: <%= apl_to(dirac) %>

### dirac_armor config ###

dirac_armor.name: ArmorSpecialization
dirac_armor.group_to: dirac
dirac_armor.group_position: 1

# Upgrade properties
dirac_armor.max_level: 10 # autogenerated by odsimport
dirac_armor.upgrade_time: (18380.25 + 28591.5 * (level + -1.0)) / speed # autogenerated by odsimport
dirac_armor.metal.cost: 35840.45 + 55751.82 * (level + -1.0) # autogenerated by odsimport
dirac_armor.energy.cost: 50176.63 + 78052.54 * (level + -1.0) # autogenerated by odsimport
dirac_armor.zetium.cost: 2508.83 + 3902.63 * (level + -1.0) # autogenerated by odsimport
dirac_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac_armor.scientists.min: (18380.25 + 28591.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac_armor.war_points: (18714.69 + 29111.74 * (level + -1.0)) * level # autogenerated by odsimport
dirac_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
dirac_armor.requirement.dirac.level: <%= spec_base_tech_req %>
dirac_armor.requirement.dirac_damage.invert: true
dirac_armor.requirement.dirac_critical.invert: true
dirac_armor.requirement.dirac_absorption.invert: true
dirac_armor.requirement.dirac_speed.invert: true
dirac_armor.applies_to: <%= apl_to(dirac) %>

### dirac_critical config ###

dirac_critical.name: CriticalSpecialization
dirac_critical.group_to: dirac
dirac_critical.group_position: 2

# Upgrade properties
dirac_critical.max_level: 10 # autogenerated by odsimport
dirac_critical.upgrade_time: (18380.25 + 28591.5 * (level + -1.0)) / speed # autogenerated by odsimport
dirac_critical.metal.cost: 35840.45 + 55751.82 * (level + -1.0) # autogenerated by odsimport
dirac_critical.energy.cost: 50176.63 + 78052.54 * (level + -1.0) # autogenerated by odsimport
dirac_critical.zetium.cost: 2508.83 + 3902.63 * (level + -1.0) # autogenerated by odsimport
dirac_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac_critical.scientists.min: (18380.25 + 28591.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac_critical.war_points: (18714.69 + 29111.74 * (level + -1.0)) * level # autogenerated by odsimport
dirac_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
dirac_critical.requirement.dirac.level: <%= spec_base_tech_req %>
dirac_critical.requirement.dirac_damage.invert: true
dirac_critical.requirement.dirac_armor.invert: true
dirac_critical.requirement.dirac_absorption.invert: true
dirac_critical.requirement.dirac_speed.invert: true
dirac_critical.applies_to: <%= apl_to(dirac) %>

### dirac_absorption config ###

dirac_absorption.name: AbsorptionSpecialization
dirac_absorption.group_to: dirac
dirac_absorption.group_position: 3

# Upgrade properties
dirac_absorption.max_level: 10 # autogenerated by odsimport
dirac_absorption.upgrade_time: (18380.25 + 28591.5 * (level + -1.0)) / speed # autogenerated by odsimport
dirac_absorption.metal.cost: 35840.45 + 55751.82 * (level + -1.0) # autogenerated by odsimport
dirac_absorption.energy.cost: 50176.63 + 78052.54 * (level + -1.0) # autogenerated by odsimport
dirac_absorption.zetium.cost: 2508.83 + 3902.63 * (level + -1.0) # autogenerated by odsimport
dirac_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac_absorption.scientists.min: (18380.25 + 28591.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac_absorption.war_points: (18714.69 + 29111.74 * (level + -1.0)) * level # autogenerated by odsimport
dirac_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
dirac_absorption.requirement.dirac.level: <%= spec_base_tech_req %>
dirac_absorption.requirement.dirac_damage.invert: true
dirac_absorption.requirement.dirac_armor.invert: true
dirac_absorption.requirement.dirac_critical.invert: true
dirac_absorption.requirement.dirac_speed.invert: true
dirac_absorption.applies_to: <%= apl_to(dirac) %>

### dirac_speed config ###

dirac_speed.name: SpeedSpecialization
dirac_speed.group_to: dirac
dirac_speed.group_position: 4

# Upgrade properties
dirac_speed.max_level: 10 # autogenerated by odsimport
dirac_speed.upgrade_time: (18380.25 + 28591.5 * (level + -1.0)) / speed # autogenerated by odsimport
dirac_speed.metal.cost: 35840.45 + 55751.82 * (level + -1.0) # autogenerated by odsimport
dirac_speed.energy.cost: 50176.63 + 78052.54 * (level + -1.0) # autogenerated by odsimport
dirac_speed.zetium.cost: 2508.83 + 3902.63 * (level + -1.0) # autogenerated by odsimport
dirac_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
dirac_speed.scientists.min: (18380.25 + 28591.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
dirac_speed.war_points: (18714.69 + 29111.74 * (level + -1.0)) * level # autogenerated by odsimport
dirac_speed.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
dirac_speed.requirement.dirac.level: <%= spec_base_tech_req %>
dirac_speed.requirement.dirac_damage.invert: true
dirac_speed.requirement.dirac_armor.invert: true
dirac_speed.requirement.dirac_critical.invert: true
dirac_speed.requirement.dirac_absorption.invert: true
dirac_speed.applies_to: <%= apl_to(dirac) %>

### thor config ###

# Coordinates in technology tree
thor.coords: [6, 9]
thor.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
thor.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
thor.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
thor.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
thor.mod.speed: 5.67 + 6.79 * (level + -1.0) # autogenerated by odsimport
thor.applies_to: <%= apl_to thor %>

# Upgrade properties
thor.max_level: 9 # autogenerated by odsimport
thor.upgrade_time: (29479.5 + 51589.13 * (level + -1.0)) / speed # autogenerated by odsimport
thor.metal.cost: 52038.75 + 91067.8 * (level + -1.0) # autogenerated by odsimport
thor.energy.cost: 72053.65 + 126093.88 * (level + -1.0) # autogenerated by odsimport
thor.zetium.cost: 4503.35 + 7880.87 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor.scientists.min: (29479.5 + 51589.13 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor.war_points: (27645.58 + 48379.77 * (level + -1.0)) * level # autogenerated by odsimport
thor.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport

### thor_damage config ###

thor_damage.name: DamageSpecialization
thor_damage.group_to: thor
thor_damage.group_position: 0

# Upgrade properties
thor_damage.max_level: 10 # autogenerated by odsimport
thor_damage.upgrade_time: (29479.5 + 45857.0 * (level + -1.0)) / speed # autogenerated by odsimport
thor_damage.metal.cost: 52038.75 + 80949.16 * (level + -1.0) # autogenerated by odsimport
thor_damage.energy.cost: 72053.65 + 112083.45 * (level + -1.0) # autogenerated by odsimport
thor_damage.zetium.cost: 4503.35 + 7005.22 * (level + -1.0) # autogenerated by odsimport
thor_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor_damage.scientists.min: (29479.5 + 45857.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor_damage.war_points: (27645.58 + 43004.24 * (level + -1.0)) * level # autogenerated by odsimport
thor_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
thor_damage.requirement.thor.level: <%= spec_base_tech_req %>
thor_damage.requirement.thor_armor.invert: true
thor_damage.requirement.thor_critical.invert: true
thor_damage.requirement.thor_absorption.invert: true
thor_damage.requirement.thor_speed.invert: true
thor_damage.applies_to: <%= apl_to(thor) %>

### thor_armor config ###

thor_armor.name: ArmorSpecialization
thor_armor.group_to: thor
thor_armor.group_position: 1

# Upgrade properties
thor_armor.max_level: 10 # autogenerated by odsimport
thor_armor.upgrade_time: (29479.5 + 45857.0 * (level + -1.0)) / speed # autogenerated by odsimport
thor_armor.metal.cost: 52038.75 + 80949.16 * (level + -1.0) # autogenerated by odsimport
thor_armor.energy.cost: 72053.65 + 112083.45 * (level + -1.0) # autogenerated by odsimport
thor_armor.zetium.cost: 4503.35 + 7005.22 * (level + -1.0) # autogenerated by odsimport
thor_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor_armor.scientists.min: (29479.5 + 45857.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor_armor.war_points: (27645.58 + 43004.24 * (level + -1.0)) * level # autogenerated by odsimport
thor_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
thor_armor.requirement.thor.level: <%= spec_base_tech_req %>
thor_armor.requirement.thor_damage.invert: true
thor_armor.requirement.thor_critical.invert: true
thor_armor.requirement.thor_absorption.invert: true
thor_armor.requirement.thor_speed.invert: true
thor_armor.applies_to: <%= apl_to(thor) %>

### thor_critical config ###

thor_critical.name: CriticalSpecialization
thor_critical.group_to: thor
thor_critical.group_position: 2

# Upgrade properties
thor_critical.max_level: 10 # autogenerated by odsimport
thor_critical.upgrade_time: (29479.5 + 45857.0 * (level + -1.0)) / speed # autogenerated by odsimport
thor_critical.metal.cost: 52038.75 + 80949.16 * (level + -1.0) # autogenerated by odsimport
thor_critical.energy.cost: 72053.65 + 112083.45 * (level + -1.0) # autogenerated by odsimport
thor_critical.zetium.cost: 4503.35 + 7005.22 * (level + -1.0) # autogenerated by odsimport
thor_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor_critical.scientists.min: (29479.5 + 45857.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor_critical.war_points: (27645.58 + 43004.24 * (level + -1.0)) * level # autogenerated by odsimport
thor_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
thor_critical.requirement.thor.level: <%= spec_base_tech_req %>
thor_critical.requirement.thor_damage.invert: true
thor_critical.requirement.thor_armor.invert: true
thor_critical.requirement.thor_absorption.invert: true
thor_critical.requirement.thor_speed.invert: true
thor_critical.applies_to: <%= apl_to(thor) %>

### thor_absorption config ###

thor_absorption.name: AbsorptionSpecialization
thor_absorption.group_to: thor
thor_absorption.group_position: 3

# Upgrade properties
thor_absorption.max_level: 10 # autogenerated by odsimport
thor_absorption.upgrade_time: (29479.5 + 45857.0 * (level + -1.0)) / speed # autogenerated by odsimport
thor_absorption.metal.cost: 52038.75 + 80949.16 * (level + -1.0) # autogenerated by odsimport
thor_absorption.energy.cost: 72053.65 + 112083.45 * (level + -1.0) # autogenerated by odsimport
thor_absorption.zetium.cost: 4503.35 + 7005.22 * (level + -1.0) # autogenerated by odsimport
thor_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor_absorption.scientists.min: (29479.5 + 45857.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor_absorption.war_points: (27645.58 + 43004.24 * (level + -1.0)) * level # autogenerated by odsimport
thor_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
thor_absorption.requirement.thor.level: <%= spec_base_tech_req %>
thor_absorption.requirement.thor_damage.invert: true
thor_absorption.requirement.thor_armor.invert: true
thor_absorption.requirement.thor_critical.invert: true
thor_absorption.requirement.thor_speed.invert: true
thor_absorption.applies_to: <%= apl_to(thor) %>

### thor_speed config ###

thor_speed.name: SpeedSpecialization
thor_speed.group_to: thor
thor_speed.group_position: 4

# Upgrade properties
thor_speed.max_level: 10 # autogenerated by odsimport
thor_speed.upgrade_time: (29479.5 + 45857.0 * (level + -1.0)) / speed # autogenerated by odsimport
thor_speed.metal.cost: 52038.75 + 80949.16 * (level + -1.0) # autogenerated by odsimport
thor_speed.energy.cost: 72053.65 + 112083.45 * (level + -1.0) # autogenerated by odsimport
thor_speed.zetium.cost: 4503.35 + 7005.22 * (level + -1.0) # autogenerated by odsimport
thor_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
thor_speed.scientists.min: (29479.5 + 45857.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
thor_speed.war_points: (27645.58 + 43004.24 * (level + -1.0)) * level # autogenerated by odsimport
thor_speed.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
thor_speed.requirement.thor.level: <%= spec_base_tech_req %>
thor_speed.requirement.thor_damage.invert: true
thor_speed.requirement.thor_armor.invert: true
thor_speed.requirement.thor_critical.invert: true
thor_speed.requirement.thor_absorption.invert: true
thor_speed.applies_to: <%= apl_to(thor) %>

### demosis config ###

# Coordinates in technology tree
demosis.coords: [7, 9]
demosis.mod.armor: 1.43 + 2.56 * (level + -1.0) # autogenerated by odsimport
demosis.mod.damage: 2.11 + 3.24 * (level + -1.0) # autogenerated by odsimport
demosis.mod.critical: 0.11 + 1.24 * (level + -1.0) # autogenerated by odsimport
demosis.mod.absorption: 2.3 + 3.42 * (level + -1.0) # autogenerated by odsimport
demosis.mod.speed: 5.67 + 6.79 * (level + -1.0) # autogenerated by odsimport
demosis.applies_to: <%= apl_to demosis %>

# Upgrade properties
demosis.max_level: 9 # autogenerated by odsimport
demosis.upgrade_time: (211792.5 + 370636.88 * (level + -1.0)) / speed # autogenerated by odsimport
demosis.metal.cost: 97413.3 + 170473.28 * (level + -1.0) # autogenerated by odsimport
demosis.energy.cost: 146119.95 + 255709.91 * (level + -1.0) # autogenerated by odsimport
demosis.zetium.cost: 19482.66 + 34094.66 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis.scientists.min: (211792.5 + 370636.88 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis.war_points: (60152.71 + 105267.25 * (level + -1.0)) * level # autogenerated by odsimport
demosis.pulsars.required: 1.0 + 0.63 * (level + -1.0) # autogenerated by odsimport

### demosis_damage config ###

demosis_damage.name: DamageSpecialization
demosis_damage.group_to: demosis
demosis_damage.group_position: 0

# Upgrade properties
demosis_damage.max_level: 10 # autogenerated by odsimport
demosis_damage.upgrade_time: (211792.5 + 329455.0 * (level + -1.0)) / speed # autogenerated by odsimport
demosis_damage.metal.cost: 97413.3 + 151531.8 * (level + -1.0) # autogenerated by odsimport
demosis_damage.energy.cost: 146119.95 + 227297.7 * (level + -1.0) # autogenerated by odsimport
demosis_damage.zetium.cost: 19482.66 + 30306.36 * (level + -1.0) # autogenerated by odsimport
demosis_damage.mod.damage: 5.3 + 6.41 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis_damage.scientists.min: (211792.5 + 329455.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis_damage.war_points: (60152.71 + 93570.89 * (level + -1.0)) * level # autogenerated by odsimport
demosis_damage.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
demosis_damage.requirement.demosis.level: <%= spec_base_tech_req %>
demosis_damage.requirement.demosis_armor.invert: true
demosis_damage.requirement.demosis_critical.invert: true
demosis_damage.requirement.demosis_absorption.invert: true
demosis_damage.requirement.demosis_speed.invert: true
demosis_damage.applies_to: <%= apl_to(demosis) %>

### demosis_armor config ###

demosis_armor.name: ArmorSpecialization
demosis_armor.group_to: demosis
demosis_armor.group_position: 1

# Upgrade properties
demosis_armor.max_level: 10 # autogenerated by odsimport
demosis_armor.upgrade_time: (211792.5 + 329455.0 * (level + -1.0)) / speed # autogenerated by odsimport
demosis_armor.metal.cost: 97413.3 + 151531.8 * (level + -1.0) # autogenerated by odsimport
demosis_armor.energy.cost: 146119.95 + 227297.7 * (level + -1.0) # autogenerated by odsimport
demosis_armor.zetium.cost: 19482.66 + 30306.36 * (level + -1.0) # autogenerated by odsimport
demosis_armor.mod.armor: 2.87 + 3.98 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis_armor.scientists.min: (211792.5 + 329455.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis_armor.war_points: (60152.71 + 93570.89 * (level + -1.0)) * level # autogenerated by odsimport
demosis_armor.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
demosis_armor.requirement.demosis.level: <%= spec_base_tech_req %>
demosis_armor.requirement.demosis_damage.invert: true
demosis_armor.requirement.demosis_critical.invert: true
demosis_armor.requirement.demosis_absorption.invert: true
demosis_armor.requirement.demosis_speed.invert: true
demosis_armor.applies_to: <%= apl_to(demosis) %>

### demosis_critical config ###

demosis_critical.name: CriticalSpecialization
demosis_critical.group_to: demosis
demosis_critical.group_position: 2

# Upgrade properties
demosis_critical.max_level: 10 # autogenerated by odsimport
demosis_critical.upgrade_time: (211792.5 + 329455.0 * (level + -1.0)) / speed # autogenerated by odsimport
demosis_critical.metal.cost: 97413.3 + 151531.8 * (level + -1.0) # autogenerated by odsimport
demosis_critical.energy.cost: 146119.95 + 227297.7 * (level + -1.0) # autogenerated by odsimport
demosis_critical.zetium.cost: 19482.66 + 30306.36 * (level + -1.0) # autogenerated by odsimport
demosis_critical.mod.critical: 1.25 + 2.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis_critical.scientists.min: (211792.5 + 329455.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis_critical.war_points: (60152.71 + 93570.89 * (level + -1.0)) * level # autogenerated by odsimport
demosis_critical.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
demosis_critical.requirement.demosis.level: <%= spec_base_tech_req %>
demosis_critical.requirement.demosis_damage.invert: true
demosis_critical.requirement.demosis_armor.invert: true
demosis_critical.requirement.demosis_absorption.invert: true
demosis_critical.requirement.demosis_speed.invert: true
demosis_critical.applies_to: <%= apl_to(demosis) %>

### demosis_absorption config ###

demosis_absorption.name: AbsorptionSpecialization
demosis_absorption.group_to: demosis
demosis_absorption.group_position: 3

# Upgrade properties
demosis_absorption.max_level: 10 # autogenerated by odsimport
demosis_absorption.upgrade_time: (211792.5 + 329455.0 * (level + -1.0)) / speed # autogenerated by odsimport
demosis_absorption.metal.cost: 97413.3 + 151531.8 * (level + -1.0) # autogenerated by odsimport
demosis_absorption.energy.cost: 146119.95 + 227297.7 * (level + -1.0) # autogenerated by odsimport
demosis_absorption.zetium.cost: 19482.66 + 30306.36 * (level + -1.0) # autogenerated by odsimport
demosis_absorption.mod.absorption: 4.25 + 5.36 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis_absorption.scientists.min: (211792.5 + 329455.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis_absorption.war_points: (60152.71 + 93570.89 * (level + -1.0)) * level # autogenerated by odsimport
demosis_absorption.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
demosis_absorption.requirement.demosis.level: <%= spec_base_tech_req %>
demosis_absorption.requirement.demosis_damage.invert: true
demosis_absorption.requirement.demosis_armor.invert: true
demosis_absorption.requirement.demosis_critical.invert: true
demosis_absorption.requirement.demosis_speed.invert: true
demosis_absorption.applies_to: <%= apl_to(demosis) %>

### demosis_speed config ###

demosis_speed.name: SpeedSpecialization
demosis_speed.group_to: demosis
demosis_speed.group_position: 4

# Upgrade properties
demosis_speed.max_level: 10 # autogenerated by odsimport
demosis_speed.upgrade_time: (211792.5 + 329455.0 * (level + -1.0)) / speed # autogenerated by odsimport
demosis_speed.metal.cost: 97413.3 + 151531.8 * (level + -1.0) # autogenerated by odsimport
demosis_speed.energy.cost: 146119.95 + 227297.7 * (level + -1.0) # autogenerated by odsimport
demosis_speed.zetium.cost: 19482.66 + 30306.36 * (level + -1.0) # autogenerated by odsimport
demosis_speed.mod.speed: 12.5 + 13.61 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
demosis_speed.scientists.min: (211792.5 + 329455.0 * (level + -1.0)) * 0.0033 # autogenerated by odsimport

# Technological requirements
demosis_speed.war_points: (60152.71 + 93570.89 * (level + -1.0)) * level # autogenerated by odsimport
demosis_speed.pulsars.required: 1.0 + 0.56 * (level + -1.0) # autogenerated by odsimport
demosis_speed.requirement.demosis.level: <%= spec_base_tech_req %>
demosis_speed.requirement.demosis_damage.invert: true
demosis_speed.requirement.demosis_armor.invert: true
demosis_speed.requirement.demosis_critical.invert: true
demosis_speed.requirement.demosis_absorption.invert: true
demosis_speed.applies_to: <%= apl_to(demosis) %>

### npc_light_flight config ###

# Coordinates in technology tree
npc_light_flight.coords: [8, 9]

# Upgrade properties
npc_light_flight.max_level: 10 # autogenerated by odsimport
npc_light_flight.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_light_flight.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_light_flight.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_light_flight.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_light_flight.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
npc_light_flight.applies_to: <%= apl_to npc_light_space %>

# How much % does it decrease flight time?
npc_light_flight.mod.speed: 9.5 + 10.61 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
npc_light_flight.requirement.npc_heavy_flight.invert: true
npc_light_flight.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_light_flight.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport

### npc_heavy_flight config ###

# Coordinates in technology tree
npc_heavy_flight.coords: [9, 9]

# Upgrade properties
npc_heavy_flight.max_level: 10 # autogenerated by odsimport
npc_heavy_flight.upgrade_time: (86550.75 + 134634.5 * (level + -1.0)) / speed # autogenerated by odsimport
npc_heavy_flight.metal.cost: 61764.17 + 96077.59 * (level + -1.0) # autogenerated by odsimport
npc_heavy_flight.energy.cost: 89450.08 + 139144.56 * (level + -1.0) # autogenerated by odsimport
npc_heavy_flight.zetium.cost: 8831.61 + 13738.07 * (level + -1.0) # autogenerated by odsimport
# Minimum amount of scientists needed
npc_heavy_flight.scientists.min: (86550.75 + 134634.5 * (level + -1.0)) * 0.0033 # autogenerated by odsimport
npc_heavy_flight.applies_to: <%= apl_to npc_heavy_space %>

# How much % does it decrease flight time?
npc_heavy_flight.mod.speed: 9.5 + 10.61 * (level + -1.0) # autogenerated by odsimport

# Technological requirements
npc_heavy_flight.requirement.npc_light_flight.invert: true
npc_heavy_flight.war_points: (35504.33 + 55228.96 * (level + -1.0)) * level # autogenerated by odsimport
npc_heavy_flight.pulsars.required: 1.0 + 0.67 * (level + -1.0) # autogenerated by odsimport
