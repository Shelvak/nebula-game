<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:solarsystem="components.gameobjects.solarsystem.*"
                xmlns:base="components.base.*"
                minHeight="60" minWidth="50" xmlns:battle="components.battle.*">
   
   <fx:Declarations>
      <mx:NumberFormatter id="numFmt" precision="{PRECISION}" rounding="none" useThousandsSeparator="false"/> 
   </fx:Declarations>
   
   <fx:Script>
      <![CDATA[
         import config.Config;

         import models.ModelLocator;

         import models.planet.MPlanet;

         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         
         import utils.NumberUtil;
         
         
         private static const PRECISION:int = 2;
         
         
         private function format(number:Number) : String
         {
            return numFmt.format(number);
         }

         [Bindable]
         private var ML: ModelLocator = ModelLocator.getInstance();
         
         private function getResourceLabelStyle(currentStock:Number, maxStock:Number) : String
         {
            return NumberUtil.lessThan(currentStock, maxStock, Math.pow(0.1, PRECISION)) ? null : "full";            
         }
      ]]>
   </fx:Script>
   
   <s:states>
      <s:State name="normal" />            
      <s:State name="hovered" />
      <s:State name="normalAndShowsCaret"/>
      <s:State name="hoveredAndShowsCaret"/>
   </s:states>
   
   <s:Rect left="0" right="0" top="0" bottom="0">
      <s:fill>
         <s:SolidColor 
            color.normal="{getStyle('contentBackgroundColor')}"
            color.normalAndShowsCaret="{getStyle('contentBackgroundColor')}"
            color.hovered="{getStyle('rollOverColor')}"	
            color.hoveredAndShowsCaret="{getStyle('rollOverColor')}"/>
      </s:fill>
   </s:Rect>
   
   <!-- image -->
   <solarsystem:SSObjectImage left="5" verticalCenter="0" width="60" height="60" model="{data}"/>
   <s:Group left="70" right="5" top="5" bottom="5">
      <s:layout>
         <s:VerticalLayout gap="2" horizontalAlign="left"/>
      </s:layout>
      <!-- name -->
      <s:Label text="{MSSObject(data).name}" styleName="h3"/>
      <base:ImageAndLabel type="{ResourceType.METAL}"
                          textToDisplay="{format(MSSObject(data).metal.currentStock)} / {format(MSSObject(data).metal.maxStock)}"
                          labelStyleName="{getResourceLabelStyle(MSSObject(data).metal.currentStock, MSSObject(data).metal.maxStock)}"/>
      <base:ImageAndLabel type="{ResourceType.ENERGY}" 
                          textToDisplay="{format(MSSObject(data).energy.currentStock)} / {format(MSSObject(data).energy.maxStock)}"
                          labelStyleName="{getResourceLabelStyle(MSSObject(data).energy.currentStock, MSSObject(data).energy.maxStock)}"/>
      <base:ImageAndLabel type="{ResourceType.ZETIUM}"
                          textToDisplay="{format(MSSObject(data).zetium.currentStock)} / {format(MSSObject(data).zetium.maxStock)}"
                          labelStyleName="{getResourceLabelStyle(MSSObject(data).zetium.currentStock, MSSObject(data).zetium.maxStock)}"/>
      <base:ImageAndLabel type="{ResourceType.RAID_TIME}"
        textToDisplay="{MSSObject(data).raidTime}"
        visible="{MPlanet.hasRaiders(
          MSSObject(data).apocalypseWillBeStartedBeforeRaid
               ? 0 : MSSObject(data).raidArg,
          MSSObject(data).nextRaidAt,
          MSSObject(data).inBattleground || MSSObject(data).inMiniBattleground,
          ML.latestGalaxy.apocalypseStartEvent
        )}"/>
   </s:Group>
   
</s:ItemRenderer>
