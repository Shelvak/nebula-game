<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    height="100%" width="100%" 
                    creationComplete="creationHandler(event)" 
                    xmlns:buildingselectedsidebar="components.buildingselectedsidebar.*" 
                    xmlns:components="utils.components.*" 
                    xmlns:buildingsidebar="components.buildingsidebar.*">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.credits.AccelerateSelector;
         import components.credits.ConfirmCredsLabel;
         import components.popups.ActionConfirmationPopup;
         import components.popups.ErrorPopup;
         import components.popups.WaitingCredsPopup;
         import components.skins.ButtonSkin;
         import components.skins.CreditButtonSkin;
         import components.skins.RedButtonSkin;
         
         import config.Config;
         
         import controllers.GlobalFlags;
         import controllers.Messenger;
         import controllers.buildings.BuildingsCommand;
         import controllers.constructionqueues.ConstructionQueuesCommand;
         import controllers.objects.ObjectClass;
         import controllers.planets.PlanetsCommand;
         import controllers.screens.SidebarScreensSwitch;
         import controllers.ui.NavigationController;
         
         import flashx.textLayout.elements.TextFlow;
         
         import globalevents.GBuildingEvent;
         import globalevents.GCreditEvent;
         import globalevents.GPlanetEvent;
         import globalevents.GResourcesEvent;
         import globalevents.GlobalEvent;
         
         import models.Owner;
         import models.building.Building;
         import models.building.BuildingType;
         import models.building.events.BuildingEvent;
         import models.constructionqueueentry.ConstructionQueueEntry;
         import models.parts.events.UpgradeEvent;
         import models.planet.MBoost;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.resource.ResourcesAmount;
         import models.solarsystem.MSSObject;
         import models.unit.Unit;
         
         import mx.core.ScrollPolicy;
         import mx.events.DragEvent;
         import mx.events.FlexEvent;
         import mx.managers.DragManager;
         
         import spark.utils.TextFlowUtil;
         
         import utils.DateUtil;
         import utils.ModelUtil;
         import utils.NumberUtil;
         import utils.UrlNavigate;
         import utils.assets.AssetNames;
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         private static const PRECISION: int = 1;
         
         [Bindable]
         private var _selectedModel: Building;
         
         [Bindable]
         private var metalCost: Number;
         
         [Bindable]
         private var energyCost: Number;
         
         [Bindable]
         private var zetiumCost: Number;
         
         [Bindable]
         private var timeCost: String;
         
         [Bindable]
         private var canBeUpgraded: Boolean = false;
         
         [Bindable]
         private var upgradePending: Boolean = false;
         
         public function get selectedModel(): Building
         {
            return _selectedModel;
         }
         
         /**
          * how many seconds are left to fulfill resources needs for building
          **/
         [Bindable]
         private var resLeft: int = 0;
         
         [Bindable]
         private var resLeftString: String = '';
         
         [Bindable]
         private var enoughStorage: Boolean = true;
         [Bindable]
         private var missingStorageString: String = '';
         
         private function calculateResLeft(): void
         {
            var planet:MSSObject = ML.latestPlanet.ssObject;
            missingStorageString = Resource.getMissingStoragesString(planet,
               metalCost, energyCost, zetiumCost);
            enoughStorage = (missingStorageString == ''?true:false);
            resLeft = Resource.getTimeToReachResources
               (planet.metal, planet.energy, planet.zetium, 
                  metalCost, energyCost, zetiumCost);
            resLeftString = getStringFromSeconds(resLeft);
         }
         
         protected function creationHandler(e: Event): void
         {
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshPriceOrientatedProperties);
            EventBroker.subscribe(GPlanetEvent.BUILDINGS_CHANGE, refreshConstructor);
            EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
         }
         
         [Bindable]
         private var bonusTime: String = '';
         
         private function refreshBonusTime(e: GlobalEvent): void
         {
            if (_selectedModel.cooldownEndsAt)
            {
               bonusTime = DateUtil.secondsToHumanString((_selectedModel.cooldownEndsAt.time - 
                  new Date().time)/1000);
            }
         }
         
         private function reset(e: GlobalEvent): void
         {
            upgradePending = false;
         }
         
         public function refreshUpgradeState(e: Event = null): void
         {
            if (_selectedModel != null)
            {
               var planet:MSSObject = ML.latestPlanet.ssObject;
               canBeUpgraded = _selectedModel.upgradePart.enoughResourcesForNextLevel(planet);
               calculateResLeft();
               if (canBeUpgraded)
               {
                  resLeft = 0;
                  resLeftString = getStringFromSeconds(resLeft);
               }
            }
         }
         
         private function refreshPriceOrientatedProperties(e: Event = null): void
         {
            if (_selectedModel != null && !_selectedModel.npc)
            {
               recalculateCosts();
               refreshUpgradeState();
            }
         }
         
         public function set selectedModel(value: Building): void
         {
            constructable = null;
            resource = null;
            if (_selectedModel != value)
            {
               if (_selectedModel != null)
               {
                  _selectedModel.removeEventListener(
                     UpgradeEvent.LEVEL_CHANGE, 
                     refreshPriceOrientatedProperties
                  );
                  if (_selectedModel.type != BuildingType.MOTHERSHIP &&
                     !_selectedModel.npc)
                  {
                     GlobalEvent.unsubscribe_TIMED_UPDATE(global_timedUpdateHandler);
                  }
                  if (_selectedModel.type == BuildingType.NPC_HALL || _selectedModel.unitBonus != null)
                  {
                     EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, refreshBonusTime);
                  }
                  if (_selectedModel.isGhost)
                  {
                     constructor.removeEventListener(BuildingEvent.QUERY_CHANGE, cancelDrag);
                     for each (var queueEntry: ConstructionQueueEntry in constructor.constructionQueueEntries)
                     {
                        queueEntry.selected = false; 
                     }
                  }
               }
               _selectedModel = value;
               if (_selectedModel != null)
               {
                  _selectedModel.addEventListener(
                     UpgradeEvent.LEVEL_CHANGE,
                     refreshPriceOrientatedProperties
                  );
                  if (_selectedModel.type != BuildingType.MOTHERSHIP)
                  {
                     if (_selectedModel.type != BuildingType.HQ)
                     {
                        function getResource(res: String): void
                        {
                           if (_selectedModel[res+'Rate'] > 0 
                              || _selectedModel[res+'Storage'] > 0)
                           {
                              resource = Resource(ML.latestPlanet.ssObject[res]);
                           }
                        }
                        getResource(ResourceType.METAL);
                        getResource(ResourceType.ENERGY);
                        getResource(ResourceType.ZETIUM);
                     }
                     if (!_selectedModel.npc)
                     {
                        GlobalEvent.subscribe_TIMED_UPDATE(global_timedUpdateHandler);
                        refreshDestructProperties();
                     }
                  }
                  if (_selectedModel.type == BuildingType.NPC_HALL || _selectedModel.unitBonus != null)
                  {
                     EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshBonusTime);
                  }
                  Messenger.show(Localizer.string('BuildingSelectedSidebar', 'message.pressOnEmpty'));
               }
               else
               {
                  Messenger.hide();
               }
            }
            refreshPriceOrientatedProperties();
            refreshConstructor();
            if (_selectedModel.isGhost)
            {
               constructor.addEventListener(BuildingEvent.QUERY_CHANGE, cancelDrag);
            }
         }
         
         private function global_timedUpdateHandler(e: GlobalEvent): void
         {
            refreshDestructProperties();
         }
         
         
         protected function queueList_dragStartHandler(event:DragEvent):void
         {
            queueList.dropEnabled = true;
            queueList.dragMoveEnabled = true;
         }
         
         private function cancelDrag(e: BuildingEvent): void
         {
            queueList.dropEnabled = false;
            queueList.dragMoveEnabled = false;               
            DragManager.acceptDragDrop(null);
            queueList.layout.hideDropIndicator();
            DragManager.showFeedback(DragManager.NONE);
            queueList.drawFocus(false);
         }
         
         protected function recalculateCosts(): void
         {
            var resources:ResourcesAmount = _selectedModel.upgradePart.resourcesNeededForNextLevel();
            metalCost = resources.metal;
            energyCost = resources.energy;
            zetiumCost = resources.zetium;
            timeCost = DateUtil.secondsToHumanString(_selectedModel.upgradePart.timeNeededForNextLevel());
         }
         
         private function removeUpgradePending(e: GBuildingEvent): void
         {
            upgradePending = false;
            EventBroker.unsubscribe(GBuildingEvent.UPGRADE_APPROVED, removeUpgradePending);
         }
         
         protected function upgrade_clickHandler(event:MouseEvent):void
         {
            upgradePending = true;
            EventBroker.subscribe(GBuildingEvent.UPGRADE_APPROVED, removeUpgradePending);
            new BuildingsCommand(
               BuildingsCommand.UPGRADE,
               {id: _selectedModel.id}
            ).dispatch ();
         }
         
         
         protected function infoButton_clickHandler(event:MouseEvent):void
         {
            ML.infoModel = _selectedModel;
            NavigationController.getInstance().showInfo();
         }
         
         
         protected function activate_clickHandler(event:MouseEvent):void
         {
            if (_selectedModel.state == Building.ACTIVE)
            {
               new BuildingsCommand(BuildingsCommand.DEACTIVATE, _selectedModel).dispatch ();
            }
            else if (_selectedModel.state == Building.INACTIVE)
            {
               new BuildingsCommand(BuildingsCommand.ACTIVATE, _selectedModel).dispatch ();
            }
         }
         
         private function getStringFromSeconds(seconds: int): String
         {
            return DateUtil.secondsToHumanString(seconds);
         }
         
         private var NC: NavigationController = NavigationController.getInstance();
         
         protected function attack_clickHandler(event:MouseEvent):void
         {
            NC.showUnits(Collections.filter(ML.latestPlanet.getActiveGroundUnits(Owner.PLAYER), function(item: Unit): Boolean
            {
               return item.hasGuns;
            }), ML.latestPlanet.toLocation(), _selectedModel);
         }
         
         private function refreshConstructor(e: Event = null): void
         {
            if (_selectedModel)
            {
               if (_selectedModel.isGhost)
               {
                  constructor = ML.latestPlanet.getBuildingById(_selectedModel.constructorId);
               }
               else if (_selectedModel.constructableType != null)
               {
                  constructor = _selectedModel;
               }
               else
               {
                  constructor = null;
               }
               if (constructor)
               {
                  if (ModelUtil.getModelClass(constructor.constructableType) == ObjectClass.UNIT)
                  {
                     constructable = ML.latestPlanet.getUnitById(constructor.constructableId);
                  }
                  else
                  {
                     constructable = ML.latestPlanet.getBuildingById(constructor.constructableId);
                  }
                  if (_selectedModel.isGhost)
                  {
                     for each (var queueEntry: ConstructionQueueEntry in constructor.constructionQueueEntries)
                     {
                        if ((_selectedModel.x == queueEntry.params.x) && (_selectedModel.y == queueEntry.params.y))
                        {
                           queueEntry.selected = true;
                        }
                        else
                        {
                           queueEntry.selected = false;
                        }
                     }
                  }
               }
            }
         }
         
         [Bindable]
         private var constructable: * = null;
         
         [Bindable]
         private var constructor: Building = null;
         
         private function restoreSelection(e: GBuildingEvent): void
         {
            EventBroker.unsubscribe(GBuildingEvent.QUEUE_APROVED, restoreSelection);
            refreshConstructor();
         }
         
         protected function queueList_dragCompleteHandler(event:DragEvent):void
         {
            if (queueList.dragMoveEnabled)
            {
               var tempElement: ConstructionQueueEntry = (event.dragInitiator as List).selectedItems[0] as ConstructionQueueEntry;
               if (constructor.constructionQueueEntries.getItemIndex(tempElement) != 
                  tempElement.position)
               {
                  EventBroker.subscribe(GBuildingEvent.QUEUE_APROVED, restoreSelection);
                  var newPosition: int = tempElement.position> constructor.constructionQueueEntries.getItemIndex(tempElement)? 
                     constructor.constructionQueueEntries.getItemIndex(tempElement): 
                     constructor.constructionQueueEntries.getItemIndex(tempElement) + 1;
                  new ConstructionQueuesCommand(
                     ConstructionQueuesCommand.MOVE,
                     {id: tempElement.id,
                        position: newPosition}
                  ).dispatch ();
               }
            }
         }
         
         private function refreshDestructProperties(): void
         {
            if (totalCooldown == 0)
            {
               totalCooldown = Config.getBuildingSelfDestructCooldown();
               totalDestructTimeLbl = Localizer.string('BuildingSelectedSidebar', 'destructCooldown.total', 
                  [DateUtil.secondsToHumanString(totalCooldown)]);
            }
            if (canDestroyBuilding != ML.latestPlanet.ssObject.canDestroyBuilding)
            {
               canDestroyBuilding = ML.latestPlanet.ssObject.canDestroyBuilding;
            }
            if (canDestroyBuilding)
            {
               destructRemainingTime = '';
            }
            else
            {
               destructRemainingTime = DateUtil.secondsToHumanString(int(
                  (ML.latestPlanet.ssObject.canDestroyBuildingAt.time - new Date().time)/1000));
            }
         }
         
         [Bindable]
         private var canDestroyBuilding: Boolean = false;
         
         [Bindable]
         private var totalCooldown: int = 0;
         
         [Bindable]
         private var totalDestructTimeLbl: String = '';
         [Bindable]
         private var destructRemainingTime: String = '';
         
         protected function selfDestruct_clickHandler(event:MouseEvent):void
         {              
            if (canDestroyBuilding)
            {
               var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
               popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
               popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
               var lbl: Label = new Label();
               lbl.minWidth = 300;
               lbl.text = Localizer.string('Popups', 'message.selfDestruct', [_selectedModel.name]);
               popUp.addElement(lbl);
               popUp.title = Localizer.string('Popups', 'title.selfDestruct');
               popUp.confirmButtonClickHandler = function (button: Button = null): void
               {
                  new BuildingsCommand(BuildingsCommand.SELF_DESTRUCT, {'model': _selectedModel,
                     'withCreds': false}).dispatch();
               };
               popUp.show();
            }
            else
            {
               var confirmPopUp: ActionConfirmationPopup = new ActionConfirmationPopup();
               var confirmLabel: ConfirmCredsLabel = new ConfirmCredsLabel();
               confirmLabel.popUp = confirmPopUp;
               var destCreds: int = Config.getDestructCredits();
               confirmLabel.credsRequired = destCreds;
               confirmLabel.textFlow = TextFlowUtil.importFromString(
                  Localizer.string('Credits', 'label.destructPrice', [destCreds]));
               confirmLabel.refreshPopup();
               confirmPopUp.addElement(confirmLabel);
               confirmPopUp.confirmButtonClickHandler = function (button: Button = null): void
               {
                  function doDestruct(): void
                  {
                     new BuildingsCommand(BuildingsCommand.SELF_DESTRUCT, {'model': _selectedModel,
                        'withCreds': true}).dispatch();
                  }
                  if (confirmLabel.hasEnoughCredits())
                  {
                     doDestruct();
                  }
                  else
                  {
                     WaitingCredsPopup.showPopup(destCreds, doDestruct);
                  }
               };
               confirmPopUp.show();
            }
         }
         
         private function renamePlanet(e: Event): void
         {
            ML.latestPlanet.ssObject.name = newPlanetName.text;
            new PlanetsCommand(PlanetsCommand.EDIT, ML.latestPlanet).dispatch();
            newPlanetName.text = "";
         }
         
         protected function coin_clickHandler(event:MouseEvent):void
         {
            var accelerator: AccelerateSelector = new AccelerateSelector();
            accelerator.upgradePart = _selectedModel.upgradePart;
            var speedPopUp: ActionConfirmationPopup = new ActionConfirmationPopup();
            accelerator.popUp = speedPopUp;
            speedPopUp.confirmButtonEnabled = false;
            speedPopUp.confirmButtonClickHandler = function(): void
            {
               function doAccelerate(): void
               {
                  GlobalFlags.getInstance().lockApplication = true;
                  if (_selectedModel.upgradePart.level > 0)
                  {
                     new BuildingsCommand(BuildingsCommand.ACCELERATE_UPGRADE, 
                        {'id': _selectedModel.id, 
                           'index': accelerator.selectedAccelerateType}).dispatch();
                  }
                  else
                  {
                     var tempBuilding: Building = 
                        ML.latestPlanet.getBuildingByConstructable(_selectedModel.id, ObjectClass.BUILDING);
                     if (tempBuilding)
                     {
                        new BuildingsCommand(BuildingsCommand.ACCELERATE_CONSTRUCTOR, 
                           {'id': tempBuilding.id, 
                              'index': accelerator.selectedAccelerateType}).dispatch();
                     }
                     else
                     {
                        new BuildingsCommand(BuildingsCommand.ACCELERATE_UPGRADE, 
                           {'id': _selectedModel.id, 
                              'index': accelerator.selectedAccelerateType}).dispatch();
                     }
                  }
               }
               if (accelerator.hasEnoughCredits())
               {
                  doAccelerate();
               }
               else
               {
                  WaitingCredsPopup.showPopup(accelerator.selectedCost, doAccelerate);
               }
            }
            speedPopUp.addElement(accelerator);
            speedPopUp.show();
         }
         
         public function moveButton_click(e: MouseEvent): void
         {
            if (ML.player.creds >= Config.getMoveCredits())
            {
               SidebarScreensSwitch.getInstance().showPrevious();
               new GBuildingEvent(GBuildingEvent.MOVE_INIT, _selectedModel);
            }
            else
            {
               UrlNavigate.getInstance().showBuyCreds();
            }
         }
         
         [Bindable]
         private var resource: Resource;
         
         private function refreshResource(e: GCreditEvent): void
         {
            EventBroker.unsubscribe(GCreditEvent.BOOST_CONFIRMED, refreshResource);
            if (_selectedModel != null && 
               _selectedModel.type != BuildingType.MOTHERSHIP &&
               _selectedModel.type != BuildingType.HQ)
            {
               function getResource(res: String): void
               {
                  if (_selectedModel[res+'Rate'] > 0 
                     || _selectedModel[res+'Storage'] > 0)
                  {
                     resource = Resource(ML.latestPlanet.ssObject[res]);
                  }
               }
               getResource(ResourceType.METAL);
               getResource(ResourceType.ENERGY);
               getResource(ResourceType.ZETIUM);
            }
         }
         
         protected function boost_clickHandler(attribute: String):void
         {
            if (ML.player.creds < Config.getPlanetBoostCost())
            {
               UrlNavigate.getInstance().showBuyCreds();
            }
            else
            {
               var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
               popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
               popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
               var lbl: Label = new Label();
               lbl.minWidth = 300;
               lbl.text = Localizer.string('Popups', 'message.areYouSure');
               popUp.addElement(lbl);
               popUp.title = Localizer.string('Popups', 'title.boostPlanet');
               popUp.confirmButtonClickHandler = function (button: Button = null): void
               {
                  GlobalFlags.getInstance().lockApplication = true;
                  EventBroker.subscribe(GCreditEvent.BOOST_CONFIRMED, refreshResource);
                  new PlanetsCommand(PlanetsCommand.BOOST, {'planet': ML.latestPlanet,
                     'resource': resource.type,
                     'attribute': attribute
                  }).dispatch();
               };
               popUp.show();
            }
         }
         
         private function getString(key: String, params: Array = null): String
         {
            return Localizer.string('BuildingSelectedSidebar', key, params);
         }
         
         private function getTextFlow(from: String): TextFlow
         {
            return TextFlowUtil.importFromString(from);
         }
         
         
         protected function queueList_creationCompleteHandler(event:FlexEvent):void
         {
            queueList.scroller.setStyle('verticalScrollPolicy', ScrollPolicy.OFF);
            queueList.scroller.setStyle('horizontalScrollPolicy', ScrollPolicy.OFF);
         }
         
      ]]>
   </fx:Script>
   <s:Group id="sidebarContainer" left="0" right="0" bottom="0" top="0">
      <base:Scroller stepMultiplier="8" left="0" right="0" top="0" bottom="0">
         <!-- This group makes scroller to work properly... Dont ask why... -->
         <s:Group left="0" right="0">
            <base:AdvancedContainer left="0" right="0">
               <base:layout>
                  <s:VerticalLayout horizontalAlign="justify"/>
               </base:layout>
               <base:Panel visible="{ML.latestPlanet.ssObject.owner != Owner.PLAYER}"
                           title="{_selectedModel.name}">
                  <base:Warning paddingTop="6" 
                                text="{Localizer.string('BuildingSidebar', 'notYourPlanet')}"/>
                  <s:Group visible="{_selectedModel.unitBonus != null || _selectedModel.type == BuildingType.NPC_HALL}">
                     <s:Label textAlign="left" text="{getString('label.nextBonus')}"/>
                     <s:Label text="{bonusTime}" textAlign="right"/>
                     <s:layout>
                        <s:VerticalLayout horizontalAlign="justify"/>
                     </s:layout>
                  </s:Group>
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="justify" paddingLeft="10" paddingRight="10"/>
                  </base:layout>
               </base:Panel>
               <base:AdvancedContainer visible="{ML.latestPlanet.ssObject.owner == Owner.PLAYER}">
                  <base:Panel id="contentPanel"
                              title="{_selectedModel.isGhost?
                              constructor.name:
                              _selectedModel.name}">
                     <base:AdvancedContainer left="0" right="0">
                        <components:CenteredBitmapImage width="200" height="100" source="{IMG.getImage(
                                                        AssetNames.getBuildingImageName(
                                                        constructor.type))}" 
                                                        visible="{_selectedModel.isGhost}"/>
                        <base:AdvancedContainer width="100%" visible="{!_selectedModel.isGhost}">
                           <s:Group>
                              <s:Label left="0" top="10" text="{getString('currentLevel') + 
                                       ': ' + _selectedModel.upgradePart.level.toString()}" styleName="h3"/>
                              <s:Button
                                 id="infoButton"
                                 right="6"
                                 width="16"
                                 height="16"
                                 skinClass="components.skins.InfoButtonSkin"
                                 click="infoButton_clickHandler(event)"/>
                           </s:Group>
                           <s:Label text="{getString('status') + 
                                    ': ' + (_selectedModel.upgradePart.upgradeEndsAt != null?
                                    (_selectedModel.upgradePart.level == 0?
                                    getString('constructing'):
                                    getString('upgrading')):' ')}" 
                                    visible="{_selectedModel.upgradePart.upgradeEndsAt != null}"/>
                           <s:Group visible="{_selectedModel.hp > 0}">
                              
                              <s:Label text="{getString('hp')}" styleName="h3"/>
                              <base:SetableProgressBar width="80%" curentStock="{_selectedModel.hp}"
                                                       text="{_selectedModel.hp + ' / ' + _selectedModel.hpMax}"
                                                       maxStock="{_selectedModel.hpMax}"/>
                              
                              <s:layout>
                                 <s:HorizontalLayout gap="6"/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group visible="{_selectedModel.upgradePart.upgradeEndsAt != null}">
                              <s:Button skinClass="components.skins.CreditButtonSkin" 
                                        click="coin_clickHandler(event)"
                                        label="{Localizer.string('Credits', 'label.accelerate')}"
                                        right="6"/>
                           </s:Group>
                           
                           <s:Group visible="{
                                    !(
                                    _selectedModel.npc || 
                                    _selectedModel.upgradePart.upgradeEndsAt != null || 
                                    _selectedModel.state == Building.WORKING || 
                                    !(
                                    _selectedModel.metalRate &lt; 0 || 
                                    _selectedModel.energyRate &lt; 0 || 
                                    _selectedModel.zetiumRate &lt; 0
                                    )
                                    )}">
                              <s:Button label="{_selectedModel.state == 1
                                        ?getString('deactivate')
                                        :getString('activate')}"
                                        click="activate_clickHandler(event)" 
                                        enabled="{!_selectedModel.pending}"
                                        right="6"/>
                           </s:Group>
                           
                           <s:Group visible="{!(_selectedModel.upgradePart.upgradeEndsAt != null ||
                                    (_selectedModel.type != BuildingType.HEALING_CENTER))}">
                              <s:Button label="{getString('open')}"
                                        click="NC.showHealing(_selectedModel, ML.latestPlanet.getActiveHealableUnits())"
                                        right="6"/>
                           </s:Group>
                           <s:Group visible="{!(_selectedModel.upgradePart.upgradeEndsAt != null ||
                                    (!_selectedModel.isConstructor(ObjectClass.UNIT)) )}">
                              <s:Button label="{getString('open')}"
                                        click="NC.showFacilities(_selectedModel.id)"
                                        right="6"/>
                           </s:Group>
                           <s:Group visible="{!(_selectedModel.upgradePart.upgradeEndsAt != null ||
                                    _selectedModel.type != BuildingType.RESEARCH_CENTER)}">
                              <s:Button label="{getString('open')}"
                                        click="NC.showTechnologies()"
                                        right="6"/>
                           </s:Group>
                           <s:Group visible="{!(_selectedModel.upgradePart.upgradeEndsAt != null ||
                                    _selectedModel.type != BuildingType.DEFENSIVE_PORTAL)}">
                              <s:Button label="{getString('open')}"
                                        click="NC.showDefensivePortal(ML.latestPlanet.id)"
                                        right="6"/>
                           </s:Group>
                           <s:Group visible="{!(_selectedModel.upgradePart.upgradeEndsAt != null ||
                                    _selectedModel.type != BuildingType.MARKET)}">
                              <s:Button label="{getString('open')}"
                                        click="NC.showMarket()"
                                        right="6"/>
                           </s:Group>
                           
                           
                           
                           <base:AdvancedContainer visible="{_selectedModel.npc}">
                              <s:Label text="{getString('noUnits')}" 
                                       visible="{ML.latestPlanet.getActiveGroundUnits(Owner.PLAYER).length == 0}"
                                       styleName="unsatisfied" fontSize="16"/>
                              <s:Button enabled="{ML.latestPlanet.getActiveGroundUnits(Owner.PLAYER).length != 0}" 
                                        horizontalCenter="0" click="attack_clickHandler(event)"
                                        skinClass="components.skins.RedButtonSkin"
                                        label="{getString('attack')}"/>
                              <base:layout>
                                 <s:VerticalLayout horizontalAlign="center"/>
                              </base:layout>
                           </base:AdvancedContainer>
                           
                           <base:layout>
                              <s:VerticalLayout paddingLeft="6" horizontalAlign="justify"/>
                           </base:layout>
                           
                        </base:AdvancedContainer>
                        
                        <s:Group visible="{_selectedModel.unitBonus != null || _selectedModel.type == BuildingType.NPC_HALL}"
                                 width="100%">
                           <s:Label textAlign="left" text="{getString('label.nextBonus')}"/>
                           <base:TimeLabel text="{bonusTime}" textAlign="right"/>
                           <s:layout>
                              <s:VerticalLayout horizontalAlign="justify" paddingLeft="10" paddingRight="10"/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('queueInfo')}" 
                              visible="{_selectedModel.isGhost
                              || _selectedModel.constructableType != null}">
                     <buildingsidebar:BuildingProgressElement id="progressElement"
                                                              constructableModel="{constructable}"/>
                     <s:List id="queueList" 
                             dataProvider="{constructor.constructionQueueEntries}"
                             useVirtualLayout="false"
                             rollOverColor="#0f0f0f" selectionColor="#0f0f0f" 
                             dragEnabled="true" borderVisible="false" 
                             dragStart="queueList_dragStartHandler(event)"
                             creationComplete="queueList_creationCompleteHandler(event)"
                             contentBackgroundAlpha="0"
                             dragComplete="queueList_dragCompleteHandler(event)"
                             height="{constructor.constructionQueueEntries.length > 0?52:0}">
                        <s:itemRenderer>
                           <fx:Component>
                              <s:ItemRenderer width="100%" height="44">
                                 <buildingsidebar:BuildingQueryElement queryElementModel="{data}" width="100%" height="44"/>
                              </s:ItemRenderer>
                           </fx:Component>
                        </s:itemRenderer>
                        
                        <s:layout>
                           <s:TileLayout requestedColumnCount="4" verticalGap="6" horizontalGap="6"/>
                        </s:layout>
                     </s:List>
                     <base:layout>
                        <s:VerticalLayout paddingLeft="7" paddingRight="7" horizontalAlign="justify"/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('renamePlanet')}" 
                              visible="{(_selectedModel.type == BuildingType.MOTHERSHIP ||
                              _selectedModel.type == BuildingType.HQ) 
                              &amp;&amp; (_selectedModel.upgradePart.level > 0)}">
                     <s:Group width="100%">
                        <s:Label text="{getString('message.changeName')}" 
                                 left="6" right="6"/>
                     </s:Group>
                     <base:BaseTextInput width="80%" id="newPlanetName" enter="renamePlanet(event)"
                                         maxChars="{Config.getMaxPlanetNameLength()}"/>
                     <s:Group width="100%">
                        <s:Button right="6" enabled="{newPlanetName.text.length >= Config.getMinPlanetNameLength()
                                  &amp;&amp; !ML.latestPlanet.pending}"
                                  click="renamePlanet(event)" 
                                  label="{getString('label.changeName')}"/>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout horizontalAlign="center"/>
                     </base:layout>
                  </base:Panel>
                  
                  <s:Group height="100%" visible="{_selectedModel.npc}">
                     <s:Group id="attackTitle" height="16">
                        <!-- Background of the title -->
                        <s:Path alpha="0.6" data="M 0 8 L 8 0 L {attackTitle.width-1} 0 L {attackTitle.width-1} 
                                {attackTitle.height-1} L 0 {attackTitle.height-1} Z" 
                                winding="nonZero" top="0" left="0" right="0" bottom="0">
                           <s:fill>
                              <s:LinearGradient rotation="270">
                                 <s:GradientEntry color="0x004F68" ratio="0"/>
                                 <s:GradientEntry alpha="0.282353" color="0x00232E" ratio="1"/>
                              </s:LinearGradient>
                           </s:fill>
                           <s:stroke>
                              <s:SolidColorStroke caps="none" joints="miter" miterLimit="4" scaleMode="normal" weight="1"/>
                           </s:stroke>
                        </s:Path>
                        <!--- Title of attack menu. -->
                        <s:Label id="titleDisplay" styleName="panelTitle"
                                 verticalCenter="0" horizontalCenter="0" 
                                 text="{getString('attackInfo')}"/> 
                     </s:Group>
                     
                     <buildingselectedsidebar:NpcUnitsList 
                        building="{_selectedModel}"/>
                     <s:layout>
                        <s:VerticalLayout horizontalAlign="justify"/>
                     </s:layout>  
                  </s:Group>
                  
                  <base:Panel title="{getString('selectedUpgradeCost')}" 
                              visible="{!(_selectedModel.upgradePart.level == Config.getBuildingMaxLevel(_selectedModel.type) 
                              || !_selectedModel.managable
                              || _selectedModel.npc || _selectedModel.upgradePart.upgradeEndsAt != null ||
                              _selectedModel.isGhost)}">
                     <s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{metalCost.toFixed(2)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"
                                               labelStyleName="{metalCost > ML.latestPlanet.ssObject.metal.currentStock? 'unsatisfied':null}"/>
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{zetiumCost.toFixed(2)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"
                                               labelStyleName="{zetiumCost > ML.latestPlanet.ssObject.zetium.currentStock? 'unsatisfied':null}"/>
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6"/>
                           </s:layout>
                        </s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{energyCost.toFixed(2)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"
                                               labelStyleName="{energyCost > ML.latestPlanet.ssObject.energy.currentStock? 'unsatisfied':null}"/>
                           <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{timeCost}"
                                               toolTip="{Localizer.string('Resources', ResourceType.TIME)}"/> 
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6"/>
                           </s:layout>
                        </s:Group>
                        <s:layout>
                           <s:HorizontalLayout gap="3" paddingLeft="6"/>
                        </s:layout> 
                     </s:Group>
                     <s:Group>
                        <s:Button right="6" label="{getString('upgrade')}" 
                                  enabled="{!(!canBeUpgraded || upgradePending || 
                                  _selectedModel.state == Building.WORKING)}" 
                                  click="upgrade_clickHandler(event)" top="10" />
                     </s:Group>
                     <base:AdvancedContainer visible="{!canBeUpgraded 
                                             || _selectedModel.state == Building.WORKING}">
                        <s:Label text="{getString('label.busy')}"
                                 styleName="unsatisfied" 
                                 visible="{_selectedModel.state == Building.WORKING}"/>
                        
                        <s:Label text="{Localizer.string('Resources','notEnoughResources')}"
                                 styleName="unsatisfied" visible="{!canBeUpgraded}"/>
                        <s:Label text="{Localizer.string('Resources','enoughResourcesIn')}"
                                 visible="{resLeft > 0}" fontWeight="bold"/>
                        <base:TimeLabel text="{resLeftString}" visible="{resLeft > 0}"/>
                        
                        <!--s:Label text="{Localizer.string('Resources','insufficientRate')}" visible="{resLeft == -1}"
                        styleName="unsatisfied" width="100%"/-->
                        <s:Label text="{Localizer.string('Resources','additionalStorage', [missingStorageString])}" visible="{!enoughStorage}"
                                 styleName="unsatisfied"/>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingRight="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                     <base:layout>
                        <s:VerticalLayout gap="3" horizontalAlign="justify"/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('title.inactiveBuilding')}"
                              visible="{_selectedModel.state == Building.INACTIVE}">
                     <s:Label left="6" right="6" fontSize="12"
                              text="{Localizer.string('Buildings', 'text.deactivated')}"/>
                  </base:Panel>
                  
                  <base:Panel title="{getString('title.rates')}" 
                              visible="{((_selectedModel.metalRate != 0) ||
                              (_selectedModel.energyRate != 0) ||
                              (_selectedModel.zetiumRate != 0)) 
                              &amp;&amp; !_selectedModel.isGhost
                              &amp;&amp; 
                              (_selectedModel.state != Building.INACTIVE)}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Group visible="{_selectedModel.metalRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{
                                               (_selectedModel.metalRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.metalRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.metalRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
                           <base:NextValueComp textToDisplay="{(_selectedModel.nextMetalRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.nextMetalRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.nextMetalRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{_selectedModel.nextMetalRate &lt; 0?0xff0000:0x00ff00}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        <s:Group visible="{_selectedModel.energyRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{
                                               (_selectedModel.energyRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.energyRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.energyRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
                           <base:NextValueComp textToDisplay="{(_selectedModel.nextEnergyRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.nextEnergyRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.nextEnergyRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{_selectedModel.nextEnergyRate &lt; 0?0xff0000:0x00ff00}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>                        
                        <s:Group visible="{_selectedModel.zetiumRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{
                                               (_selectedModel.zetiumRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.zetiumRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.zetiumRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
                           <base:NextValueComp textToDisplay="{(_selectedModel.nextZetiumRate >= 0? 
                                               ('+' + NumberUtil.toShortString(_selectedModel.nextZetiumRate * 
                                               ML.resourcesMods.getRateMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(_selectedModel.nextZetiumRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{_selectedModel.nextZetiumRate &lt; 0?0xff0000:0x00ff00}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout gap="3" paddingLeft="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  
                  <base:Panel title="{getString('storage')}" 
                              visible="{((_selectedModel.metalStorage != 0) ||
                              (_selectedModel.energyStorage != 0) ||
                              (_selectedModel.zetiumStorage != 0) ||
                              (Building.getPopulation(_selectedModel.type, 
                              _selectedModel.upgradePart.level) != 0)) 
                              &amp;&amp; !_selectedModel.isGhost
                              &amp;&amp; !(_selectedModel.upgradePart.level == 0)}">
                     <base:AdvancedContainer left="0" right="0">                        
                        <s:Group visible="{_selectedModel.metalStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.metalStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.nextMetalStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getStorageBoost(), PRECISION)}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{_selectedModel.energyStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.energyStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.nextEnergyStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getStorageBoost(), PRECISION)}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{_selectedModel.zetiumStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.zetiumStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(_selectedModel.nextZetiumStorage* 
                                               ML.resourcesMods.getStorageMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getStorageBoost(), PRECISION)}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{Building.getPopulation(_selectedModel.type, 
                                 _selectedModel.upgradePart.level) != 0}">
                           <base:ImageAndLabel type="{ResourceType.POPULATION}" 
                                               textToDisplay="{Building.getPopulation(_selectedModel.type, 
                                               _selectedModel.upgradePart.level)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.POPULATION)}"/>
                           <base:NextValueComp textToDisplay="{Building.getPopulation(_selectedModel.type, 
                                               _selectedModel.upgradePart.level + 1)}"
                                               visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout gap="3" paddingLeft="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('scientists')}" 
                              visible="{!((_selectedModel.type != BuildingType.RESEARCH_CENTER) ||
                              (_selectedModel.upgradePart.upgradeEndsAt != null) ||
                              (_selectedModel.isGhost))}">
                     <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" paddingLeft="6"
                                         textToDisplay="{_selectedModel.scientists}"
                                         toolTip="{Localizer.string('Resources', ResourceType.SCIENTISTS)}"/>
                     <base:NextValueComp textToDisplay="{_selectedModel.nextScientists}"
                                         visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                         toolTip="{getString('toolTip.afterUpgrade')}"/>
                     <base:layout>
                        <s:HorizontalLayout/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('special')}" 
                              visible="{(_selectedModel.radarStrength != 0) &amp;&amp;
                              (_selectedModel.upgradePart.upgradeEndsAt == null) &amp;&amp;
                              (!_selectedModel.isGhost)}">
                     <s:Label text="{Localizer.string('Buildings', 'property.radar.strength') + ': ' + 
                              _selectedModel.radarStrength.toString()}" paddingLeft="6"/>
                     <base:NextValueComp textToDisplay="{_selectedModel.nextRadarStrength.toString()}"
                                         visible="{_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel}"
                                         toolTip="{getString('toolTip.afterUpgrade')}"/>
                     <base:layout>
                        <s:HorizontalLayout/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('title.boost')}" 
                              visible="{(_selectedModel.energyRate > 0
                              || _selectedModel.metalRate > 0
                              || _selectedModel.zetiumRate > 0
                              || _selectedModel.metalStorage > 0
                              || _selectedModel.energyStorage > 0
                              || _selectedModel.zetiumStorage > 0)
                              &amp;&amp; _selectedModel.type != BuildingType.MOTHERSHIP
                              &amp;&amp; _selectedModel.type != BuildingType.HQ}">
                     <base:AdvancedContainer left="0" right="0"> 
                        <!-- RATES BOOST -->
                        <s:RichText textFlow="{getTextFlow(
                                    Localizer.string('Credits', 'label.boostInactive',
                                    [resource.type, 'rate',
                                    Config.getPlanetBoost(), DateUtil.secondsToHumanString(
                                    Config.getPlanetBoostDuration())]))}"
                                    visible="{resource.boost.rateTime == null}"/>
                        <s:Label text="{Localizer.string('Credits', 'label.boostActive1',
                                 [resource.type, 'rate',
                                 Config.getPlanetBoost(),
                                 DateUtil.secondsToHumanString(
                                 Config.getPlanetBoostDuration())])}"
                                 visible="{resource.boost.rateTime != null}"/> 
                        <base:TimeLabel text="{resource.boost.rateTime}"
                                        visible="{resource.boost.rateTime != null}"/>                    
                        <s:Label text="{Localizer.string('Credits', 'label.boostActive2',
                                 [DateUtil.secondsToHumanString(
                                 Config.getPlanetBoostDuration())])}"
                                 visible="{resource.boost.rateTime != null}"/>
                        <s:RichText textFlow="{getTextFlow(
                                    Localizer.string('Credits','label.boostCost',
                                    [Config.getPlanetBoostCost(), resource.type]))}"/>
                        <s:Group width="100%">
                           <s:Button skinClass="components.skins.CreditButtonSkin"
                                     label="{ML.player.creds &lt; Config.getPlanetBoostCost()
                                     ?Localizer.string('Credits', 'label.buy')
                                     :Localizer.string('Credits', 'label.boostRate')}" 
                                     right="6" click="boost_clickHandler('rate')"
                                     bottom="10"/>
                        </s:Group>
                        
                        <!-- STORAGES BOOST -->
                        <s:RichText textFlow="{getTextFlow(
                                    Localizer.string('Credits', 'label.boostInactive',
                                    [resource.type, 'storage',
                                    Config.getPlanetBoost(), DateUtil.secondsToHumanString(
                                    Config.getPlanetBoostDuration())]))}"
                                    visible="{resource.boost.storageTime == null}"/>
                        <s:Label text="{Localizer.string('Credits', 'label.boostActive1',
                                 [resource.type, 'storage',
                                 Config.getPlanetBoost(),
                                 DateUtil.secondsToHumanString(
                                 Config.getPlanetBoostDuration())])}"
                                 visible="{resource.boost.storageTime != null}"/>
                        <base:TimeLabel text="{resource.boost.storageTime}"
                                        visible="{resource.boost.storageTime != null}"/>
                        <s:Label text="{Localizer.string('Credits', 'label.boostActive2',
                                 [DateUtil.secondsToHumanString(
                                 Config.getPlanetBoostDuration())])}"
                                 visible="{resource.boost.storageTime != null}"/>
                        <s:RichText textFlow="{getTextFlow(
                                    Localizer.string('Credits','label.boostCost',
                                    [Config.getPlanetBoostCost(), resource.type]))}"/>
                        <s:Group width="100%">
                           <s:Button skinClass="components.skins.CreditButtonSkin"
                                     label="{ML.player.creds &lt; Config.getPlanetBoostCost()
                                     ?Localizer.string('Credits', 'label.buy')
                                     :Localizer.string('Credits', 'label.boostStorage')}" 
                                     right="6" click="boost_clickHandler('storage')"/>
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('tileBonuses')}" 
                              visible="{_selectedModel.constructorMod != 0
                              || _selectedModel.energyMod != 0
                              || _selectedModel.armorMod != 0}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Label text="{getString('construction.bonus') + ': ' + (_selectedModel.constructorMod > 0?'+':'')
                                 +_selectedModel.constructorMod + '%'}" visible="{_selectedModel.constructorMod != 0}"
                                                                        color="{_selectedModel.constructorMod > 0?0x00ff00:0xff0000}"/>
                        <s:Label text="{getString('energy.bonus') + ': ' + (_selectedModel.energyMod > 0?'+':'')
                                 +_selectedModel.energyMod + '%'}" visible="{_selectedModel.energyMod != 0}"
                                                                   color="{_selectedModel.energyMod > 0?0x00ff00:0xff0000}"/>
                        <s:Label text="{getString('armor.bonus') + ': ' + (_selectedModel.armorMod > 0?'+':'')
                                 +_selectedModel.armorMod + '%'}" visible="{_selectedModel.armorMod != 0}"
                                                                  color="{_selectedModel.armorMod > 0?0x00ff00:0xff0000}"/>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('selfDestruct')}"
                              visible="{_selectedModel.managable
                              &amp;&amp; !_selectedModel.npc &amp;&amp; !_selectedModel.isGhost
                              &amp;&amp; _selectedModel.upgradePart.upgradeEndsAt == null}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Group width="100%" visible="{_selectedModel.upgradePart.level > 0}">
                           <s:Label text="{getString('destructResources')}"
                                    left="0" right="0"/>
                        </s:Group>
                        <base:ImageAndLabel type="{ResourceType.METAL}" paddingLeft="6" 
                                            visible="{_selectedModel.upgradePart.level > 0}"
                                            textToDisplay="{Resource.calculateBuildingDestructRevenue(_selectedModel.type,
                                            _selectedModel.upgradePart.level, ResourceType.METAL)}"/>
                        <base:ImageAndLabel type="{ResourceType.ENERGY}" paddingLeft="6" 
                                            visible="{_selectedModel.upgradePart.level > 0}"
                                            textToDisplay="{Resource.calculateBuildingDestructRevenue(_selectedModel.type,
                                            _selectedModel.upgradePart.level, ResourceType.ENERGY)}"/>
                        <base:ImageAndLabel type="{ResourceType.ZETIUM}" paddingLeft="6"
                                            visible="{_selectedModel.upgradePart.level > 0}"
                                            textToDisplay="{Resource.calculateBuildingDestructRevenue(_selectedModel.type,
                                            _selectedModel.upgradePart.level, ResourceType.ZETIUM)}"/>
                        <s:Group width="100%">
                           <s:Button right="6" label="{canDestroyBuilding?getString('destroy')
                                     :destructRemainingTime}" enabled="{!_selectedModel.pending}"
                                                              skinClass="{canDestroyBuilding?ButtonSkin:CreditButtonSkin}"
                                                              click="selfDestruct_clickHandler(event)"/>
                        </s:Group>
                        <base:Warning width="100%" showSign="false"
                                      visible="{_selectedModel.state == Building.WORKING}"
                                      text="{getString('warning.buildingWorking')}"/>
                        <s:Group width="100%" visible="{canDestroyBuilding}">
                           <s:Label text="{totalDestructTimeLbl}" left="0" right="0"/>
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingTop="6" paddingRight="6" paddingBottom="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('move')}" 
                              visible="{_selectedModel.managable
                              &amp;&amp; !_selectedModel.npc &amp;&amp; !_selectedModel.isGhost
                              &amp;&amp; _selectedModel.upgradePart.upgradeEndsAt == null
                              &amp;&amp; _selectedModel.state != 2}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Label text="{Localizer.string('Credits', 'label.movePrice', [Config.getMoveCredits()])}"/>
                        <s:Group>
                           <s:Button right="6" label="{Localizer.string('Credits',
                                     ML.player.creds &lt; Config.getMoveCredits()?'label.buy':'label.move')}"
                                     enabled="{!_selectedModel.pending}"
                                     skinClass="components.skins.CreditButtonSkin" 
                                     click="moveButton_click(event)"/>
                        </s:Group>
                        <s:Label visible="{ML.player.creds &lt; Config.getMoveCredits()}"
                                 text="{Localizer.string('Credits', 'label.notEnough', 
                                 [Config.getMoveCredits() - ML.player.creds])}" 
                                 paddingLeft="6" 
                                 paddingRight="6" textAlign="center" styleName="unsatisfied"
                                 fontWeight="bold"/>
                        <base:layout>
                           <s:VerticalLayout horizontalAlign="justify" paddingLeft="6" paddingRight="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="justify"/>
                  </base:layout>
               </base:AdvancedContainer>
               <base:Panel title="{getString('title.buildingBonus')}"
                           visible="{_selectedModel.unitBonus != null
                           || Config.getBuildingCredsBonus(_selectedModel.type) > 0
                           || Config.getBuildingVictoryPtsBonus(_selectedModel.type) > 0}">
                  <base:AdvancedContainer left="0" right="0">
                     <s:Label visible="{_selectedModel.type == BuildingType.NPC_HALL}" 
                              text="{'\u2022 '+getString('label.victoryPoint',
                              [Config.getBuildingVictoryPtsBonus(_selectedModel.type)])}"/>
                     <s:Label visible="{_selectedModel.type == BuildingType.NPC_HALL}" 
                              text="{'\u2022 '+getString('label.cred',
                              [Config.getBuildingCredsBonus(_selectedModel.type)])}"/>
                     <s:DataGroup visible="{_selectedModel.unitBonus != null}"
                                  dataProvider="{_selectedModel.unitBonus}" id="uBonusGroup"
                                  itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                        <s:layout>
                           <s:TileLayout requestedRowCount="{Math.max(1, 
                                         Math.ceil(Number(_selectedModel.unitBonus.length)/3))}"/>
                        </s:layout>
                     </s:DataGroup>
                     <base:layout>
                        <s:VerticalLayout horizontalAlign="justify" paddingLeft="6" paddingRight="6"/>
                     </base:layout>
                  </base:AdvancedContainer>
               </base:Panel>
            </base:AdvancedContainer>
         </s:Group>
      </base:Scroller>
   </s:Group>
</base:BaseContainer>