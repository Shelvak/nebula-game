<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    height="100%" width="100%"
                    xmlns:buildingselectedsidebar="components.buildingselectedsidebar.*" 
                    xmlns:components="utils.components.*" 
                    xmlns:buildingsidebar="components.buildingsidebar.*"
                    creationComplete="bSidebar.queueList = queueList">
   
   <fx:Script>
      <![CDATA[
      import components.skins.ButtonSkin;
      import components.skins.CreditButtonSkin;

      import config.Config;

      import controllers.objects.ObjectClass;
      import controllers.planets.PlanetsCommand;
      import controllers.planets.actions.EditActionParams;
      import controllers.ui.NavigationController;

      import models.building.Building;
      import models.building.BuildingType;
      import models.building.MCBuildingSelectedSidebar;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.unit.Unit;

      import mx.core.ScrollPolicy;
      import mx.events.DragEvent;
      import mx.events.FlexEvent;

      import utils.DateUtil;
      import utils.MathUtil;
      import utils.NumberUtil;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;

      private static const PRECISION: int = 1;

      [Bindable]
      private var bSidebar: MCBuildingSelectedSidebar =
              MCBuildingSelectedSidebar.getInstance();


      private var NC: NavigationController = NavigationController.getInstance();

      private function renamePlanet(): void {
         if (canRenamePlanetTo(newPlanetName.text)) {
            new PlanetsCommand(
               PlanetsCommand.EDIT,
               new EditActionParams(ML.latestPlanet, newPlanetName.text)
            ).dispatch();
            newPlanetName.text = "";
         }
      }

      private function canRenamePlanetTo(newName:String): Boolean {
         return newName != null
                   && newName.length >= Config.getMinPlanetNameLength();
      }

      private function getString(key: String, params: Array = null): String {
         return Localizer.string('BuildingSelectedSidebar', key, params);
      }

      private function queueList_creationCompleteHandler(event: FlexEvent): void {
         //queueList.scroller.setStyle('verticalScrollPolicy', ScrollPolicy.OFF);
         queueList.scroller.setStyle('horizontalScrollPolicy', ScrollPolicy.OFF);
      }
      ]]>
   </fx:Script>
   <s:Group id="sidebarContainer" left="0" right="0" bottom="0" top="0">
      <base:Scroller stepMultiplier="8" left="0" right="0" top="0" bottom="0">
         <!-- This group makes scroller to work properly... Dont ask why... -->
         <s:Group left="0" right="0">
            <base:AdvancedContainer left="0" right="0">
               <base:layout>
                  <s:VerticalLayout horizontalAlign="justify"/>
               </base:layout>
               <base:Panel visible="{!ML.latestPlanet.ssObject.ownerIsPlayer}"
                           title="{bSidebar.selectedBuilding.name}">
                  <base:Warning paddingTop="6" 
                                text="{Localizer.string('BuildingSidebar', 'notYourPlanet')}"/>
                  <s:Group visible="{bSidebar.selectedBuilding.type == BuildingType.NPC_HALL}">
                     <s:Label textAlign="left" text="{getString('label.nextBonus')}"/>
                     <s:Label text="{bSidebar.bonusTime}" textAlign="right"/>
                     <s:layout>
                        <s:VerticalLayout horizontalAlign="justify"/>
                     </s:layout>
                  </s:Group>
                  <buildingselectedsidebar:AttackNpcButtonGroup
                     visible="{bSidebar.selectedBuilding.npc
                       &amp;&amp; ML.latestPlanet.ssObject.ownerIsAlly}"
                     includeInLayout="{bSidebar.selectedBuilding.npc
                       &amp;&amp; ML.latestPlanet.ssObject.ownerIsAlly}"/>
                  <buildingselectedsidebar:NpcUnitsBuildingSidebarComponents height="100%"
                    visible="{bSidebar.selectedBuilding.npc
                    &amp;&amp; ML.latestPlanet.ssObject.ownerIsAlly}"
                    includeInLayout="{bSidebar.selectedBuilding.npc
                    &amp;&amp; ML.latestPlanet.ssObject.ownerIsAlly}"/>
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="justify" paddingLeft="10" paddingRight="10"/>
                  </base:layout>
               </base:Panel>
               <base:AdvancedContainer visible="{ML.latestPlanet.ssObject.ownerIsPlayer}">
                  <base:Panel id="contentPanel"
                              title="{bSidebar.selectedBuilding.isGhost?
                              bSidebar.constructor.name:
                              bSidebar.selectedBuilding.name}">
                     <base:AdvancedContainer left="0" right="0">
                        <components:CenteredBitmapImage width="200" height="100" source="{IMG.getImage(
                                                        AssetNames.getBuildingImageName(
                                                        bSidebar.constructor.type))}"
                                                        visible="{bSidebar.selectedBuilding.isGhost}"/>
                        <base:AdvancedContainer width="100%" visible="{!bSidebar.selectedBuilding.isGhost}">
                           <s:Group>
                              <s:Label left="0" top="10" text="{getString('currentLevel') + 
                                       ': ' + bSidebar.selectedBuilding.upgradePart.level.toString()}" styleName="h3"/>
                              <s:Button
                                 id="infoButton"
                                 right="6"
                                 width="16"
                                 height="16"
                                 skinClass="components.skins.InfoButtonSkin"
                                 click="bSidebar.infoButton_clickHandler(event)"/>
                           </s:Group>
                           <s:Label text="{getString('status') + ': ' + (bSidebar.selectedBuilding.upgradePart.isUpgrading ? getString('upgrading') : getString('constructing'))}"
                                    visible="{bSidebar.selectedBuilding.upgradePart.upgradeInProgress}"/>
                           <s:Group visible="{bSidebar.selectedBuilding.hp > 0}">
                              
                              <s:Label text="{getString('hp')}" styleName="h3"/>
                              <base:SetableProgressBar width="80%" curentStock="{bSidebar.selectedBuilding.hp}"
                                                       text="{bSidebar.selectedBuilding.hp + ' / ' + bSidebar.selectedBuilding.hpMax}"
                                                       maxStock="{bSidebar.selectedBuilding.hpMax}"/>
                              
                              <s:layout>
                                 <s:HorizontalLayout gap="6"/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group visible="{bSidebar.selectedBuilding.upgradePart.upgradeInProgress}">
                              <s:Button skinClass="components.skins.CreditButtonSkin" 
                                        click="bSidebar.coin_clickHandler(event)"
                                        label="{Localizer.string('Credits', 'label.accelerate')}"
                                        right="6"
                                        enabled="{bSidebar.selectedBuilding.upgradePart.upgradeProgress &lt; 1}"/>
                           </s:Group>
                           
                           <s:Group visible="{
                                    !(
                                    bSidebar.selectedBuilding.npc ||
                                    bSidebar.selectedBuilding.upgradePart.upgradeInProgress ||
                                    bSidebar.selectedBuilding.state == Building.WORKING ||
                                    bSidebar.selectedBuilding.state == Building.REPAIRING ||
                                    !(
                                    bSidebar.selectedBuilding.metalRate &lt; 0 ||
                                    bSidebar.selectedBuilding.energyRate &lt; 0 ||
                                    bSidebar.selectedBuilding.zetiumRate &lt; 0
                                    )
                                    )}">
                              <s:Button label="{bSidebar.selectedBuilding.state ==
                                        Building.ACTIVE
                                        ? getString('deactivate')
                                        : getString('activate')}"
                                        click="bSidebar.activate_clickHandler(event)"
                                        enabled="{!bSidebar.selectedBuilding.pending}"
                                        right="6"/>
                           </s:Group>
                           
                           <!-- OPEN BUILDING -->
                           <s:Group visible="{!bSidebar.selectedBuilding.upgradePart.upgradeInProgress
                                    &amp;&amp; bSidebar.selectedBuilding.openable
                                    &amp;&amp; bSidebar.selectedBuilding.state != Building.INACTIVE}">
                              <s:Button label="{getString('open')}"
                                        click="bSidebar.openCurrent()"
                                        right="6"/>
                           </s:Group>
                           
                           <buildingselectedsidebar:AttackNpcButtonGroup/>
                           
                           <base:layout>
                              <s:VerticalLayout paddingLeft="6" horizontalAlign="justify"/>
                           </base:layout>
                           
                        </base:AdvancedContainer>
                        
                        <s:Group visible="{bSidebar.selectedBuilding.type == BuildingType.NPC_HALL}"
                                 width="100%">
                           <s:Label textAlign="left" text="{getString('label.nextBonus')}"/>
                           <base:TimeLabel text="{bSidebar.bonusTime}" textAlign="right"/>
                           <s:layout>
                              <s:VerticalLayout horizontalAlign="justify" 
                                                paddingLeft="10" paddingRight="10"/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>

                  <base:Panel title="{getString('panelTitle.cancelProgress')}"
                              visible="{bSidebar.selectedBuilding.upgradePart.upgradeEndsAt != null}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Label visible="{bSidebar.selectedBuilding.upgradePart.level > 0}"
                                 text="{getString('label.cancelUpgrade')}"
                                 left="0" right="0" paddingBottom="6" />
                        <s:Label visible="{bSidebar.selectedBuilding.upgradePart.level == 0}"
                                 text="{getString('label.cancelConstructor')}"
                                 left="0" right="0" paddingBottom="6"/>
                        <buildingselectedsidebar:RevenueLabel 
                           type="{ResourceType.METAL}" 
                           revenueText="{Resource.getModelCancelRevenueString(
                           bSidebar.selectedBuilding, ResourceType.METAL,
                           bSidebar.builtPart)}"/>
                        <buildingselectedsidebar:RevenueLabel 
                           type="{ResourceType.ENERGY}" 
                           revenueText="{Resource.getModelCancelRevenueString(
                           bSidebar.selectedBuilding, ResourceType.ENERGY,
                           bSidebar.builtPart)}"/>
                        <buildingselectedsidebar:RevenueLabel 
                           type="{ResourceType.ZETIUM}" 
                           revenueText="{Resource.getModelCancelRevenueString(
                           bSidebar.selectedBuilding, ResourceType.ZETIUM,
                           bSidebar.builtPart)}"/>
                        <base:Warning showSign="false" 
                                      text="{getString('warning.deployCancel')}" 
                                      visible="{bSidebar.selectedBuilding.upgradePart.level == 0
                                      &amp;&amp;  
                                      ML.latestPlanet.getBuildingByConstructable(
                                      bSidebar.selectedBuilding.id, ObjectClass.BUILDING) == null}"
                                      paddingTop="6" paddingBottom="6"/>
                        <s:Group>
                           <s:Button right="6" label="{getString('label.cancel')}"
                                     click="bSidebar.cancelUpgrade()"/>
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingTop="6" 
                                             paddingRight="6" paddingBottom="6"
                                             horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('panelTitle.scientists')}"
                              visible="{bSidebar.selectedBuilding.type == BuildingType.RESEARCH_CENTER
                              &amp;&amp; bSidebar.selectedBuilding.upgradePart.isUpgrading}">
                     <s:Label text="{getString('message.scientistsNotAvailable')}" 
                              lineBreak="toFit" left="6" right="6"/>
                  </base:Panel>
                  
                  <base:Panel title="{getString('queueInfo')}" 
                              visible="{bSidebar.selectedBuilding.isGhost
                              || bSidebar.selectedBuilding.constructableType != null}">
                     <buildingsidebar:BuildingProgressElement id="progressElement"
                                                              constructableModel="{
                                                              bSidebar.constructableObject}"/>
                     <s:List id="queueList" 
                             dataProvider="{bSidebar.constructor.constructionQueueEntries}"
                             useVirtualLayout="false"
                             rollOverColor="#0f0f0f" selectionColor="#0f0f0f" 
                             dragEnabled="true" borderVisible="false" 
                             dragStart="bSidebar.queueList_dragStartHandler(event)"
                             creationComplete="queueList_creationCompleteHandler(event)"
                             contentBackgroundAlpha="0"
                             dragComplete="bSidebar.queueList_dragCompleteHandler(event)"
                             height="{bSidebar.constructor.constructionQueueEntries.length > 0
                             ?(bSidebar.constructor.constructionQueueEntries.length > 4?96:50)
                             :0}">
                        <s:itemRenderer>
                           <fx:Component>
                              <s:ItemRenderer width="100%" height="44">
                                 <buildingsidebar:BuildingQueryElement queryElementModel="{data}" width="100%" height="44"/>
                              </s:ItemRenderer>
                           </fx:Component>
                        </s:itemRenderer>
                        
                        <s:layout>
                           <s:TileLayout requestedColumnCount="4" verticalGap="6" horizontalGap="1"/>
                        </s:layout>
                     </s:List>
                     <base:layout>
                        <s:VerticalLayout paddingLeft="7" paddingRight="7" horizontalAlign="justify"/>
                     </base:layout>
                  </base:Panel>
                  
                  <buildingselectedsidebar:PlanetOwnerPanel id="ownerPanel"
                     visible="{ML.latestPlanet.ssObject.ownerChanged != null
                     &amp;&amp; (
                     bSidebar.selectedBuilding.type == BuildingType.NPC_GROUND_FACTORY
                     || bSidebar.selectedBuilding.type == BuildingType.NPC_SPACE_FACTORY
                     || bSidebar.selectedBuilding.type == BuildingType.NPC_INFANTRY_FACTORY
                     || bSidebar.selectedBuilding.type == BuildingType.MOTHERSHIP
                     || bSidebar.selectedBuilding.type == BuildingType.HQ)}"
                     ownership="{ML.latestPlanet.ssObject.ownerChanged}"/>
                  
                  
                  <base:Panel title="{getString('renamePlanet')}" 
                              visible="{(bSidebar.selectedBuilding.type == BuildingType.MOTHERSHIP ||
                              bSidebar.selectedBuilding.type == BuildingType.HQ)
                              &amp;&amp; (bSidebar.selectedBuilding.upgradePart.level > 0)}">
                     <s:Group width="100%">
                        <s:Label text="{getString('message.changeName')}" 
                                 left="6" right="6"/>
                     </s:Group>
                     <base:BaseTextInput width="80%" id="newPlanetName" enter="renamePlanet()"
                                         maxChars="{Config.getMaxPlanetNameLength()}"/>
                     <s:Group width="100%">
                        <s:Button right="6"
                                  enabled="{canRenamePlanetTo(newPlanetName.text)
                                             &amp;&amp; !ML.latestPlanet.pending}"
                                  click="renamePlanet()" 
                                  label="{getString('label.changeName')}"/>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout horizontalAlign="center"/>
                     </base:layout>
                  </base:Panel>
                  
                  <buildingselectedsidebar:NpcUnitsBuildingSidebarComponents height="100%"/>
                  
                  <base:Panel title="{getString('selectedUpgradeCost')}" 
                              visible="{!(bSidebar.selectedBuilding.upgradePart.level == Config.getBuildingMaxLevel(bSidebar.selectedBuilding.type)
                              || !bSidebar.selectedBuilding.managable
                              || bSidebar.selectedBuilding.npc
                              || bSidebar.selectedBuilding.upgradePart.upgradeInProgress
                              || bSidebar.selectedBuilding.isGhost
                              || bSidebar.selectedBuilding.state == Building.REPAIRING)}">
                     <s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel
                                   type="{ResourceType.METAL}"
                                   textToDisplay="{bSidebar.metalCost.toFixed(2)}"
                                   toolTip="{Localizer.string(
                                   'Resources', ResourceType.METAL)}"
                                   labelStyleName="{bSidebar.metalCost >
                                   ML.latestPlanet.ssObject.metal.currentStock
                                   ? 'unsatisfied' : null}"/>
                           <base:ImageAndLabel
                                   type="{ResourceType.ZETIUM}"
                                   textToDisplay="{bSidebar.zetiumCost.toFixed(2)}"
                                   toolTip="{Localizer.string(
                                   'Resources', ResourceType.ZETIUM)}"
                                   labelStyleName="{bSidebar.zetiumCost >
                                   ML.latestPlanet.ssObject.zetium.currentStock
                                   ? 'unsatisfied' : null}"/>
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6"/>
                           </s:layout>
                        </s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel
                                   type="{ResourceType.ENERGY}"
                                   textToDisplay="{bSidebar.energyCost.toFixed(2)}"
                                   toolTip="{Localizer.string(
                                   'Resources', ResourceType.ENERGY)}"
                                   labelStyleName="{bSidebar.energyCost >
                                   ML.latestPlanet.ssObject.energy.currentStock
                                   ? 'unsatisfied' : null}"/>
                           <base:ImageAndLabel
                                   type="{ResourceType.TIME}"
                                   textToDisplay="{bSidebar.timeCost}"
                                   toolTip="{Localizer.string(
                                   'Resources', ResourceType.TIME)}"/>
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6"/>
                           </s:layout>
                        </s:Group>
                        <s:layout>
                           <s:HorizontalLayout gap="3" paddingLeft="6"/>
                        </s:layout> 
                     </s:Group>
                     <s:Group>
                        <s:Button right="6" label="{getString('upgrade')}" 
                                  enabled="{!(!bSidebar.canBeUpgraded ||
                                  bSidebar.selectedBuilding.state == Building.WORKING)}"
                                  click="bSidebar.upgrade_clickHandler(event)" top="10" />
                     </s:Group>
                     <base:AdvancedContainer visible="{!bSidebar.canBeUpgraded
                                             || bSidebar.selectedBuilding.state == Building.WORKING}">
                        <s:Label text="{getString('label.busy')}"
                                 styleName="unsatisfied" 
                                 visible="{bSidebar.selectedBuilding.state == Building.WORKING}"/>
                        
                        <s:Label text="{Localizer.string('Resources','notEnoughResources')}"
                                 styleName="unsatisfied" visible="{!bSidebar.canBeUpgraded}"/>
                        <s:Label text="{Localizer.string('Resources','enoughResourcesIn')}"
                                 visible="{bSidebar.resLeft > 0}" fontWeight="bold"/>
                        <base:TimeLabel text="{bSidebar.resLeftString}"
                                        visible="{bSidebar.resLeft > 0}"/>
                        
                        <!--s:Label text="{Localizer.string('Resources','insufficientRate')}" visible="{resLeft == -1}"
                        styleName="unsatisfied" width="100%"/-->
                        <s:Label text="{Localizer.string('Resources','additionalStorage',
                                 [bSidebar.missingStorageString])}"
                                 visible="{!bSidebar.enoughStorage}"
                                 styleName="unsatisfied"/>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingRight="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                     <base:layout>
                        <s:VerticalLayout gap="3" horizontalAlign="justify"/>
                     </base:layout>
                  </base:Panel>

                  <buildingselectedsidebar:RepairPanel
                          title="{getString('panelTitle.repairBuilding')}"
                          visible="{bSidebar.selectedBuilding.isDamaged
                          &amp;&amp; bSidebar.selectedBuilding.state !=
                          Building.REPAIRING &amp;&amp;
                          bSidebar.selectedBuilding.upgradePart.upgradeEndsAt
                              == null}"
                          metalCost="{bSidebar.metalRepairCost}"
                          energyCost="{bSidebar.energyRepairCost}"
                          zetiumCost="{bSidebar.zetiumRepairCost}"
                          timeCost="{bSidebar.timeRepairCost}"
                          canRepairBuilding="{bSidebar.canRepairBuilding}"
                          resLeft="{bSidebar.repairResLeft}"
                          resLeftString="{bSidebar.repairResLeftString}"
                          missingStorageString="{bSidebar.missingRepairStorageString}"
                          enoughStorage="{bSidebar.enoughRepairStorage}"
                          action="bSidebar.repairBuilding"
                          buttonLabel="{getString('label.repairBuilding')}"/>

                  <buildingselectedsidebar:RepairPanel
                          title="{getString('panelTitle.massRepairBuildings')}"
                          visible="{bSidebar.selectedBuilding.isDamaged
                          &amp;&amp; bSidebar.selectedBuilding.state !=
                          Building.REPAIRING &amp;&amp;
                          bSidebar.selectedBuilding.upgradePart.upgradeEndsAt == null
                          &amp;&amp; ML.latestPlanet.damagedBuildingsLength > 1}"
                          requiresVip="true"
                          metalCost="{bSidebar.metalMassRepairCost}"
                          energyCost="{bSidebar.energyMassRepairCost}"
                          zetiumCost="{bSidebar.zetiumMassRepairCost}"
                          timeCost="{bSidebar.timeMassRepairCost}"
                          canRepairBuilding="{bSidebar.canMassRepairBuilding}"
                          resLeft="{bSidebar.massRepairResLeft}"
                          resLeftString="{bSidebar.massRepairResLeftString}"
                          missingStorageString="{bSidebar.missingMassRepairStorageString}"
                          enoughStorage="{bSidebar.enoughMassRepairStorage}"
                          action="bSidebar.massRepairBuilding"
                          buttonLabel="{getString('label.massRepairBuilding')}"/>

                   
                  <base:Panel title="{getString('title.inactiveBuilding')}"
                              visible="{bSidebar.selectedBuilding.state == Building.INACTIVE}">
                     <s:Label left="6" right="6" fontSize="12"
                              text="{Localizer.string('Buildings', 'text.deactivated')}"/>
                  </base:Panel>

                  <base:Panel title="{getString('title.cooldown')}"
                              visible="{bSidebar.cooldownTimeLeft != null
                              &amp;&amp; bSidebar.selectedBuilding.type != BuildingType.NPC_HALL
                              &amp;&amp; !bSidebar.selectedBuilding.hasGuns}">
                     <s:Label fontSize="12"
                              text="{Localizer.string('Buildings', 'text.cooldown')}"/>
                     <base:TimeLabel text="{bSidebar.cooldownTimeLeft}"/>
                     <base:layout>
                        <s:VerticalLayout paddingLeft="6" paddingRight="6" horizontalAlign="justify"/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('title.rates')}" 
                              visible="{((bSidebar.selectedBuilding.metalRate != 0) ||
                              (bSidebar.selectedBuilding.energyRate != 0) ||
                              (bSidebar.selectedBuilding.zetiumRate != 0))
                              &amp;&amp; !bSidebar.selectedBuilding.isGhost
                              &amp;&amp; (bSidebar.selectedBuilding.state != Building.INACTIVE)
                              &amp;&amp; (bSidebar.selectedBuilding.state != Building.REPAIRING)}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Group visible="{bSidebar.selectedBuilding.metalRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{
                                               (bSidebar.selectedBuilding.metalRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.metalRate *
                                               (bSidebar.selectedBuilding.overdriven ? Config.getBuildingOverdriveOutput() : 1) *
                                               ML.resourcesMods.getRateMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.metalRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
                           <base:NextValueComp textToDisplay="{(bSidebar.selectedBuilding.nextMetalRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.nextMetalRate *
                                               (bSidebar.selectedBuilding.overdriven ? Config.getBuildingOverdriveOutput() : 1) *
                                               ML.resourcesMods.getRateMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextMetalRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{bSidebar.selectedBuilding.nextMetalRate &lt; 0?0xff0000:0x00ff00}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        <s:Group visible="{bSidebar.selectedBuilding.energyRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{
                                               (bSidebar.selectedBuilding.energyRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.energyRate *
                                               ML.resourcesMods.getRateMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.energyRate *
                                               (bSidebar.selectedBuilding.overdriven ? Config.getBuildingOverdriveUsage() : 1) *
                                               3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
                           <base:NextValueComp textToDisplay="{(bSidebar.selectedBuilding.nextEnergyRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.nextEnergyRate *
                                               ML.resourcesMods.getRateMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextEnergyRate *
                                               (bSidebar.selectedBuilding.overdriven ? Config.getBuildingOverdriveUsage() : 1) *
                                               3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{bSidebar.selectedBuilding.nextEnergyRate &lt; 0
                                                ? 0xff0000 : 0x00ff00}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>                        
                        <s:Group visible="{bSidebar.selectedBuilding.zetiumRate != 0}">
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{
                                               (bSidebar.selectedBuilding.zetiumRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.zetiumRate *
                                               (bSidebar.selectedBuilding.overdriven
                                               ? Config.getBuildingOverdriveOutput() : 1) *
                                               ML.resourcesMods.getRateMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.zetiumRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
                           <base:NextValueComp textToDisplay="{(bSidebar.selectedBuilding.nextZetiumRate >= 0?
                                               ('+' + NumberUtil.toShortString(bSidebar.selectedBuilding.nextZetiumRate *
                                               (bSidebar.selectedBuilding.overdriven ? Config.getBuildingOverdriveOutput() : 1) *
                                               ML.resourcesMods.getRateMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getRateBoost() * 3600, PRECISION)):
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextZetiumRate * 3600, PRECISION))+ ' / ' +
                                               Localizer.string('General', 'hour.short')}"
                                               lblColor="{bSidebar.selectedBuilding.nextZetiumRate &lt; 0?0xff0000:0x00ff00}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{(bSidebar.selectedBuilding.zetiumRate > 0
                                 || bSidebar.selectedBuilding.metalRate > 0)
                                 &amp;&amp; bSidebar.selectedBuilding.energyRate &lt; 0
                                 &amp;&amp; !bSidebar.selectedBuilding.overdriven}">
                           <s:Label text="{getString('label.activateOverdrive',
                                    [Config.getBuildingOverdriveOutput(),
                                    Config.getBuildingOverdriveUsage()])}"/>
                           <s:Group>
                              <s:Button right="6" label="{getString('button.activateOverdrive')}"
                                        click="bSidebar.toggleOverdrive(true)"/>
                           </s:Group>
                           <s:layout>
                              <s:VerticalLayout horizontalAlign="justify" paddingTop="6" gap="6"/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{bSidebar.selectedBuilding.overdriven}">
                           <s:Label text="{getString('label.deactivateOverdrive', 
                                    [Config.getBuildingOverdriveOutput(),
                                    Config.getBuildingOverdriveUsage()])}"/>
                           <s:Group>
                              <s:Button right="6" label="{getString('button.deactivateOverdrive')}"
                                        click="bSidebar.toggleOverdrive(false)"/>
                           </s:Group>
                           <s:layout>
                              <s:VerticalLayout horizontalAlign="justify" paddingTop="6" gap="6"/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout gap="3" paddingLeft="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  
                  <base:Panel title="{getString('storage')}" 
                              visible="{((bSidebar.selectedBuilding.metalStorage != 0) ||
                              (bSidebar.selectedBuilding.energyStorage != 0) ||
                              (bSidebar.selectedBuilding.zetiumStorage != 0) ||
                              (Building.getPopulation(bSidebar.selectedBuilding.type,
                              bSidebar.selectedBuilding.upgradePart.level) != 0))
                              &amp;&amp; !bSidebar.selectedBuilding.isGhost
                              &amp;&amp; !(bSidebar.selectedBuilding.upgradePart.level == 0)}">
                     <base:AdvancedContainer left="0" right="0">                        
                        <s:Group visible="{bSidebar.selectedBuilding.metalStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.metalStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextMetalStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.METAL)* 
                                               ML.latestPlanet.ssObject.metal.boost.getStorageBoost(), PRECISION)}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{bSidebar.selectedBuilding.energyStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.energyStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextEnergyStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.ENERGY)* 
                                               ML.latestPlanet.ssObject.energy.boost.getStorageBoost(), PRECISION)}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{bSidebar.selectedBuilding.zetiumStorage != 0}">
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.zetiumStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getStorageBoost(), PRECISION)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
                           <base:NextValueComp textToDisplay="{
                                               NumberUtil.toShortString(bSidebar.selectedBuilding.nextZetiumStorage*
                                               ML.resourcesMods.getStorageMod(ResourceType.ZETIUM)* 
                                               ML.latestPlanet.ssObject.zetium.boost.getStorageBoost(), PRECISION)}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <s:Group visible="{Building.getPopulation(bSidebar.selectedBuilding.type,
                                 bSidebar.selectedBuilding.upgradePart.level) != 0}">
                           <base:ImageAndLabel type="{ResourceType.POPULATION}" 
                                               textToDisplay="{Building.getPopulation(bSidebar.selectedBuilding.type,
                                               bSidebar.selectedBuilding.upgradePart.level)}"
                                               toolTip="{Localizer.string('Resources', ResourceType.POPULATION)}"/>
                           <base:NextValueComp textToDisplay="{Building.getPopulation(bSidebar.selectedBuilding.type,
                                               bSidebar.selectedBuilding.upgradePart.level + 1)}"
                                               visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                               &amp;&amp; bSidebar.selectedBuilding.managable}"
                                               toolTip="{getString('toolTip.afterUpgrade')}"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        
                        <base:layout>
                           <s:VerticalLayout gap="3" paddingLeft="6" horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('scientists')}" 
                              visible="{!((bSidebar.selectedBuilding.type != BuildingType.RESEARCH_CENTER) ||
                              (bSidebar.selectedBuilding.upgradePart.upgradeEndsAt != null) ||
                              (bSidebar.selectedBuilding.isGhost))}">
                     <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" paddingLeft="6"
                                         textToDisplay="{bSidebar.selectedBuilding.scientists}"
                                         toolTip="{Localizer.string('Resources', ResourceType.SCIENTISTS)}"/>
                     <base:NextValueComp textToDisplay="{bSidebar.selectedBuilding.nextScientists}"
                                         visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                         &amp;&amp; bSidebar.selectedBuilding.managable}"
                                         toolTip="{getString('toolTip.afterUpgrade')}"/>
                     <base:layout>
                        <s:HorizontalLayout/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('special')}" 
                              visible="{(bSidebar.selectedBuilding.radarStrength != 0) &amp;&amp;
                              (bSidebar.selectedBuilding.upgradePart.upgradeEndsAt == null) &amp;&amp;
                              (!bSidebar.selectedBuilding.isGhost)}">
                     <s:Label text="{Localizer.string('Buildings', 'property.radar.strength') + ': ' + 
                              bSidebar.selectedBuilding.radarStrength.toString()}" paddingLeft="6"/>
                     <base:NextValueComp textToDisplay="{bSidebar.selectedBuilding.nextRadarStrength.toString()}"
                                         visible="{bSidebar.selectedBuilding.upgradePart.level &lt; bSidebar.selectedBuilding.maxLevel
                                         &amp;&amp; bSidebar.selectedBuilding.managable}"
                                         toolTip="{getString('toolTip.afterUpgrade')}"/>
                     <base:layout>
                        <s:HorizontalLayout verticalAlign="middle"/>
                     </base:layout>
                  </base:Panel>
                  
                  <base:Panel title="{getString('title.boost')}" 
                              visible="{(bSidebar.selectedBuilding.energyRate > 0
                              || bSidebar.selectedBuilding.metalRate > 0
                              || bSidebar.selectedBuilding.zetiumRate > 0
                              || bSidebar.selectedBuilding.metalStorage > 0
                              || bSidebar.selectedBuilding.energyStorage > 0
                              || bSidebar.selectedBuilding.zetiumStorage > 0)
                              &amp;&amp; bSidebar.selectedBuilding.type != BuildingType.MOTHERSHIP
                              &amp;&amp; bSidebar.selectedBuilding.type != BuildingType.HQ}">
                     <base:AdvancedContainer left="0" right="0">
                        <buildingselectedsidebar:CResourceBoostBlock resource="{ML.latestPlanet.ssObject.metal}"
                                                                     visible="{bSidebar.selectedBuilding.metalRate > 0
                                                                     || bSidebar.selectedBuilding.metalStorage > 0}"/>
                        <buildingselectedsidebar:CResourceBoostBlock resource="{ML.latestPlanet.ssObject.energy}"
                                                                     visible="{bSidebar.selectedBuilding.energyRate > 0
                                                                     || bSidebar.selectedBuilding.energyStorage > 0}"/>
                        <buildingselectedsidebar:CResourceBoostBlock resource="{ML.latestPlanet.ssObject.zetium}"
                                                                     visible="{bSidebar.selectedBuilding.zetiumRate > 0
                                                                     || bSidebar.selectedBuilding.zetiumStorage > 0}"/>
                        <base:layout>
                           <s:VerticalLayout horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('tileBonuses')}" 
                              visible="{bSidebar.selectedBuilding.constructorMod != 0
                              || bSidebar.selectedBuilding.energyMod != 0
                              || bSidebar.selectedBuilding.armorMod != 0}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Label
                           text="{getString('construction.bonus') + ': ' +
                        (bSidebar.selectedBuilding.constructorMod > 0 ? '+' : '')
                        + bSidebar.selectedBuilding.constructorMod + '%'}"
                           visible="{bSidebar.selectedBuilding.constructorMod != 0}"
                           color="{bSidebar.selectedBuilding.constructorMod > 0
                              ? 0x00ff00 : 0xff0000}"/>
                        <s:Label
                           text="{getString('energy.bonus') + ': ' +
                        (bSidebar.selectedBuilding.energyMod > 0 ? '+' : '')
                        + bSidebar.selectedBuilding.energyMod + '%'}"
                           visible="{bSidebar.selectedBuilding.energyMod != 0}"
                           color="{bSidebar.selectedBuilding.energyMod > 0
                              ? 0x00ff00 : 0xff0000}"/>
                        <s:Label
                           text="{getString('armor.bonus') + ': ' +
                        (bSidebar.selectedBuilding.armorMod > 0 ? '+' : '')
                        + bSidebar.selectedBuilding.armorMod + '%'}"
                           visible="{bSidebar.selectedBuilding.armorMod != 0}"
                           color="{bSidebar.selectedBuilding.armorMod > 0
                              ? 0x00ff00 : 0xff0000}"/>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('selfDestruct')}"
                              visible="{bSidebar.selectedBuilding.managable
                              &amp;&amp; bSidebar.selectedBuilding.destroyable
                              &amp;&amp; !bSidebar.selectedBuilding.npc
                              &amp;&amp; !bSidebar.selectedBuilding.isGhost
                              &amp;&amp; bSidebar.selectedBuilding.upgradePart.upgradeEndsAt == null}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Group
                           width="100%"
                           visible="{bSidebar.selectedBuilding.upgradePart.level > 0}">
                           <s:Label text="{getString('destructResources')}"
                                    left="0" right="0"/>
                        </s:Group>
                        <base:ImageAndLabel type="{ResourceType.METAL}" paddingLeft="6" 
                                            visible="{bSidebar.selectedBuilding.upgradePart.level > 0}"
                                            textToDisplay="{MathUtil.round(
                                            Resource.calculateBuildingDestructRevenue(
                                            bSidebar.selectedBuilding.type,
                                            bSidebar.selectedBuilding.upgradePart.level,
                                            ResourceType.METAL)
                                            + (bSidebar.selectedBuilding.constructableId == 0
                                            || Resource.getModelCancelRevenueString(
                                            bSidebar.constructableObject, ResourceType.METAL,
                                            bSidebar.constructableBuiltPart) == null
                                            ? 0
                                            : Resource.getModelCancelRevenue(
                                            bSidebar.constructableObject, ResourceType.METAL,
                                            bSidebar.constructableBuiltPart))
                                            + (bSidebar.selectedBuilding.getQueueTotalResourceValue
                                            (ResourceType.METAL)), 2).toString()}"/>
                        <base:ImageAndLabel type="{ResourceType.ENERGY}" paddingLeft="6" 
                                            visible="{bSidebar.selectedBuilding.upgradePart.level > 0}"
                                            textToDisplay="{MathUtil.round(
                                            Resource.calculateBuildingDestructRevenue(bSidebar.selectedBuilding.type,
                                            bSidebar.selectedBuilding.upgradePart.level, ResourceType.ENERGY)
                                            + (bSidebar.selectedBuilding.constructableId == 0
                                            || Resource.getModelCancelRevenueString(
                                            bSidebar.constructableObject, ResourceType.ENERGY,
                                            bSidebar.constructableBuiltPart) == null
                                            ? 0
                                            : Resource.getModelCancelRevenue(
                                            bSidebar.constructableObject, ResourceType.ENERGY,
                                            bSidebar.constructableBuiltPart))
                                            + (bSidebar.selectedBuilding.getQueueTotalResourceValue
                                            (ResourceType.ENERGY)), 2).toString()}"/>
                        <base:ImageAndLabel type="{ResourceType.ZETIUM}" paddingLeft="6"
                                            visible="{bSidebar.selectedBuilding.upgradePart.level > 0}"
                                            textToDisplay="{MathUtil.round(
                                            Resource.calculateBuildingDestructRevenue(bSidebar.selectedBuilding.type,
                                            bSidebar.selectedBuilding.upgradePart.level, ResourceType.ZETIUM)
                                            + (bSidebar.selectedBuilding.constructableId == 0
                                            || Resource.getModelCancelRevenueString(
                                            bSidebar.constructableObject, ResourceType.ZETIUM,
                                            bSidebar.constructableBuiltPart) == null
                                            ? 0
                                            : Resource.getModelCancelRevenue(
                                            bSidebar.constructableObject, ResourceType.ZETIUM,
                                            bSidebar.constructableBuiltPart))
                                            + (bSidebar.selectedBuilding.getQueueTotalResourceValue
                                            (ResourceType.ZETIUM)), 2).toString()}"/>

                        <base:ImageAndLabel type="{ResourceType.POPULATION}" paddingLeft="6"
                                            visible="{bSidebar.selectedBuilding.constructableId != 0
                                            &amp;&amp; (bSidebar.constructableObject is Unit)}"
                                            textToDisplay="{
                                           (bSidebar.selectedBuilding.constructableId != 0
                                            &amp;&amp; (bSidebar.constructableObject is Unit))
                                               ? (Config.getUnitPopulation(
                                                  Unit(bSidebar.constructableObject).type)
                                                  + bSidebar.selectedBuilding.getQueueTotalPopulation())
                                                  .toString()
                                               : ''}"/>
                        <base:Warning width="100%" showSign="false"
                                      visible="{!(ownerPanel.minDestructDaysPassed
                                      || bSidebar.canDestroyBuilding)}"
                                      text="{getString('warning.selfDestructGuard',
                                      [DateUtil.secondsToHumanString(
                                      Config.getBuildingDestructSafeguardTime(),
                                      2)])}"/>
                        <s:Group width="100%">
                           <s:Button right="6" label="{bSidebar.canDestroyBuilding
                                     ? getString('destroy')
                                     : bSidebar.destructRemainingTime}"
                                     enabled="{!bSidebar.selectedBuilding.pending
                                     &amp;&amp; (ownerPanel.minDestructDaysPassed
                                      || bSidebar.canDestroyBuilding)}"
                                     skinClass="{bSidebar.canDestroyBuilding
                                     ? ButtonSkin : CreditButtonSkin}"
                                     click="bSidebar.selfDestruct_clickHandler(event)"/>
                        </s:Group>
                        <base:Warning width="100%" showSign="false"
                                      visible="{bSidebar.selectedBuilding.state == Building.WORKING}"
                                      text="{getString('warning.buildingWorking')}"/>
                        <s:Group width="100%" visible="{bSidebar.canDestroyBuilding}">
                           <s:Label text="{bSidebar.totalDestructTimeLbl}"
                                    left="0" right="0"/>
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingTop="6"
                                             paddingRight="6" paddingBottom="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:Panel title="{getString('move')}" 
                              visible="{bSidebar.selectedBuilding.managable
                              &amp;&amp; !bSidebar.selectedBuilding.npc
                              &amp;&amp; !bSidebar.selectedBuilding.isGhost
                              &amp;&amp; bSidebar.selectedBuilding.upgradePart.upgradeEndsAt == null
                              &amp;&amp; bSidebar.selectedBuilding.state != Building.WORKING}">
                     <base:AdvancedContainer left="0" right="0">
                        <s:Label text="{Localizer.string('Credits', 'label.movePrice',
                           [Config.getMoveCredits()])}"/>
                        <s:Group>
                           <s:Button right="6" label="{Localizer.string('Credits',
                                     ML.player.creds &lt; Config.getMoveCredits()
                                       ? 'label.buy' : 'label.move')}"
                                     enabled="{!bSidebar.selectedBuilding.pending}"
                                     skinClass="components.skins.CreditButtonSkin" 
                                     click="bSidebar.moveButton_click(event)"/>
                        </s:Group>
                        <s:Label visible="{ML.player.creds &lt; Config.getMoveCredits()}"
                                 text="{Localizer.string('Credits', 'label.notEnough', 
                                 [Config.getMoveCredits() - ML.player.creds])}" 
                                 paddingLeft="6" paddingRight="6"
                                 textAlign="center" styleName="unsatisfied"
                                 fontWeight="bold"/>
                        <base:layout>
                           <s:VerticalLayout horizontalAlign="justify"
                                             paddingLeft="6" paddingRight="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
                  
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="justify"/>
                  </base:layout>
               </base:AdvancedContainer>
               <base:Panel title="{getString('title.buildingBonus')}"
                           visible="{Config.getBuildingCredsBonus(
                              bSidebar.selectedBuilding.type) > 0
                           || Config.getBuildingVictoryPtsBonus(
                              bSidebar.selectedBuilding.type) > 0}">
                  <base:AdvancedContainer left="0" right="0">
                     <s:Label visible="{bSidebar.selectedBuilding.type
                        == BuildingType.NPC_HALL}"
                              text="{'\u2022 '+getString('label.victoryPoint',
                        [Config.getBuildingVictoryPtsBonus(
                           bSidebar.selectedBuilding.type)])}"/>
                     <s:Label visible="{bSidebar.selectedBuilding.type
                        == BuildingType.NPC_HALL}"
                              text="{'\u2022 '+getString('label.cred',
                        [Config.getBuildingCredsBonus(
                           bSidebar.selectedBuilding.type)])}"/>
                     <base:layout>
                        <s:VerticalLayout horizontalAlign="justify"
                                          paddingLeft="6" paddingRight="6"/>
                     </base:layout>
                  </base:AdvancedContainer>
               </base:Panel>
            </base:AdvancedContainer>
         </s:Group>
      </base:Scroller>
   </s:Group>
</base:BaseContainer>
