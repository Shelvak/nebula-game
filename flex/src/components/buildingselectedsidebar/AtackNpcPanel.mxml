<?xml version="1.0" encoding="utf-8"?>
<base:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
            xmlns:s="library://ns.adobe.com/flex/spark" 
            xmlns:mx="library://ns.adobe.com/flex/mx" 
            xmlns:base="components.base.*"
            title="{RM.getString('buildingSelectedSidebar', 'attack')}" 
            xmlns:buildingselectedsidebar="components.buildingselectedsidebar.*">
   <fx:Metadata>
      [ResourceBundle('buildingSelectedSidebar')]
   </fx:Metadata>  
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.ZoomInButtonSkin;
         
         import controllers.units.UnitsCommand;
         
         import globalevents.GUnitEvent;
         
         import models.ModelLocator;
         import models.unit.Unit;
         import models.unit.UnitKind;
         import models.unit.UnitsFlank;
         
         import mx.collections.ArrayCollection;
         import mx.events.CollectionEvent;
         import mx.events.FlexEvent;
         
         public var npcId: int;
         
         [Bindable]
         private var flank1: ArrayCollection;
         
         [Bindable]
         private var flank2: ArrayCollection;
         
         [Bindable (event="selectionChange")]
         private function get selectedIds(): Array
         {
            var tArray: Array = [];
            for each (var unit: Unit in f1.selectedUnits)
            tArray.push(unit.id);
            for each (unit in f2.selectedUnits)
            tArray.push(unit.id);
            return tArray;
         }
         
         public function set unitsList(value: ArrayCollection): void
         {
            buildFlankComps();
            value.addEventListener(CollectionEvent.COLLECTION_CHANGE, buildFlankComps);
         }
         
         private function getGroundUnits(units: ArrayCollection): ArrayCollection
         {
            var groundUnits: ArrayCollection = new ArrayCollection();
            for each (var unit: Unit in units)
            {
               if (unit.kind == UnitKind.GROUND)
                  groundUnits.addItem(unit);
            }
            return groundUnits;
         }
         
         private function selectAllInFlank(flankComp: SidebarFlank): void
         {
            flankComp.selectAll();
         }
         
         private function deselectAllInFlank(flankComp: SidebarFlank): void
         {
            flankComp.deselectAll();
         }
         
         private function buildFlankComps(event: Event = null): void
         {
            var oldSelected: Array = [];
            
            for each (var selUnit: Unit in f1.selectedUnits)
            oldSelected.push(selUnit);
            for each (selUnit in f2.selectedUnits)
            oldSelected.push(selUnit);
            
            flank1 = new ArrayCollection();
            flank2 = new ArrayCollection();
            for each (var unit: Unit in getGroundUnits(ML.latestPlanet.units))
            if (unit.level > 0)
            {
               switch (unit.flank)
               {
                  case 0:
                     flank1.addItem(unit);
                     break;
                  case 1:
                     flank2.addItem(unit);
                     break;
               }
            }
            f1.selectUnits(oldSelected);
            f2.selectUnits(oldSelected);
         }
         
         private function getActive(unitsCont: ArrayCollection): ArrayCollection
         {
            var activeUnits: ArrayCollection = new ArrayCollection();
            for each (var unit: Unit in unitsCont)
            if (unit.level > 0)
               activeUnits.addItem(unit);
            return activeUnits;
         }
         
         [Bindable]
         private var attackPending: Boolean = false;
         
         private function removePending(e: Event): void
         {
            attackPending = false  
         }
         
         protected function attack_clickHandler(event:MouseEvent):void
         {
            attackPending = true;
            EventBroker.subscribe(GUnitEvent.ATTACK_APPROVED, removePending);
            new UnitsCommand(
               UnitsCommand.ATTACK,
               {planetId: ML.latestPlanet.id,
                  targetId: npcId,
                  unitIds: selectedIds}
            ).dispatch ();
            deselectAll();
         }
         
         protected function selectAll_clickHandler(event:MouseEvent):void
         {
            f1.selectAll();
            f2.selectAll();
         }
         
         protected function deselectAll():void
         {
            f1.deselectAll();
            f2.deselectAll();
         }
         
         protected function f1_clickHandler(event:MouseEvent):void
         {
            dispatchEvent(new Event("selectionChange"));
         }
         
      ]]>
   </fx:Script>
   <base:SpinnerContainer busy="{attackPending}"  top="0" left="0" right="0" bottom="0" 
                          timeoutEnabled="false">
      
      <base:ScrollerVariableScrollStep id="scrollCont" left="0" right="0" top="0" bottom="0" horizontalScrollPolicy="off"
                                       stepMultiplyer="5">
         
         <base:AdvancedContainer left="0" right="0" clipAndEnableScrolling="true">
            
            <s:Group visible="{flank1.length > 0}">
               <buildingselectedsidebar:SidebarFlank id="f1" units="{flank1}" flankNr="1"
                                                     left="0" right="0" top="0" bottom="0"
                                                     click="f1_clickHandler(event)"/>
               <s:Button skinClass="components.skins.ZoomOutButtonSkin" right="20" top="0"
                         click="deselectAllInFlank(f1)"/>
               <s:Button skinClass="components.skins.ZoomInButtonSkin" right="3" top="0"
                         click="selectAllInFlank(f1)"/>
            </s:Group>
            
            <s:Group visible="{flank2.length > 0}">
               <buildingselectedsidebar:SidebarFlank id="f2" units="{flank2}" flankNr="2"
                                                     left="0" right="0" top="0" bottom="0"
                                                     click="f1_clickHandler(event)"/>
               <s:Button skinClass="components.skins.ZoomOutButtonSkin" right="20" top="0"
                         click="deselectAllInFlank(f2)"/>
               <s:Button skinClass="components.skins.ZoomInButtonSkin" right="3" top="0"
                         click="selectAllInFlank(f2)"/>
            </s:Group>
            
            <s:Label text="{RM.getString('buildingSelectedSidebar', 'label.noUnits')}"
                     visible="{!(flank1.length > 0 || flank2.length > 0)}" styleName="h3"/>
            <s:Group>
               <s:Button label="{RM.getString('buildingSelectedSidebar', 'deselectAll')}" 
                         click="deselectAll()"
                         visible="{flank1.length > 0 || flank2.length > 0}"/>
               <s:Button label="{RM.getString('buildingSelectedSidebar', 'selectAll')}" 
                         click="selectAll_clickHandler(event)"
                         visible="{flank1.length > 0 || flank2.length > 0}"/>
               <s:layout>
                  <s:HorizontalLayout paddingLeft="6" paddingRight="6"/>
               </s:layout>
            </s:Group>
            
            <s:Group>
               <s:Button label="{RM.getString('buildingSelectedSidebar', 'attack')}" 
                         click="attack_clickHandler(event)"
                         enabled="{selectedIds.length > 0}"
                         visible="{flank1.length > 0 || flank2.length > 0}"
                         right="6"/>
            </s:Group>
            
            <base:layout>
               <s:VerticalLayout horizontalAlign="justify" />
            </base:layout>
            
         </base:AdvancedContainer>
         
      </base:ScrollerVariableScrollStep>
      
   </base:SpinnerContainer>
   
</base:Panel>
