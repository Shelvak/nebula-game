<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx" 
                    xmlns:base="components.base.*"
                    xmlns:unit="components.unit.*"
                    xmlns:components="utils.components.*"
                    xmlns:infoscreen="components.infoscreen.*"
                    creationComplete="this_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.ListNonScrollableSkin;
         import components.skins.YellowButtonSkin;
         
         import config.Config;
         
         import controllers.GlobalFlags;
         import controllers.objects.ObjectClass;
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import globalevents.GScreenChangeEvent;
         import globalevents.GlobalEvent;
         
         import models.building.Building;
         import models.infoscreen.ArmorTypes;
         import models.infoscreen.Gun;
         import models.infoscreen.InfoObject;
         import models.parts.BuildingUpgradable;
         import models.parts.TechnologyUpgradable;
         import models.parts.Upgradable;
         import models.parts.UpgradableType;
         import models.parts.events.UpgradeEvent;
         import models.resource.ResourceType;
         import models.technology.Technology;
         import models.technology.events.TechnologyEvent;
         import models.unit.ReachKind;
         
         import mx.collections.ArrayCollection;
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.FlexEvent;
         
         import spark.filters.BlurFilter;
         import spark.primitives.Rect;
         
         import utils.DateUtil;
         import utils.Localizer;
         import utils.MathUtil;
         import utils.ModelUtil;
         import utils.StringUtil;
         import utils.assets.AssetNames;
         
         private static const MAX_WEAK_LENGTH: int = 1000;
         
         private static const blur: BlurFilter = new BlurFilter(1.3,1.3,1);
         
         private static const blurFilter: Array = new Array(blur);
         
         //properties that dont need to be displayed in difference column of datagrid
         private static const diffIgnorableProperties: Array =
            ['upgradeTime', 'metal.cost', 'energy.cost', 'zetium.cost', 'deploysTo', 'volume'];
         
         //properties that dont need to be displayed in data grid
         private static const ignorableProperties: Array = 
            ['width', 'height', 'metal.starting', 'energy.starting', 'zetium.starting', 'maxLevel', 'coords', 'constructor.items',
               'kind', 'constructable.position', 'constructable', 'npc', 'requirement', 'ui', 'actions', 'box', 'dead.passable', 'frameWidth',
               'gunPoints', 'targetPoint', 'xpModifier', 'appliesTo', 'armor', 'deploysTo', 'upgradeTime', 'metal.cost', 'energy.cost', 'zetium.cost',
            'unitBonus'];
         
         [Bindable]
         private var _infoModel: InfoObject;
         
         [Bindable]
         private var guns: ArrayCollection = new ArrayCollection();
         
         [Bindable]
         private var dataForTable: ArrayCollection = new ArrayCollection();
         
         [Bindable]
         private var fullCostData: ArrayCollection = new ArrayCollection();
         
         [Bindable]
         private var metalCostString: String;
         
         [Bindable]
         private var energyCostString: String;
         
         [Bindable]
         private var zetiumCostString: String;
         
         [Bindable]
         private var timeCostString: String;
         
         [Bindable]
         private var cMetalCostString: String;
         
         [Bindable]
         private var cEnergyCostString: String;
         
         [Bindable]
         private var cZetiumCostString: String;
         
         [Bindable]
         private var cTimeCostString: String;
         
         [Bindable]
         private var tMetalCostString: String;
         
         [Bindable]
         private var tEnergyCostString: String;
         
         [Bindable]
         private var tZetiumCostString: String;
         
         [Bindable]
         private var tTimeCostString: String;
         
         [Bindable]
         private var dMetalCostString: String;
         
         [Bindable]
         private var dEnergyCostString: String;
         
         [Bindable]
         private var dZetiumCostString: String;
         
         [Bindable]
         private var dTimeCostString: String;
         
         [Bindable]
         private var columnsWidth: int;
         
         //old model to keep its events type for listeners
         private var oldOriginModel: *; 
         
         private function dealWithPropertiesChange(e: Event): void
         {
            _infoModel = new InfoObject(oldOriginModel);  
            lvlSelector.value = _infoModel.usefulLevel;
            refreshDataForTable();
         }
         
         private function calculateTableColumnWidth():void
         {
            if (_infoModel.currentLevel == 0)
            {
               columnsWidth = int(0.3 * dataTable.width);
            }
            else
            {
               if (_infoModel.currentLevel != _infoModel.maxLevel)
                  columnsWidth = int(0.4 * dataTable.width)
               else
                  columnsWidth = int(0.2 * dataTable.width)
            }
         }
         
         public function set infoModel(value: *): void
         {
            guns.removeAll();
            if (oldOriginModel != null)
            {
               if (oldOriginModel is Building)
               {
                  oldOriginModel.upgradePart.removeEventListener(
                     UpgradeEvent.LVL_CHANGE, 
                     dealWithPropertiesChange
                  );
               }
               if (oldOriginModel is Technology)
               {
                  oldOriginModel.upgradePart.removeEventListener(
                     UpgradeEvent.LVL_CHANGE, 
                     dealWithPropertiesChange
                  );
               }
            }
            _infoModel = new InfoObject(value);  
            oldOriginModel = value;
            if (value != null)
            {
               if (value is Building || value is Technology)
               {
                  value.upgradePart.addEventListener(
                     UpgradeEvent.LVL_CHANGE, 
                     dealWithPropertiesChange
                  );
               }
               lvlSelector.value = _infoModel.usefulLevel;
               sliderMoved = false;
               refreshDataForTable();
               sViewport.verticalScrollPosition = 0;
            }
         }
         
         private var sliderMoved: Boolean = false;
         
         public function refreshDataForTable(): void
         {  
            dataForTable.removeAll();
            fullCostData.removeAll();
            for (var element: String in _infoModel.infoData)
            {
               if ((ignorableProperties.indexOf(element) == -1) && (ignorableProperties.indexOf(element.split('.')[0]) == -1)) 
               {
                  var currentValue: Number;
                  var newValue: Number;
                  
                  if (element == 'guns')
                  {
                     if (!sliderMoved)
                     {
                        createGuns(_infoModel.infoData[element]);
                     }
                  }
                  else 
                  {
                     var useRounding: Boolean = false;
                     if ((element.indexOf(ResourceType.METAL) != -1 ||
                        element.indexOf(ResourceType.ENERGY) != -1 ||
                        element.indexOf(ResourceType.ZETIUM) != -1) && (_infoModel.objectType == ObjectClass.BUILDING))
                     {
                        var parts: Array = element.split('.');
                        if (parts[1] == Building.GENERATE)
                        {
                           currentValue = Building.calculateResourceGenerationRate(_infoModel.type, parts[0],
                              {'level': _infoModel.usefulLevel});
                           newValue = Building.calculateResourceGenerationRate(_infoModel.type, parts[0],
                              {'level': lvlSelector.value});
                        }
                        else if (parts[1] == Building.USE)
                        {
                           currentValue = Building.calculateResourceUsageRate(_infoModel.type, parts[0],
                              {'level': _infoModel.usefulLevel});
                           newValue = Building.calculateResourceUsageRate(_infoModel.type, parts[0],
                              {'level': lvlSelector.value});
                        }
                        else if (parts[1] == Building.STORE)
                        {
                           currentValue = Building.calculateResourceMaxStorageCapacity(_infoModel.type, parts[0],
                              {'level': _infoModel.usefulLevel});
                           newValue = Building.calculateResourceMaxStorageCapacity(_infoModel.type, parts[0],
                              {'level': lvlSelector.value});
                        }
                        useRounding = true;
                     }
                     else if (element == Building.HEALING_COST_MOD || element == Building.HEALING_TIME_MOD)
                     {
                        currentValue = MathUtil.round(Upgradable.evalUpgradableFormula(UpgradableType.BUILDINGS, 
                           _infoModel.type, element, {'level': _infoModel.usefulLevel}),
                           Config.getRoundingPrecision());
                        newValue = MathUtil.round(Upgradable.evalUpgradableFormula(UpgradableType.BUILDINGS, 
                           _infoModel.type, element, {'level': lvlSelector.value}),
                           Config.getRoundingPrecision());
                        useRounding = true;
                     }
                     else if (element == Building.RADAR_STRENGTH)
                     {
                        currentValue = Building.calculateRadarStrenth(_infoModel.type,
                           {'level': _infoModel.usefulLevel});
                        newValue = Building.calculateRadarStrenth(_infoModel.type,
                           {'level': lvlSelector.value});
                        useRounding = true;
                     }
                     else if (element == TechnologyUpgradable.SCIENTISTS_MIN)
                     {
                        currentValue = TechnologyUpgradable.getMinScientists(_infoModel.type, _infoModel.usefulLevel);
                        newValue = TechnologyUpgradable.getMinScientists(_infoModel.type, lvlSelector.value);
                     }
                     else if (element.indexOf(TechnologyUpgradable.MOD) == 0)
                     {
                        if (_infoModel.objectType == ObjectClass.BUILDING)
                        {
                           currentValue = BuildingUpgradable.getConstructionMod(_infoModel.type, _infoModel.usefulLevel);
                           newValue = BuildingUpgradable.getConstructionMod(_infoModel.type, lvlSelector.value);
                        }
                        else
                        {
                           currentValue = TechnologyUpgradable.getMod(_infoModel.type, _infoModel.usefulLevel,
                              element.slice(4));
                           newValue = TechnologyUpgradable.getMod(_infoModel.type, lvlSelector.value,
                              element.slice(4));
                        }
                     }
                     else
                     {
                        currentValue = StringUtil.evalFormula(_infoModel.infoData[element], 
                           {"level": _infoModel.usefulLevel});
                        newValue = StringUtil.evalFormula(_infoModel.infoData[element], 
                           {"level": lvlSelector.value});
                     }
                     
                     var label: String;
                     switch (_infoModel.objectType)
                     {
                        case ObjectClass.BUILDING:
                           label = Localizer.string('Buildings', 'property.' + element);
                           break;
                        case ObjectClass.TECHNOLOGY:
                           label = Localizer.string('Technologies', 'property.' + element);
                           break;
                        case ObjectClass.UNIT:
                           label = Localizer.string('Units', 'property.' + element);
                           break;
                     }
                     if (label == null) {
                        label = "!!! " + element;
                     }
                     var newValueString: String = newValue.toString();
                     var currentValueString: String = currentValue.toString();
                     var diffString: String;
                     if (useRounding)
                     {
                        diffString = MathUtil.round(newValue - currentValue, 
                           Config.getRoundingPrecision()).toString();
                     }
                     else
                     {
                        diffString = (newValue - currentValue).toString();
                     }
                     
                     if (element.indexOf(TechnologyUpgradable.MOD) == 0)
                     {
                        newValueString += '%';
                        currentValueString += '%';
                        diffString += '%';
                     }
                     
                     if (diffIgnorableProperties.indexOf(element) != -1)
                     {
                        diffString = '-';
                     }
                     dataForTable.addItem(
                        {
                           'property': label,
                           'current':currentValueString,
                           'after':newValueString,
                           'diff':diffString
                        }
                     );
                  }
               }
            }
            if (!sliderMoved)
            {
               refreshWeakAgainst();
            }
            sliderMoved = false;
            dataForTable.sort = new Sort();
            dataForTable.sort.fields = [new SortField('property', true, false)];
            dataForTable.refresh();
            recalculateFullCosts();
            calculateTableColumnWidth();
            selectedGun = gunsList.selectedItem;
            if (selectedGun != null)
            {
               bestAgainst = selectedGun.getBestTargets(lvlSelector.value, getTechDamageMod(_infoModel.type));
               bestAgainst.sort = new Sort();
               bestAgainst.sort.fields = [new SortField('type')];
               bestAgainst.refresh();
            }
         }
         
         private function createGuns(_guns: Array): void
         {
            guns.removeAll();
            var i: int = -1;
            for each (var gun: Object in _guns)
            {
               i++;
               var newGun: Gun;
               if (_infoModel.objectType == ObjectClass.BUILDING)
               {
                  newGun = new Gun(Config.getBuildingGunType(_infoModel.type, i), gun.dpt, 
                     gun.period, gun.damage, gun.reach);
               }
               if (_infoModel.objectType == ObjectClass.UNIT)
               {
                  newGun = new Gun(Config.getUnitGunType(_infoModel.type, i), gun.dpt, 
                     gun.period, gun.damage, gun.reach);
               }
               var grouped: Boolean = false;
               for each (var oldGun: Gun in guns)
               {
                  if (oldGun.hashKey() == newGun.hashKey())
                  {
                     oldGun.count++;
                     grouped = true;
                  }
               }
               if (!grouped)
               {
                  guns.addItem(newGun);
               }
            }
            gunsList.addEventListener(FlexEvent.UPDATE_COMPLETE, gunsList_changeHandler);
         }
         
         private function recalculateFullCosts(): void
         {
            var fullMetalCost: int = 0;
            var fullEnergyCost: int = 0;
            var fullZetiumCost: int = 0;
            var fullTimeCost: int = 0;
            
            function getCost(key: String, level: int): Number
            {
               return Upgradable.calculateCost((_infoModel.objectType == ObjectClass.BUILDING?
                  UpgradableType.BUILDINGS:(_infoModel.objectType == ObjectClass.UNIT?
                     UpgradableType.UNITS:UpgradableType.TECHNOLOGIES)), _infoModel.type, key, 
                  {'level': level});
            }
            
            function getTechUpgradeTime(level: int): int
            {
               return TechnologyUpgradable.calculateTechUpgradeTime(_infoModel.type, level,
                  TechnologyUpgradable.getMinScientists(_infoModel.type, level), 
                  TechnologyUpgradable.getMinScientists(_infoModel.type, level), false);
            }
            
            if (_infoModel.currentLevel + 1 <= lvlSelector.value)
            {
               for (var i: int = _infoModel.currentLevel + 1; i <= lvlSelector.value; i++)
               {
                  fullMetalCost += getCost(ResourceType.METAL, i);
                  fullEnergyCost += getCost(ResourceType.ENERGY, i);
                  fullZetiumCost += getCost(ResourceType.ZETIUM, i);
                  if (_infoModel.objectType == ObjectClass.TECHNOLOGY)
                     fullTimeCost += getTechUpgradeTime(i);
                  else
                     fullTimeCost += Upgradable.calculateUpgradeTime((
                        _infoModel.objectType == ObjectClass.BUILDING?
                        UpgradableType.BUILDINGS:UpgradableType.UNITS), _infoModel.type, 
                        {"level": i});
               }
            }
            metalCostString = fullMetalCost.toString();
            energyCostString = fullEnergyCost.toString();
            zetiumCostString = fullZetiumCost.toString();
            timeCostString = DateUtil.secondsToHumanString(fullTimeCost); 
            
            cMetalCostString = getCost(ResourceType.METAL, _infoModel.usefulLevel).toString();
            cEnergyCostString = getCost(ResourceType.ENERGY, _infoModel.usefulLevel).toString();
            cZetiumCostString = getCost(ResourceType.ZETIUM, _infoModel.usefulLevel).toString();
            tMetalCostString = getCost(ResourceType.METAL, lvlSelector.value).toString();
            tEnergyCostString = getCost(ResourceType.ENERGY, lvlSelector.value).toString();
            tZetiumCostString = getCost(ResourceType.ZETIUM, lvlSelector.value).toString();
            dMetalCostString = (Number(tMetalCostString) - Number(cMetalCostString)).toString();
            dEnergyCostString = (Number(tEnergyCostString) - Number(cEnergyCostString)).toString();
            dZetiumCostString = (Number(tZetiumCostString) - Number(cZetiumCostString)).toString();
            
            if (_infoModel.objectType == ObjectClass.TECHNOLOGY)
            {
               cTimeCostString = getTechUpgradeTime(_infoModel.usefulLevel).toString();
               tTimeCostString = getTechUpgradeTime(lvlSelector.value).toString();
            }
            else
            {
               cTimeCostString = Upgradable.calculateUpgradeTime((_infoModel.objectType == ObjectClass.BUILDING?
                  UpgradableType.BUILDINGS:UpgradableType.UNITS), _infoModel.type, 
                  {"level": _infoModel.usefulLevel}).toString();
               tTimeCostString = Upgradable.calculateUpgradeTime((_infoModel.objectType == ObjectClass.BUILDING?
                  UpgradableType.BUILDINGS:UpgradableType.UNITS), _infoModel.type, 
                  {"level": lvlSelector.value}).toString();
            }
            dTimeCostString = DateUtil.secondsToHumanString(Number(tTimeCostString) - Number(cTimeCostString));
            cTimeCostString = DateUtil.secondsToHumanString(int(cTimeCostString));
            tTimeCostString = DateUtil.secondsToHumanString(int(tTimeCostString));
         }
         
         protected function close_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().showPreviousScreen();
         }
         
         private function removeInfoPending(e: GScreenChangeEvent): void
         {
            if (e.newScreenName == MainAreaScreens.INFO)
            {
               GlobalFlags.getInstance().lockApplication = false;
            }
         }
         
         private function reset(e: GlobalEvent): void
         {
            
         }
         
         protected function this_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GScreenChangeEvent.MAIN_AREA_CHANGED, removeInfoPending);
            EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
            ML.technologies.addEventListener(TechnologyEvent.TECHNOLOGY_CHANGED, dispatchTechsChangeEvent);
         }
         
         public function dispatchTechsChangeEvent(e: TechnologyEvent): void
         {
            dispatchEvent(new TechnologyEvent(TechnologyEvent.TECHNOLOGY_CHANGED));
         }
         
         [Bindable (event="technologyChanged")]
         private function getTechArmorMod(applies: String): Number
         {
            return Math.round(ML.technologies.getTechnologiesPropertyMod('armor', 
               _infoModel.objectType + '/' + StringUtil.camelCaseToUnderscore(applies)));
         }
         
         [Bindable (event="technologyChanged")]
         private function getTechDamageMod(applies: String): Number
         {
            return Math.round(ML.technologies.getTechnologiesPropertyMod('damage', 
               _infoModel.objectType + '/' + StringUtil.camelCaseToUnderscore(applies)));
         }
         
         [Bindable]
         private var bestAgainst: ArrayCollection;
         
         [Bindable]
         private var selectedGun: Gun = null;
         
         protected function gunsList_changeHandler(event:Event):void
         {
            gunsList.removeEventListener(FlexEvent.UPDATE_COMPLETE, gunsList_changeHandler);
            selectedGun = gunsList.selectedItem;
            if (selectedGun != null)
            {
               bestAgainst = selectedGun.getBestTargets(lvlSelector.value, getTechDamageMod(_infoModel.type));
               bestAgainst.sort = new Sort();
               bestAgainst.sort.fields = [new SortField('type')];
               bestAgainst.refresh();
            }
         }
         
         [Bindable]
         private var weakAgainst: ArrayCollection;
         
         private function get kind(): String
         {
            if (_infoModel.objectType == ObjectClass.UNIT)
            {
               return Config.getUnitKind(_infoModel.type);
            }
            else
            {
               return ReachKind.GROUND;
            }
         }
         
         protected function refreshWeakAgainst(): void
         {
            var coefObjects: ArrayCollection = new ArrayCollection();
            var buildingTypes: Array = Config.getAllBuildingsTypes();
            if ((_infoModel.objectType == ObjectClass.BUILDING && Config.getBuildingGuns(_infoModel.type).length > 0) 
               || (_infoModel.objectType == ObjectClass.UNIT && Config.getUnitGuns(_infoModel.type).length > 0))
            {
               function addCoefObject(type: String, guns: Array): void
               {
                  var coef: Number = 0;
                  for each (var gun: Object in guns)
                  {
                     if ((gun.reach == ReachKind.BOTH) || (gun.reach == kind))
                     {
                        coef += StringUtil.evalFormula(gun.dpt, {'level': 1}) * Gun.getDamageCoefToArmor(gun.damage, _infoModel.armorType);
                     }
                  }
                  if (coef > 0)
                  {
                     coefObjects.addItem({'type': type, 'coef': coef});
                  }
               }
               for each (var building: String in buildingTypes)
               {
                  var guns: Array = Config.getBuildingGuns(building);
                  if (!(guns.length == 0))
                  {
                     addCoefObject('Building::'+building, guns);
                  }
               }
               var unitTypes: Array = Config.getAllUnitsTypes();
               for each (var unit: String in unitTypes)
               {
                  guns = Config.getUnitGuns(unit);
                  if (!(guns.length == 0))
                  {
                     addCoefObject('Unit::'+unit, guns);
                  }
               }
               coefObjects.sort = new Sort();
               coefObjects.sort.fields = [new SortField('coef',false,true,true)];
               coefObjects.refresh();
               weakAgainst = new ArrayCollection();
               for (var i: int = 0; i < Math.min(MAX_WEAK_LENGTH, coefObjects.length); i++)
               {
                  weakAgainst.addItem(new UnitBuildingInfoEntry(coefObjects.getItemAt(i).type, getObjectTitle(coefObjects.getItemAt(i).type), 
                     coefObjects.getItemAt(i).coef));
               }
            }
            else
            {
               weakAgainst = new ArrayCollection();
            }
         }
         
         private function getObjectTitle(type: String): String
         {
            var modelClass:String = ModelUtil.getModelClass(type, true);
            var modelSubclass:String = ModelUtil.getModelSubclass(type);
            return Localizer.string(modelClass + 's', modelSubclass + '.name');
         }
         
      ]]>
   </fx:Script>
   
   <!-- left fade -->
   <s:Rect top="2" bottom="0" left="0" width="{contentGroup.x>0?contentGroup.x:0}">
      <s:fill>
         <s:LinearGradient x="0" y="50">
            <s:GradientEntry ratio="0"/>
            <s:GradientEntry alpha="0" ratio="1"/>
         </s:LinearGradient>
      </s:fill>
   </s:Rect>
   
   <!-- content rect background -->
   <s:BitmapImage top="2" bottom="0" width="{contentGroup.width}" 
                  left="{contentGroup.x}" fillMode="repeat"
                  source="{IMG.getImage(AssetNames.UI_IMAGES_FOLDER + 'main_background')}"/>
   
   <!-- right fade -->
   <s:Rect top="2" bottom="0" left="{contentGroup.x + contentGroup.width}" right="0">
      <s:fill>
         <s:LinearGradient x="0" y="50">
            <s:GradientEntry alpha="0" ratio="0"/>
            <s:GradientEntry ratio="1"/>
         </s:LinearGradient>
      </s:fill>
   </s:Rect>
   
   
   
   <base:AdvancedContainer bottom="0" left="0" top="0" right="0">
      <base:Scroller id="scrollCont" top="9" bottom="9" width="100%" 
                     height="100%" right="0" horizontalScrollPolicy="off" 
                     stepMultiplier="15">
         <s:Group id="sViewport" left="0" height="100%" right="{scrollCont.verticalScrollBar.width}">
            
            <s:Group id="contentGroup" height="100%" width="{773 - scrollCont.verticalScrollBar.width}" 
                     horizontalCenter="0">
               
               
               <s:Group width="100%">
                  
                  
                  <s:Group  width="300">
                     <components:CenteredBitmapImage maxHeight="300" maxWidth="300"
                                                     source="{_infoModel.imageSource}" horizontalCenter="0"/>
                  </s:Group>
                  
                  
                  <base:AdvancedContainer>
                     <base:AdvancedContainer>
                        <s:Group visible="{_infoModel.armorType != null}"
                                 toolTip="{_infoModel.armorType != null
                                 ? Localizer.string('InfoScreen', 'armor.'+ _infoModel.armorType):''}">
                           <s:BitmapImage source="{IMG.getImage(AssetNames.getIconImageName(_infoModel.armorType))}"/>
                        </s:Group>
                        <s:Label text="{_infoModel.name}" styleName="h1" left="40" top="5"/>
                     </base:AdvancedContainer>
                     <s:BitmapImage source="{IMG.getImage(AssetNames.INFO_SCREEN_IMAGES_FOLDER + 'line')}"/>
                     <s:Group width="100%" visible="{!(_infoModel.objectType != 'building' || getTechArmorMod(_infoModel.type) == 0)
                              || !(_infoModel.objectType != 'unit' || getTechArmorMod(_infoModel.type) == 0)}">
                        
                        <s:Label text="{Localizer.string('InfoScreen', 'armorFromTechs')}"/>
                        <s:Label text="{(getTechArmorMod(_infoModel.type) > 0? '+':'') + getTechArmorMod(_infoModel.type) + '%'}"
                                 color="{getTechArmorMod(_infoModel.type) > 0?0x00ff00 : 0xff0000}"/>
                        <s:layout>
                           <s:HorizontalLayout paddingTop="4"/>
                        </s:layout>
                     </s:Group>
                     <s:Group visible="{_infoModel.infoData.deploysTo != null}" width="100%">
                        <s:Label text="{Localizer.string('InfoScreen', 'deploysTo')}"/>
                        <base:Panel title="{_infoModel.infoData.deploysTo != null
                                    ? Localizer.string('Buildings', _infoModel.infoData.deploysTo+'.name'):''}">
                           <components:CenteredBitmapImage height="60" width="150" 
                                                           source="{IMG.getImage(AssetNames.getBuildingImageName(_infoModel.infoData.deploysTo))}"/>
                        </base:Panel>
                        <s:layout>
                           <s:VerticalLayout/>
                        </s:layout>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout gap="-1"/>
                     </base:layout>
                  </base:AdvancedContainer>
                  <s:layout>
                     <s:HorizontalLayout paddingLeft="6" gap="5" verticalAlign="middle"/>
                  </s:layout>
               </s:Group>
               
               
               
               <s:Group width="100%">
                  <s:Group width="90%" horizontalCenter="0">
                     <s:Label text="{Localizer.string('InfoScreen', 'description')}"
                              styleName="h2"/>
                     <s:Group width="100%">
                        <s:Label text="{_infoModel.description}" left="6" right="6"/>
                     </s:Group>
                     <s:layout>
                        <s:VerticalLayout paddingBottom="10" paddingTop="6"/>
                     </s:layout>
                  </s:Group>
               </s:Group>
               
               <s:Group width="100%">
                  <base:AdvancedContainer width="90%" horizontalCenter="0">
                     <s:Label text="{Localizer.string('InfoScreen', 'currentLevel') + 
                              ': ' + _infoModel.currentLevel.toString()}" styleName="h2" 
                                                                          visible="{_infoModel.currentLevel > 0}"/>
                     <s:Group width="100%" visible="{guns.length != 0}">
                        <s:Label text="{Localizer.string('InfoScreen', 'guns')}" 
                                 styleName="h2" top="6"/>
                        <s:BitmapImage top="25" source="{IMG.getImage(AssetNames.INFO_SCREEN_IMAGES_FOLDER + 'line')}"/>
                        <s:Group width="100%" visible="{getTechDamageMod(_infoModel.type) != 0}" top="38">
                           
                           <s:Label text="{Localizer.string('InfoScreen', 'damageFromTechs')}"/>
                           <s:Label text="{(getTechDamageMod(_infoModel.type) > 0? '+':'') + getTechDamageMod(_infoModel.type) + '%'}"
                                    color="{getTechDamageMod(_infoModel.type) > 0?0x00ff00 : 0xff0000}"/>
                           <s:layout>
                              <s:HorizontalLayout paddingTop="4"/>
                           </s:layout>
                        </s:Group>
                     </s:Group>
                     <s:Group width="100%" height="{gunLayout.rowCount * 35}" visible="{gunsList.dataProvider.length != 0}">
                        <base:AdvancedList id="gunsList" height="100%" 
                                           left="6" right="6" dataProvider="{guns}"
                                           contentBackgroundColor="#0f0f0f"  
                                           contentBackgroundAlpha="0"
                                           requireSelection="true"
                                           change="gunsList_changeHandler(event)"
                                           skinClass="components.skins.ListNonScrollableSkin"
                                           rollOverColor="#4f4f4f" selectionColor="#2f2f2f" 
                                           borderVisible="false">
                           <base:itemRenderer>
                              <fx:Component>
                                 <s:ItemRenderer>
                                    <fx:Script>
                                       <![CDATA[
                                          import models.infoscreen.Gun;
                                       ]]>
                                    </fx:Script>
                                    <base:ImageAndLabel type="{(data as Gun).type}" 
                                                        textToDisplay="{(data as Gun).title}"
                                                        count="{(data as Gun).count}"/>
                                    
                                 </s:ItemRenderer>
                              </fx:Component>
                           </base:itemRenderer>
                           <base:layout>
                              <s:TileLayout id="gunLayout" verticalGap="2" horizontalGap="2"/>
                           </base:layout>
                        </base:AdvancedList>
                     </s:Group>
                     <s:Group width="100%" visible="{guns.length != 0}">
                        <base:Panel id="gunPropertiesContainer" height="100%"
                                    title="{Localizer.string('InfoScreen', 'gunProperties', 
                                    [selectedGun.title])}">
                           <s:Group>
                              <s:Label text="{Localizer.string('InfoScreen', 'damageType')}" width="150" 
                                       styleName="h3"/>
                              <s:Label text="{selectedGun.damageTitle}" width="100"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <s:Label text="{Localizer.string('InfoScreen', 'reach')}" width="150" 
                                       styleName="h3"/>
                              <s:Label text="{selectedGun.reachTitle}" width="100"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <s:Label text="{Localizer.string('InfoScreen', 'cooldown')}" width="150" 
                                       styleName="h3"/>
                              <s:Label text="{selectedGun.period}" width="100"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <s:Label text="{Localizer.string('InfoScreen', 'baseDamage')}" width="150" 
                                       styleName="h3"/>
                              <s:Label text="{selectedGun.getDamagePerTickString(
                                       int(lvlSelector.value))}" 
                                       width="100"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <base:layout>
                              <s:VerticalLayout paddingLeft="6" paddingTop="6" paddingBottom="6"/>
                           </base:layout>
                        </base:Panel>
                        <base:Panel id="percentagesContainer" title="{Localizer.string('InfoScreen', 'damagesDealt', 
                                    [selectedGun.title])}" left="{gunPropertiesContainer.width + 10}" right="0">
                           <s:Group>
                              <s:Label text="{Localizer.string('InfoScreen', 'armorType')}" width="150" styleName="h3"/>
                              <s:Label text="{Localizer.string('InfoScreen', 'damageInPercent')}" styleName="h3" 
                                       width="100"/>
                              <s:Label text="{Localizer.string('InfoScreen', 'damage')}" width="100" styleName="h3"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <base:ImageAndLabel type="{ArmorTypes.LIGHT}" 
                                                  textToDisplay="{Localizer.string('InfoScreen', 'armorShort.'+
                                                  ArmorTypes.LIGHT)}" width="150"/>
                              <s:Label text="{selectedGun.getPercentage(ArmorTypes.LIGHT, getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:Label text="{selectedGun.getDamage(ArmorTypes.LIGHT,
                                       int(lvlSelector.value), getTechDamageMod(_infoModel.type))}"  height="100%" verticalAlign="middle"
                                                                                                     width="100"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <base:ImageAndLabel type="{ArmorTypes.NORMAL}" 
                                                  textToDisplay="{Localizer.string('InfoScreen', 'armorShort.'+
                                                  ArmorTypes.NORMAL)}" width="150"/>
                              <s:Label text="{selectedGun.getPercentage(ArmorTypes.NORMAL, getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:Label text="{selectedGun.getDamage(ArmorTypes.NORMAL,
                                       int(lvlSelector.value), getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <base:ImageAndLabel type="{ArmorTypes.HEAVY}" 
                                                  textToDisplay="{Localizer.string('InfoScreen', 'armorShort.'+
                                                  ArmorTypes.HEAVY)}" width="150"/>
                              <s:Label text="{selectedGun.getPercentage(ArmorTypes.HEAVY, getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:Label text="{selectedGun.getDamage(ArmorTypes.HEAVY,
                                       int(lvlSelector.value), getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <s:Group>
                              <base:ImageAndLabel type="{ArmorTypes.FORTIFIED}" 
                                                  textToDisplay="{Localizer.string('InfoScreen', 'armorShort.'+
                                                  ArmorTypes.FORTIFIED)}" width="150"/>
                              <s:Label text="{selectedGun.getPercentage(ArmorTypes.FORTIFIED, getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:Label text="{selectedGun.getDamage(ArmorTypes.FORTIFIED,
                                       int(lvlSelector.value), getTechDamageMod(_infoModel.type))}" 
                                       width="100" height="100%" verticalAlign="middle"/>
                              <s:layout>
                                 <s:HorizontalLayout/>
                              </s:layout>
                           </s:Group>
                           
                           <base:layout>
                              <s:VerticalLayout paddingLeft="6" paddingTop="6" paddingBottom="6"/>
                           </base:layout>
                        </base:Panel>
                     </s:Group>
                     
                     
                     <s:Group width="100%" visible="{(guns.length != 0)}">
                        
                        <base:Panel title="{Localizer.string('InfoScreen', 'bestAgainst')}" 
                                    left="0" top="0" right="0" id="bestPanel">
                           <s:DataGroup left="6" right="6" top="6" dataProvider="{bestAgainst}"
                                        height="{bestTargetsLayout.rowCount * 54}" maxWidth="{bestPanel.width - 12}"
                                        itemRenderer="components.infoscreen.IRUnitBuildingForInfo">
                              <s:layout>
                                 <s:TileLayout id="bestTargetsLayout" horizontalGap="3" verticalGap="3"/>
                              </s:layout>
                           </s:DataGroup>
                        </base:Panel>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout/>
                     </base:layout>
                  </base:AdvancedContainer>
               </s:Group>
               
               <s:Group width="100%">
                  <base:AdvancedContainer width="90%" horizontalCenter="0">
                     <s:Group width="100%" visible="{_infoModel.usefulLevel &lt; _infoModel.maxLevel}">
                        <s:Label text="{Localizer.string('InfoScreen', 'level') + ':'}" styleName="h3"/>
                        <s:Label horizontalCenter="0" text="{int(lvlSelector.value)}"  styleName="h3"/>
                        
                        <s:Group width="100%">
                           <s:Label text="{(_infoModel.usefulLevel).toString()}" left="0" styleName="h3"/>
                           <base:AdvancedHSlider dataTipPrecision="0" id="lvlSelector" left="20" right="20"
                                                 minimum="{_infoModel.usefulLevel}" 
                                                 maximum="{_infoModel.maxLevel}"
                                                 showDataTip="false" change="
                                                 sliderMoved = true;
                                                 refreshDataForTable()"/>
                           <s:Label text="{_infoModel.maxLevel.toString()}" right="0" styleName="h3"/>
                        </s:Group>
                        
                        <s:layout>
                           <s:HorizontalLayout gap="10"/>
                        </s:layout>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout/>
                     </base:layout>
                  </base:AdvancedContainer>
               </s:Group>
               
               <s:Group width="100%">
                  <base:AdvancedContainer width="90%" horizontalCenter="0">
                     <base:Panel visible="{!((_infoModel.currentLevel == _infoModel.maxLevel) || (_infoModel.infoData.npc) || (lvlSelector.value == _infoModel.currentLevel))}"  
                                 title="{Localizer.string('InfoScreen', 'cost')}" width="100%">
                        <base:AdvancedContainer width="100%">
                           
                           <s:Group width="100%">
                              <s:Label text="{Localizer.string('InfoScreen', 'atLevel', [_infoModel.usefulLevel.toString()])}" width="60"
                                       visible="{_infoModel.objectType != 'unit'}"/>
                              <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{cMetalCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.METAL)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{cEnergyCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{cZetiumCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{cTimeCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.TIME)}" width="80"/> 
                              <s:layout>
                                 <s:HorizontalLayout paddingLeft="6" gap="50"/>
                              </s:layout>
                           </s:Group>
                           <s:Group width="100%"
                                    visible="{!(lvlSelector.value == _infoModel.usefulLevel || _infoModel.objectType == 'unit')}">
                              <s:Label text="{Localizer.string('InfoScreen', 'atLevel', [lvlSelector.value.toString()])}" width="60"/>
                              <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{tMetalCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.METAL)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{tEnergyCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{tZetiumCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{tTimeCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.TIME)}" width="80"/> 
                              <s:layout>
                                 <s:HorizontalLayout paddingLeft="6" gap="50"/>
                              </s:layout>
                           </s:Group>
                           <s:Group width="100%" visible="{!(lvlSelector.value == _infoModel.usefulLevel || _infoModel.objectType == 'unit')}">
                              <s:Label text="{Localizer.string('InfoScreen', 'difference')}" width="60"/>
                              <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{dMetalCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.METAL)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{dEnergyCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{dZetiumCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}" width="80"/>
                              <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{dTimeCostString}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.TIME)}" width="80"/> 
                              <s:layout>
                                 <s:HorizontalLayout paddingLeft="6" gap="50"/>
                              </s:layout>
                           </s:Group>
                           <base:layout>
                              <s:VerticalLayout/>
                           </base:layout>
                        </base:AdvancedContainer>
                     </base:Panel>
                     <base:Panel visible="{!((_infoModel.currentLevel == _infoModel.maxLevel) 
                                 || (_infoModel.currentLevel == lvlSelector.value) 
                                 || (_infoModel.objectType == 'unit')
                                 || (lvlSelector.value - _infoModel.currentLevel &lt; 2))}"  
                                 title="{Localizer.string('InfoScreen', 
                                 'fullUpgradeCost', [lvlSelector.value.toString()])}" width="100%">
                        <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{metalCostString}"
                                            toolTip="{Localizer.string('Resources', ResourceType.METAL)}" width="80"/>
                        <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{energyCostString}"
                                            toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}" width="80"/>
                        <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{zetiumCostString}"
                                            toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}" width="80"/>
                        <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{timeCostString}"
                                            toolTip="{Localizer.string('Resources', ResourceType.TIME)}" width="80"/> 
                        <base:layout>
                           <s:HorizontalLayout paddingLeft="116" gap="50"/>
                        </base:layout>
                     </base:Panel>
                     
                     
                     <base:Panel id="dataTable" title="{Localizer.string('InfoScreen', 'tableTitle')}" width="100%">
                        <mx:DataGrid dataProvider="{dataForTable}" resizableColumns="false" selectable="false" 
                                     draggableColumns="false" rowCount="{dataForTable.length}"
                                     headerBackgroundSkin="components.skins.DataGridHeaderBackgroundSkin" 
                                     horizontalCenter="0" width="100%">
                           <mx:columns>
                              <mx:DataGridColumn id="propertiesColumn" dataField="property" width="160"
                                                 headerText="{Localizer.string('InfoScreen', 'property')}"/>
                              <mx:DataGridColumn dataField="current" visible="{_infoModel.currentLevel > 0}"
                                                 textAlign="center" width="160"
                                                 headerText="{Localizer.string('InfoScreen', 'atLevel', [_infoModel.usefulLevel.toString()])}"/>
                              <mx:DataGridColumn dataField="after" visible="{!((_infoModel.currentLevel == _infoModel.maxLevel) 
                                                 ||(lvlSelector.value == _infoModel.currentLevel))}" 
                                                 textAlign="center" width="160"
                                                 headerText="{Localizer.string('InfoScreen', 'atLevel', [lvlSelector.value.toString()])}"/>
                              <mx:DataGridColumn dataField="diff" visible="{_infoModel.currentLevel != _infoModel.maxLevel}" 
                                                 textAlign="center" width="160"
                                                 headerText="{Localizer.string('InfoScreen', 'difference')}"/>
                           </mx:columns>
                        </mx:DataGrid>
                     </base:Panel>
                     
                     <s:Group width="100%" visible="{weakAgainst.length > 0}">
                        <base:Panel id="weakPanel" title="{Localizer.string('InfoScreen', 'weakAgainst')}" 
                                    left="0" right="0">
                           <s:DataGroup left="6" right="6" top="6" maxWidth="{weakPanel.width - 12}" 
                                        dataProvider="{weakAgainst}"
                                        height="{bestAttackersLayout.rowCount * 54}"
                                        itemRenderer="components.infoscreen.IRUnitBuildingForInfo">
                              <s:layout>
                                 <s:TileLayout id="bestAttackersLayout" horizontalGap="3" verticalGap="3"/>
                              </s:layout>
                           </s:DataGroup>
                        </base:Panel>
                     </s:Group>
                     
                     <base:layout>
                        <s:VerticalLayout/>
                     </base:layout>
                  </base:AdvancedContainer>
               </s:Group>
               <s:layout>
                  <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingBottom="20" paddingTop="20" gap="6"/>
               </s:layout>
            </s:Group>    
         </s:Group> 
      </base:Scroller>
   </base:AdvancedContainer>
   <s:Button label="{Localizer.string('InfoScreen', 'close')}" bottom="10" 
             right="30" click="close_clickHandler(event)" skinClass="components.skins.YellowButtonSkin"/>
   
</base:BaseContainer>
