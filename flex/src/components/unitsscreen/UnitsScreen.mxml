<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:unitsscreen="components.unitsscreen.*"
                    xmlns:location="components.location.*"
                    creationComplete="basecontainer1_creationCompleteHandler(event)">
   
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.location.Location;
         import models.unit.Unit;
         import models.unit.UnitKind;
         
         import mx.collections.ListCollectionView;
         import mx.events.FlexEvent;
         
         import utils.Localizer;
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.UNITS_UPDATED, updateUnits);
            EventBroker.subscribe(GUnitsScreenEvent.FORMATION_CONFIRMED, confimChanges);
            EventBroker.subscribe(GUnitsScreenEvent.FORMATION_CANCELED, cancelChanges);
            NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
         }
         
         import controllers.units.UnitsCommand;
         import mx.collections.ArrayCollection;
         
         [Bindable]
         private var draggedUnits: Object = {};
         
         private var hashedUnits: Object = {};
         
         [Bindable]
         private var updatePending: Boolean = false;
         
         private function updateUnits(e: GUnitsScreenEvent): void
         {
            var hadChanges: Boolean = hasChanges();
            for (var unitId: String in e.unitsHash)
            {
               hashedUnits[unitId] = e.unitsHash[unitId][2];
               if (draggedUnits[unitId] != null)
               {
                  if (e.unitsHash[unitId][0] == null)
                  {
                     draggedUnits[unitId][1] = e.unitsHash[unitId][1];
                  }
                  else
                  {
                     draggedUnits[unitId][0] = e.unitsHash[unitId][0];
                  }
               }
               else
               {
                  if (e.unitsHash[unitId][0] == null)
                  {
                     draggedUnits[unitId]= [e.unitsHash[unitId][2].flank, e.unitsHash[unitId][1]];
                  }
                  else
                  {
                     draggedUnits[unitId] = [e.unitsHash[unitId][0], e.unitsHash[unitId][2].stance];
                  }
               }
            }
            dispatchEvent(new Event("changesInFlanks"));
            if (hasChanges() != hadChanges)
            {
               invalidateSidebarState();
            }
         }
         
         private function invalidateSidebarState(e: UnitsScreenEvent = null): void
         {
            var selection: Array = locationComp.selection;
            if (locationComp._storedUnits != null)
            {
               var selectedVolume: int = Unit.getVolume(selection);
               if (locationComp.location is Unit)
               {
                  Unit(locationComp.location).selectedVolume =  -1 * selectedVolume;
               }
               else
               {
                  Unit(locationComp.target).selectedVolume = selectedVolume;
               }
            }
            new GUnitsScreenEvent(GUnitsScreenEvent.REFRESH_SIDEBAR, {
               'selection': selection,
               'hasChanges': hasChanges(),
               'currentKind': locationComp.currentKind,
               'location': locationComp.location,
               'target': locationComp.target
            });
         }
         
         [Bindable (event = "changesInFlanks")]
         private function hasChanges(): Boolean
         {
            for (var unitId: String in draggedUnits)
            {
               var currentUnit: Unit = hashedUnits[unitId];
               if (currentUnit != null && draggedUnits[unitId] != null)
               {
                  if ((currentUnit.flank != draggedUnits[unitId][0]) ||
                     (currentUnit.stance != draggedUnits[unitId][1]))
                     return true;
               }
            }
            return false;
         }
         
         private function getChanged(): Object
         {
            var changedUnits: Object = {};
            for (var unitId: String in draggedUnits)
            {
               var currentUnit: Unit = hashedUnits[unitId];
               if ((currentUnit.flank != draggedUnits[unitId][0]) ||
                  (currentUnit.stance != draggedUnits[unitId][1]))
                  changedUnits[unitId] = draggedUnits[unitId];
            }
            return changedUnits;
         }
         
         private function removePending(e: Event): void
         {
            ML.units.disableAutoUpdate();
            for (var unitId: String in draggedUnits)
            {
               hashedUnits[unitId].flank = draggedUnits[unitId][0];
               hashedUnits[unitId].stance = draggedUnits[unitId][1];
            }
            ML.units.enableAutoUpdate();
            cancelChanges();
            updatePending = false;
            EventBroker.unsubscribe(GUnitEvent.FLANK_APPROVED, removePending);
            dispatchEvent(new Event("changesInFlanks"));
         }
         
         private function confimChanges(e: GUnitsScreenEvent): void
         {
            EventBroker.subscribe(GUnitEvent.FLANK_APPROVED, removePending);
            updatePending = true;
            new UnitsCommand(UnitsCommand.UPDATE,                
               {updates: getChanged()}
            ).dispatch ();
         }
         
         private function cancelChanges(e: Event = null): void
         {
            draggedUnits = {};
            hashedUnits = {};
            locationComp.cancelChanges();
            dispatchEvent(new Event("changesInFlanks"));
            invalidateSidebarState();
         }
         
         protected function locationComp_creationCompleteHandler(event:FlexEvent):void
         {
            locationComp.addEventListener(UnitsScreenEvent.INVALIDATE_SIDEBAR_STATE, invalidateSidebarState);
            locationComp.addEventListener(UnitsScreenEvent.ATTACK_INITIATED, cancelChanges);
         }
         
      ]]>
   </fx:Script>
   
   
   <fx:Metadata>
      [ResourceBundle ("Units")]
   </fx:Metadata>
   <base:layout>
      <s:VerticalLayout paddingLeft="6" paddingTop="6" gap="6" paddingRight="6"/>
   </base:layout>
   <!--s:Label text="{Localizer.string('Units', 'label.currentUnits')}" fontSize="26" color="#3bc133"/-->
   <s:Group width="100%">
      <s:Group id="locationGroup" width="100%" maxWidth="{locComp.maxWidth}">
         <s:Label text="{Localizer.string('Units', 'label.location')}" styleName="h3"/>
         <location:MiniLocationComp id="locComp" location="{locationComp.location}"/>
         <s:layout>
            <s:VerticalLayout/>
         </s:layout>
      </s:Group> 
      <s:Group id="targetGroup" visible="{locationComp.target != null}"  
               width="100%" maxWidth="{tarComp.maxWidth}">
         <s:Label text="{Localizer.string('Units', 'label.target')}" styleName="h3"/>
         <location:MiniLocationComp id="tarComp" location="{locationComp.target}"/>
         <s:layout>
            <s:VerticalLayout/>
         </s:layout>
      </s:Group>
      <s:layout>
         <s:HorizontalLayout gap="10"/>
      </s:layout>
   </s:Group>
   <unitsscreen:UnitsLocation id="locationComp" height="100%" width="100%"
                              creationComplete="locationComp_creationCompleteHandler(event)"/>
   
</base:BaseContainer>
