<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:base="components.base.*" 
         xmlns:location="components.location.*" 
         xmlns:unitsscreen="components.unitsscreen.*"
         creationComplete="this_creationCompleteHandler(event)" 
         xmlns:squadronsscreen="components.squadronsscreen.*">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.popups.ActionConfirmationPopup;
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import controllers.GlobalFlags;
         import controllers.ui.NavigationController;
         import controllers.units.OrdersController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.ModelLocator;
         import models.ModelsCollection;
         import models.location.Location;
         import models.movement.MRoute;
         import models.unit.Unit;
         import models.unit.UnitKind;
         import models.unit.UnitsFlank;
         import models.unit.events.UnitEvent;
         
         import mx.collections.ArrayCollection;
         import mx.collections.ListCollectionView;
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.controls.Alert;
         import mx.events.CollectionEvent;
         import mx.events.CollectionEventKind;
         import mx.events.FlexEvent;
         
         import spark.components.Button;
         import spark.components.Label;
         
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         private static function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         private static function get NAV_CTRL() : NavigationController {
            return NavigationController.getInstance();
         }
         
         private static const MAX_FLANKS: int = 2;
         
         [Bindable]
         private var groundFlanks: ArrayCollection;
         
         [Bindable]
         private var spaceFlanks: ArrayCollection;
         
         [Bindable]
         private var squadronFlanks: ArrayCollection;
         
         [Bindable]
         private var routes: ListCollectionView;
         
         [Bindable]
         private var target: * = null;
         
         [Bindable]
         private var location: * = null;
         
         private function dispatchUnitsChangeEvent(): void
         {
            dispatchEvent(new Event('unitsChange'));
         }
         
         private var units: ListCollectionView;
         
         private function refreshList(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  callLater(function (): void
                  {
                     addUnits(e.items);
                     if (hasGroundUnits)
                     {
                        groundButton.visible = true;
                     }
                     if (hasSpaceUnits)
                     {
                        spaceButton.visible = true;
                     }
                  });
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  removeUnits(e.items);
                  if (hasGroundUnits)
                  {
                     groundButton.visible = true;
                  }
                  if (hasSpaceUnits)
                  {
                     spaceButton.visible = true;
                  }
               }
            }
            
         }
         
         private function removeUnits(unitsToDestroy: Array): void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.DESTROY_UNIT, unitsToDestroy);
            dispatchUnitsChangeEvent();
            invalidateSidebarState();
         }
         
         private function addUnits(unitsToAdd: Array): void
         {
            for each (var unitToAdd: Unit in unitsToAdd)
            {
               addUnitToFlank(unitToAdd, unitToAdd.flank);
            }
            dispatchUnitsChangeEvent();
            invalidateSidebarState();
         }
         
         private function addUnitToFlank(unit: Unit, flankNr: int): void
         {
            if (unit.kind == UnitKind.GROUND)
            {
               for each (var flank: UnitsFlank in groundFlanks)
               {
                  if (flank.nr == flankNr+1)
                  {
                     flank.flank.addOrUpdate(unit);
                     return;
                  }
               }
            }
            else
            {
               for each (flank in spaceFlanks)
               {
                  if (flank.nr == flankNr+1)
                  {
                     flank.flank.addOrUpdate(unit);
                     return;
                  }
               }
            }
         }
         
         private function sortByHp(list: ListCollectionView): void
         {
            if (list)
            {
               list.sort = new Sort();
               list.sort.fields = [new SortField('type'), 
                  new SortField('hp', false, true, true), new SortField('id', false, false, true)];
               list.refresh();
            }
         }
         
         private function buildFlanks(): void
         {
            groundFlanks = new ArrayCollection();
            spaceFlanks = new ArrayCollection();
            
            var groundFlanksObj: Object = {};
            var spaceFlanksObj: Object = {};
            ML.units.disableAutoUpdate();
            for each (var unit: Unit in units)
            {
               unit.newStance = unit.stance;
               if (unit.kind == UnitKind.GROUND)
               {
                  if (groundFlanksObj[unit.flank] == null)
                  {
                     groundFlanksObj[unit.flank] = new Array;
                  }
                  groundFlanksObj[unit.flank].push(unit);
               }
               else
               {
                  if (spaceFlanksObj[unit.flank] == null)
                  {
                     spaceFlanksObj[unit.flank] = new Array();
                  }
                  spaceFlanksObj[unit.flank].push(unit);
               }
            }
            ML.units.enableAutoUpdate();
            var key: int;
            for (key = 0; key < MAX_FLANKS; key++)
            {
               groundFlanks.addItem(new UnitsFlank(new ModelsCollection(groundFlanksObj[key]), key+1, unitsOwner));
               spaceFlanks.addItem(new UnitsFlank(new ModelsCollection(spaceFlanksObj[key]), key+1, unitsOwner));
            }
            dispatchUnitsChangeEvent();
         }
         
         private function buildSquadronFlanks(squadUnits: ListCollectionView): void
         {
            squadUnits.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshSquadron);
            sortByHp(squadUnits);
            squadronFlanks = new ArrayCollection();
            var squadronFlanksObj: Object = {};
            ML.units.disableAutoUpdate();
            for each (var unit: Unit in squadUnits)
            {
               unit.newStance = unit.stance;
               if (squadronFlanksObj[unit.flank] == null)
               {
                  squadronFlanksObj[unit.flank] = new Array();
               }
               squadronFlanksObj[unit.flank].push(unit);
            }
            ML.units.enableAutoUpdate();
            
            var key: int;
            for (key = 0; key < MAX_FLANKS; key++)
            {
               squadronFlanks.addItem(new UnitsFlank(new ModelsCollection(squadronFlanksObj[key]), key+1, unitsOwner));
            }
            dispatchUnitsChangeEvent();
         }
         
         private function refreshSquadron(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  callLater(function (): void
                  {
                     for each (var unitToAdd: Unit in e.items)
                     {
                        for each (var flank: UnitsFlank in squadronFlanks)
                        {
                           if (flank.nr == unitToAdd.flank+1)
                           {
                              flank.flank.addOrUpdate(unitToAdd);
                              return;
                           }
                        }
                     }
                     dispatchUnitsChangeEvent();
                     invalidateSidebarState();
                  });
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  removeUnits(e.items);
               }
            }
         }
         
         protected function this_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.OPEN_SCREEN, setData);
            EventBroker.subscribe(GUnitsScreenEvent.UNITS_UPDATED, updateUnits);
            EventBroker.subscribe(GUnitsScreenEvent.FORMATION_CONFIRMED, updateChanges);
            EventBroker.subscribe(GUnitsScreenEvent.FORMATION_CANCELED, cancelChanges);
            EventBroker.subscribe(GUnitsScreenEvent.SELECTION_PRECHANGE, invalidateSidebarState);
            EventBroker.subscribe(GUnitsScreenEvent.ORDER_CONFIRMED, confirmAttack);
            EventBroker.subscribe(GUnitsScreenEvent.DISMISS_CONFIRMED, confirmDismiss);
            EventBroker.subscribe(GUnitsScreenEvent.SWITCH_TO_STORAGE_SCREEN, switchToStorage);
            EventBroker.subscribe(GUnitsScreenEvent.MANAGE_UNITS, addSquadronButton);
            NAV_CTRL.dispatchMainAreaScreenSwitchEvent();
         }
         
         private function addSquadronButton(e: GUnitsScreenEvent): void
         {
            if (!squadronButton.visible)
            {
               squadronButton.visible = true;
            }
            buildSquadronFlanks(e.unitsCollection);
            deselectAllButtons();
            currentKind = UnitKind.SQUADRON;
            squadronButton.selected = true;
            invalidateSidebarState();
         }
         
         private function switchToStorage(e: GUnitsScreenEvent): void
         {
            NAV_CTRL.showStorage(e.location, units, location);
         }
         
         private var unitsOwner: int;
         
         private function refreshRoutesButton(e: CollectionEvent): void
         {
            if (hasMovingUnits)
            {
               if (!moveButton.visible)
               {
                  moveButton.visible = true;
               }
            }
         }
         
         private var firstTime: Boolean = true;
         
         private function setData(e: GUnitsScreenEvent): void
         {
            if (!firstTime)
            {
               cancelChanges();
               location = null;
            }
            target = e.destination;
            location = e.location;
            units = e.unitsCollection;
            units.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
            sortByHp(units);
            unitsOwner = e.owner;
            if (location is Location && Location(location).isSSObject)
            {
               routes = Collections.filter(ML.routes,
                  function(route:MRoute) : Boolean
                  {
                     return route.currentLocation.equals(location) && route.owner == unitsOwner;
                  }
               );
            }
            else
            {
               routes = null;
            }
            if (routes)
            {
               routes.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshRoutesButton);
            }
            buildFlanks();
            groundButton.visible = false;
            spaceButton.visible = false;
            moveButton.visible = false;
            squadronButton.visible = false;
            if (hasGroundUnits)
            {
               groundButton.visible = true;
            }
            if (hasSpaceUnits)
            {
               spaceButton.visible = true;
            }
            if (hasMovingUnits)
            {
               moveButton.visible = true;
            }
            deselectAllButtons();
            if (e.currentKind != null)
            {
               currentKind = e.currentKind;
               if (currentKind == UnitKind.SPACE && !hasSpaceUnits)
               {
                  currentKind = UnitKind.MOVING;
                  if (hasMovingUnits)
                  {
                     moveButton.selected = true;
                  }
               }
               else
               {
                  if (currentKind == UnitKind.SPACE)
                  {
                     spaceButton.selected = true;
                  }
                  else
                  {
                     groundButton.selected = true;
                  }
               }
            }
            else
            {
               if (hasSpaceUnits)
               {
                  currentKind = UnitKind.SPACE;
                  spaceButton.selected = true;
               }
               else
               {
                  currentKind = UnitKind.GROUND;
                  groundButton.selected = true;
               }
            }
            invalidateSidebarState();
            firstTime = false;
         }
         
         private function deselectAllButtons(): void
         {
            groundButton.selected = false;
            spaceButton.selected = false;
            moveButton.selected = false;
            squadronButton.selected = false;
         }
         
         [Bindable]
         private var currentKind: String = UnitKind.GROUND;
         
         protected function confirmAttack(e: GUnitsScreenEvent):void
         {
            if (currentKind == UnitKind.GROUND)
            {
               new UnitsCommand(
                  UnitsCommand.ATTACK,
                  {planetId: ML.latestPlanet.id,
                     targetId: target.id,
                     unitIds: selectionIds}
               ).dispatch ();
            }
            else
            {
               OrdersController.getInstance().issueOrder(new ArrayCollection(selection));
            }
         }
         
         protected function confirmDismiss(e: GUnitsScreenEvent):void
         {
            
            var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
            popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
            popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
            var lbl: Label = new Label();
            lbl.minWidth = 300;
            lbl.text = Localizer.string('Popups', 'message.dismissUnits');
            popUp.addElement(lbl);
            popUp.title = Localizer.string('Popups', 'title.dismissUnits');
            popUp.confirmButtonClickHandler = function (button: Button = null): void
            {
               GlobalFlags.getInstance().lockApplication = true;
               new UnitsCommand(
                  UnitsCommand.DISMISS,
                  {planetId: ML.latestPlanet.id,
                     unitIds: selectionIds}
               ).dispatch ();
               new GUnitsScreenEvent(GUnitsScreenEvent.DESELECT_UNITS);
            };
            popUp.show();
         }
         
         private function get selectionIds(): Array
         {
            var _selection: Array = [];
            var flankList: ArrayCollection;
            
            flankList = (currentKind == UnitKind.GROUND?groundFlanks:
               (currentKind == UnitKind.SPACE?spaceFlanks:squadronFlanks));
            
            for each (var flank: UnitsFlank in flankList)
            {
               for each (var unit: Unit in flank.selection)
               {
                  _selection.push(unit.id);
               }
            }
            return _selection;
         }
         
         [Bindable (event = 'unitsChange')]
         private function getUnitCount(flanks: ArrayCollection): int
         {
            var count: int = 0;
            if (flanks)
            {
               for each (var flank: UnitsFlank in flanks)
               count += flank.flank.length;
            }
            return count;
         }
         
         
         [Bindable]
         private var updatePending: Boolean = false;
         
         private function confirmChanges(e: Event): void
         {
            ML.units.disableAutoUpdate();
            for (var unitId: String in draggedUnits)
            {
               hashedUnits[unitId].flank = draggedUnits[unitId][0];
               hashedUnits[unitId].stance = draggedUnits[unitId][1];
            }
            ML.units.enableAutoUpdate();
            cancelChanges();
            updatePending = false;
            EventBroker.unsubscribe(GUnitEvent.FLANK_APPROVED, confirmChanges);
         }
         
         [Bindable]
         private var draggedUnits: Object = {};
         
         private var hashedUnits: Object = {};
         
         private function updateUnits(e: GUnitsScreenEvent): void
         {
            for (var unitId: String in e.unitsHash)
            {
               hashedUnits[unitId] = e.unitsHash[unitId][2];
               if (draggedUnits[unitId] != null)
               {
                  if (e.unitsHash[unitId][0] == null)
                  {
                     draggedUnits[unitId][1] = e.unitsHash[unitId][1];
                  }
                  else
                  {
                     draggedUnits[unitId][0] = e.unitsHash[unitId][0];
                  }
               }
               else
               {
                  if (e.unitsHash[unitId][0] == null)
                  {
                     draggedUnits[unitId]= [e.unitsHash[unitId][2].flank, e.unitsHash[unitId][1]];
                  }
                  else
                  {
                     draggedUnits[unitId] = [e.unitsHash[unitId][0], e.unitsHash[unitId][2].stance];
                  }
               }
            }
            invalidateSidebarState();
         }
         
         private function hasUnits(flanks: ArrayCollection): Boolean
         {
            if (flanks)
            {
               for each (var flank: UnitsFlank in flanks)
               {
                  if (flank.flank.length > 0)
                     return true;
               }
            }
            return false;
         }
         
         private function get hasGroundUnits(): Boolean
         {
            return hasUnits(groundFlanks);
         }
         
         private function get hasSpaceUnits(): Boolean
         {
            return hasUnits(spaceFlanks);
         }
         
         private function get hasMovingUnits(): Boolean
         {
            return routes && routes.length > 0;
         }
         
         private function get selection(): Array
         {
            function getSelection(flankList: ArrayCollection): Array
            {
               var _selection: Array = [];
               for each (var flank: UnitsFlank in flankList)
               {
                  for each (var unit: Unit in flank.selection)
                  {
                     _selection.push(unit);
                  }
               }
               return _selection;
            }
            
            return getSelection(currentKind == UnitKind.GROUND?groundFlanks:
               (currentKind == UnitKind.SPACE?spaceFlanks:squadronFlanks));
         }
         
         private function invalidateSidebarState(e: GUnitsScreenEvent = null): void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.REFRESH_SIDEBAR, {
               'selection': selection,
               'hasChanges': hasChanges(),
               'currentKind': currentKind,
               'location': location,
               'target': target,
               'owner': unitsOwner
            });
         }
         
         private function hasChanges(): Boolean
         {
            for (var unitId: String in draggedUnits)
            {
               var currentUnit: Unit = hashedUnits[unitId];
               if (currentUnit != null && draggedUnits[unitId] != null)
               {
                  if ((currentUnit.flank != draggedUnits[unitId][0]) ||
                     (currentUnit.stance != draggedUnits[unitId][1]))
                     return true;
               }
            }
            return false;
         }
         
         private function getChanged(): Object
         {
            var changedUnits: Object = {};
            for (var unitId: String in draggedUnits)
            {
               var currentUnit: Unit = hashedUnits[unitId];
               if ((currentUnit.flank != draggedUnits[unitId][0]) ||
                  (currentUnit.stance != draggedUnits[unitId][1]))
                  changedUnits[unitId] = draggedUnits[unitId];
            }
            return changedUnits;
         }
         
         private function cancelChanges(e: Event = null): void
         {
            draggedUnits = {};
            hashedUnits = {};
            if (e)
            {
               buildFlanks();
            }
            invalidateSidebarState();
         }
         
         private function updateChanges(e: GUnitsScreenEvent): void
         {
            EventBroker.subscribe(GUnitEvent.FLANK_APPROVED, confirmChanges);
            updatePending = true;
            new UnitsCommand(UnitsCommand.UPDATE,                
               {updates: getChanged()}
            ).dispatch ();
         }
         
         
         protected function groundButton_clickHandler(event:MouseEvent):void
         {
            deselectAllButtons();
            ToggleButton(event.currentTarget).selected = true;
            if (event.currentTarget == groundButton)
            {
               currentKind = UnitKind.GROUND;
            }
            else if (event.currentTarget == spaceButton)
            {
               currentKind = UnitKind.SPACE;
            }
            else if (event.currentTarget == moveButton)
            {
               currentKind = UnitKind.MOVING;
            }
            else
            {
               currentKind = UnitKind.SQUADRON;
            }
            invalidateSidebarState();
            if (currentKind == UnitKind.GROUND || currentKind == UnitKind.SPACE)
            {
               NAV_CTRL.switchActiveUnitButtonKind(currentKind);
            }
         }
         
      ]]>
   </fx:Script>
   <s:layout>
      <s:VerticalLayout gap="0" horizontalAlign="justify"/>
   </s:layout>
   <unitsscreen:ScreenLocations location="{location}" target="{target}"/>
   <unitsscreen:ScreenContent height="100%">
      <unitsscreen:leftControls>
         <base:AdvancedContainer>
            <base:layout><s:HorizontalLayout gap="1"/></base:layout>
            <s:ToggleButton id="groundButton" click="groundButton_clickHandler(event)"
                            label="{Localizer.string('Units', 'kind.ground',[getUnitCount(groundFlanks)])}"/>
            <s:ToggleButton id="spaceButton" click="groundButton_clickHandler(event)"
                            label="{Localizer.string('Units', 'kind.space', [getUnitCount(spaceFlanks)])}"/>
            <s:ToggleButton id="moveButton" click="groundButton_clickHandler(event)"
                            label="{Localizer.string('Units', 'kind.launch')}"/>
            <s:ToggleButton id="squadronButton" click="groundButton_clickHandler(event)"
                            label="{Localizer.string('Units', 'kind.squadron')}"/>
         </base:AdvancedContainer>
      </unitsscreen:leftControls>
      <unitsscreen:content>
         <s:DataGroup id="unitsGroundList" dataProvider="{groundFlanks}" left="0" right="0" top="0" bottom="0"
                      visible="{groundButton.selected}" includeInLayout="{groundButton.selected}"> 
            <s:itemRenderer>
               <fx:Component>
                  <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                     <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                  </s:ItemRenderer>
               </fx:Component>
            </s:itemRenderer>
            <s:layout>
               <s:VerticalLayout rowHeight="120"/>
            </s:layout>
         </s:DataGroup>
         
         <s:DataGroup id="unitsSpaceList" dataProvider="{spaceFlanks}" left="0" right="0" top="0" bottom="0"
                      visible="{spaceButton.selected}" includeInLayout="{spaceButton.selected}"> 
            <s:itemRenderer>
               <fx:Component>
                  <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                     <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                  </s:ItemRenderer>
               </fx:Component>
            </s:itemRenderer>
            <s:layout>
               <s:VerticalLayout rowHeight="120"/>
            </s:layout>
         </s:DataGroup>
         
         <s:Group left="0" right="0" top="0" bottom="0"
                  visible="{moveButton.selected}" includeInLayout="{moveButton.selected}">
            <base:Scroller left="0" right="0" top="0" bottom="0" stepMultiplier="10">
               <s:Group left="0" right="0">
                  <s:DataGroup id="unitsMovingList" dataProvider="{routes}" width="100%" height="100%">
                     <s:layout><s:VerticalLayout/></s:layout>
                     <s:itemRenderer>
                        <fx:Component>
                           <squadronsscreen:IRSquadronElement managementButtonVisible="true"/>
                        </fx:Component>
                     </s:itemRenderer>
                  </s:DataGroup>
               </s:Group>
            </base:Scroller>
            <base:Warning text="{Localizer.string('Units', 'warning.noFleets')}" horizontalCenter="0" 
                          verticalCenter="0" maxWidth="{unitsMovingList.width - 50}"
                          visible="{!routes || routes.length == 0}"/>
         </s:Group>
         <s:DataGroup id="unitsSquadronList" dataProvider="{squadronFlanks}" left="0" right="0" top="0" bottom="0"
                      visible="{squadronButton.selected}" includeInLayout="{squadronButton.selected}">
            <s:layout><s:VerticalLayout/></s:layout>
            <s:itemRenderer>
               <fx:Component>
                  <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                     <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                  </s:ItemRenderer>
               </fx:Component>
            </s:itemRenderer>
         </s:DataGroup>
      </unitsscreen:content>
   </unitsscreen:ScreenContent>
</s:Group>
