<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx" 
                    xmlns:unitsscreen="components.unitsscreen.*"
                    creationComplete="attackScreen_creationCompleteHandler()">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import controllers.ui.NavigationController;
         import controllers.units.OrdersController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.ModelsCollection;
         import models.battle.BUnit;
         import models.building.Building;
         import models.location.Location;
         import models.location.LocationType;
         import models.unit.Unit;
         import models.unit.UnitKind;
         import models.unit.UnitsFlank;
         import models.unit.events.UnitEvent;
         
         import mx.collections.ArrayCollection;
         import mx.collections.IList;
         import mx.collections.ListCollectionView;
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.controls.Alert;
         import mx.events.CollectionEvent;
         import mx.events.CollectionEventKind;
         import mx.events.DragEvent;
         import mx.events.FlexEvent;
         import mx.resources.Locale;
         
         import utils.datastructures.Collections;
         
         private var _units: ListCollectionView;
         
         public var _storedUnits: ListCollectionView = null;
         
         private var oldStoredProvider: ListCollectionView = null;
         
         public function set storedUnits(value: ListCollectionView): void
         {
            _storedUnits = getFiltered(value);
            oldStoredProvider = value;
            value.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshStoredList);
         }
         
         private var oldLandProvider: ListCollectionView;
         
         public function set units(value: ListCollectionView): void
         {
            if (oldLandProvider != null)
            {
               oldLandProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
               oldLandProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshLandList);
            }
            oldLandProvider = value;
            _units = getFiltered(value);
            value.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
            buildFlankComps();
         }
         
         private function dispatchRefreshSidebarStateEvent(e: GUnitsScreenEvent = null): void
         {
            dispatchEvent(new UnitsScreenEvent(UnitsScreenEvent.INVALIDATE_SIDEBAR_STATE));
         }
         
         protected function attackScreen_creationCompleteHandler():void
         {
            EventBroker.subscribe(GUnitsScreenEvent.OPEN_LOAD_SCREEN, setLoadLocation);
            EventBroker.subscribe(GUnitsScreenEvent.OPEN_SCREEN, setLocation);
            EventBroker.subscribe(GUnitsScreenEvent.SELECTION_PRECHANGE, dispatchRefreshSidebarStateEvent);
            EventBroker.subscribe(GUnitsScreenEvent.ORDER_CONFIRMED, confirmAttack);
            EventBroker.subscribe(GUnitsScreenEvent.TRANSFER_CONFIRMED, confirmTransfer);
            EventBroker.subscribe(GUnitsScreenEvent.CLOSE_LOAD_REQUESTED, closeLoad);
         }
         
         private function closeLoad(e: GUnitsScreenEvent): void
         {
            setLocation();
         }
         
         private function confirmTransfer(e: GUnitsScreenEvent): void
         {
            if (target is Unit)
            {
               new UnitsCommand(
                  UnitsCommand.LOAD,
                  {
                     transporterId: target.id,
                     unitIds: selectionIds
                  }).dispatch();
            }
            else
            {
               new UnitsCommand(
                  UnitsCommand.UNLOAD,
                  {
                     transporterId: location.id,
                     unitIds: selectionIds
                  }).dispatch();
            }
            new GUnitsScreenEvent(GUnitsScreenEvent.DESELECT_UNITS);
            dispatchRefreshSidebarStateEvent();
         }
         
         private function refreshList(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  addUnits(e.items);
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  removeUnits(e.items);
               }
            }
         }
         
         private function dispatchUnitsChangeEvent(): void
         {
            dispatchEvent(new Event('unitsChange'));
         }
         
         private function removeUnits(unitsToDestroy: Array): void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.DESTROY_UNIT, unitsToDestroy);
            dispatchUnitsChangeEvent();
            dispatchRefreshSidebarStateEvent();
         }
         
         private function refreshLandList(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  addUnits(e.items, landFlanks);
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  removeUnits(e.items);
               }
            }
         }
         
         public function cancelChanges(): void
         {
            if (_storedUnits != null)
            {
               buildLoadFlankComps();
            }
            else
            {
               buildFlankComps();
            }
         }
         
         private function refreshStoredList(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  addUnits(e.items, storedFlanks);
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  removeUnits(e.items);
               }
            }
         }
         
         private function addUnits(unitsToAdd: Array, flanksToAdd: ArrayCollection = null): void
         {
            if (flanksToAdd == null)
            {
               for each (var unitToAdd: Unit in unitsToAdd)
               {
                  addUnitToFlank(unitToAdd, unitToAdd.flank+1);
               }
            }
            else
            {
               for each (unitToAdd in unitsToAdd)
               {
                  for each (var flank: UnitsFlank in flanksToAdd)
                  {
                     if (flank.nr == (unitToAdd.flank+1))
                     {
                        flank.flank.addItem(unitToAdd);
                     }
                  }
               }
            }
            dispatchUnitsChangeEvent();
            dispatchRefreshSidebarStateEvent();
         }
         
         private function addUnitToFlank(unit: Unit, flankNr: int): void
         {
            if (unit.kind == UnitKind.GROUND)
            {
               for each (var flank: UnitsFlank in groundFlanks)
               {
                  if (flank.nr == flankNr+1)
                  {
                     flank.flank.addItem(unit);
                     return;
                  }
               }
            }
            else
            {
               if (unit.squadronId == 0)
               {
                  for each (flank in spaceFlanks)
                  {
                     if (flank.nr == flankNr)
                     {
                        flank.flank.addItem(unit);
                        return;
                     }
                  }
               }
               else
               {
                  for each (flank in movingFlanks)
                  {
                     if (flank.nr == flankNr)
                     {
                        flank.flank.addItem(unit);
                        return;
                     }
                  }
               }
            }
         }
         
         public function getUnitById(id: int): Unit
         {
            for each (var unit: Unit in _units)
            {
               if (unit.id == id)
                  return unit;
            }
            for each (unit in _storedUnits)
            {
               if (unit.id == id)
                  return unit;
            }
            return null;
         }
         
         private function getFiltered(unitsCont: ListCollectionView): ListCollectionView
         {
            var activeUnits: ListCollectionView = Collections.filter(unitsCont, 
               function (unit: Unit): Boolean
               {
                  return (!attacking) || unit.hasGuns
               });
            sortByHp(activeUnits);
            return activeUnits;
         }
         
         private function sortByHp(list: ListCollectionView): void
         {
            list.sort = new Sort();
            list.sort.fields = [new SortField('hp', false, true, true)];
            list.refresh();
         }
         
         
         
         private function buildFlankComps(): void
         {
            _storedUnits = null;
            groundFlanks = new ArrayCollection();
            spaceFlanks = new ArrayCollection();
            movingFlanks = new ArrayCollection();
            
            var groundFlanksObj: Object = {};
            var spaceFlanksObj: Object = {};
            var moveFlanksObj: Object = {};
            for each (var unit: Unit in _units)
            {
               unit.newStance = unit.stance;
               if (unit.kind == UnitKind.GROUND)
               {
                  if (groundFlanksObj[unit.flank] == null)
                  {
                     groundFlanksObj[unit.flank] = new Array;
                  }
                  groundFlanksObj[unit.flank].push(unit);
               }
               else
               {
                  unit.addEventListener(UnitEvent.SQUADRON_ID_CHANGE, handleSquadronIdChange);
                  var flanksObj: Object = unit.squadronId == 0? spaceFlanksObj: moveFlanksObj;
                  if (flanksObj[unit.flank] == null)
                  {
                     flanksObj[unit.flank] = new Array();
                  }
                  flanksObj[unit.flank].push(unit);
               }
            }
            var key: String;
            for (key in groundFlanksObj)
            {
               groundFlanks.addItem(new UnitsFlank(new ModelsCollection(groundFlanksObj[key]), int(key)+1));
            }
            for (key in spaceFlanksObj)
            {
               spaceFlanks.addItem(new UnitsFlank(new ModelsCollection(spaceFlanksObj[key]), int(key)+1));
            }
            for (key in moveFlanksObj)
            {
               movingFlanks.addItem(new UnitsFlank(new ModelsCollection(moveFlanksObj[key]), int(key)+1));
            }
            dispatchUnitsChangeEvent();
         }
         
         private function buildLoadFlankComps(): void
         {
            function buildSpecialUnits(from: ListCollectionView): ArrayCollection
            {
               var to: ArrayCollection = new ArrayCollection();
               var tempObj: Object = {}
               for each (var unit: Unit in from)
               {
                  unit.newStance = unit.stance;
                  if (tempObj[unit.flank] == null)
                  {
                     tempObj[unit.flank] = new Array();
                  }
                  tempObj[unit.flank].addItem(unit);
               }
               for (var key: String in tempObj)
               {
                  to.addItem(new UnitsFlank(new ModelsCollection(tempObj[key]), int(key)+1));
               }
               return to;
            }
            
            storedFlanks = buildSpecialUnits(_storedUnits);
            landFlanks = buildSpecialUnits(_units);
            
            dispatchUnitsChangeEvent();
         }
         
         private function rebuildUnitInFlank(unit: Unit, oldSquadronId: int): void
         {
            var flanks: ListCollectionView = oldSquadronId == 0?spaceFlanks:movingFlanks;
            for each (var unitFlank: UnitsFlank in flanks)
            {
               var idx: int = unitFlank.flank.getItemIndex(unit);
               if (idx != -1)
               {
                  unitFlank.flank.removeItemAt(idx);
                  addUnitToFlank(unit, unit.flank);
                  return;
               }
            }
         }
         
         private function handleSquadronIdChange(e: UnitEvent): void
         {
            if (e.oldSquadronId != (e.currentTarget as Unit).squadronId)
            {
               rebuildUnitInFlank(e.currentTarget as Unit, e.oldSquadronId);
            }
         }
         
         [Bindable]
         public var target: * = null;
         
         private var attacking: Boolean = false;
         
         private function setLocation(e: GUnitsScreenEvent = null): void
         {
            if (e != null && e.destination is Building)
            {
               attacking = true;
            }
            else
            {
               attacking = false;
            }
            if (e != null)
            {
               target = e.destination;
               location = e.location;
               units = e.unitsCollection;
               dispatchSetUnitsEvent(e.unitsCollection);
            }
            else
            {
               target = null;
               location = ML.latestPlanet.toLocation();
               units = Collections.filter(ML.latestPlanet.units, 
               function(unit: Unit): Boolean
               {
                  return unit.level > 0;
               });
               dispatchSetUnitsEvent(_units);
            }
            if (e == null || (e.location is Location && Location(e.location).isSSObject)
               || (e.location is Unit))
            {
               myViewStack.removeAll();
               myViewStack.addChild(groundButton);
               if (target == null)
               {
                  myViewStack.addChild(spaceButton);
                  if (e == null || e.location is Location)
                  {
                     myViewStack.addChild(moveButton);
                  }
               }
               currentKind = UnitKind.GROUND;
               tabBar.selectedItem = groundButton;
            }
            else
            {
               myViewStack.removeAll();
               myViewStack.addChild(spaceButton);
               myViewStack.addChild(moveButton);
               currentKind = UnitKind.SPACE;
               tabBar.selectedItem = spaceButton;
            }
            dispatchRefreshSidebarStateEvent();
         }
         
         private function setLoadLocation(e: GUnitsScreenEvent): void
         {
            attacking = false;
            new GUnitsScreenEvent(GUnitsScreenEvent.FORMATION_CANCELED);
            target = e.destination;
            location = e.location;
            
            if (oldLandProvider != null)
            {
               oldLandProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
               oldLandProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshLandList);
            }
            oldLandProvider = e.landUnitsCollection;
            _units = getFiltered(e.landUnitsCollection);
            e.landUnitsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshLandList);
            storedUnits = e.storedUnitsCollection;
            
            buildLoadFlankComps();
            
            if (e.location is Location)
            {
               myViewStack.removeAll();
               myViewStack.addChild(landButton);
               myViewStack.addChild(storedButton);
               currentKind = UnitKind.GROUND;
               tabBar.selectedItem = landButton;
            }
            else
            {
               myViewStack.removeAll();
               myViewStack.addChild(landButton);
               myViewStack.addChild(storedButton);
               currentKind = UnitKind.SPACE;
               tabBar.selectedItem = storedButton;
            }
            dispatchRefreshSidebarStateEvent();
         }
         
         private function dispatchSetUnitsEvent(unitsCollection: ListCollectionView): void
         {
            dispatchEvent(new UnitsScreenEvent(UnitsScreenEvent.SET_UNITS, unitsCollection));
         }
         
         [Bindable (event = 'unitsChange')]
         private function getUnitCount(flanks: ArrayCollection): int
         {
            var count: int = 0;
            
            for each (var flank: UnitsFlank in flanks)
            count += flank.flank.length;
            
            return count;
         }
         
         [Bindable]
         private var groundFlanks: ArrayCollection;
         
         [Bindable]
         private var spaceFlanks: ArrayCollection;
         
         [Bindable]
         private var movingFlanks: ArrayCollection;
         
         [Bindable]
         private var landFlanks: ArrayCollection;
         
         [Bindable]
         private var storedFlanks: ArrayCollection;
         
         [Bindable]
         public var currentKind: String = UnitKind.GROUND;
         
         private function get selectionIds(): Array
         {
            var _selection: Array = [];
            var flankList: ArrayCollection;
            
            
            if (_storedUnits == null)
            {
               flankList = (currentKind == UnitKind.GROUND?groundFlanks:
                  (currentKind == UnitKind.MOVING?movingFlanks:spaceFlanks));
            }
            else
            {
               
               flankList = (currentKind == UnitKind.GROUND?landFlanks:storedFlanks);
            }
            
            
            for each (var flank: UnitsFlank in flankList)
            {
               for each (var unit: Unit in flank.selection)
               {
                  _selection.push(unit.id);
               }
            }
            return _selection;
         }
         
         public function get selection(): Array
         {
            var getSelection: Function = function (flankList: ArrayCollection): Array
            {
               var _selection: Array = [];
               for each (var flank: UnitsFlank in flankList)
               {
                  for each (var unit: Unit in flank.selection)
                  {
                     _selection.push(unit);
                  }
               }
               return _selection;
            }
            
            if (_storedUnits == null)
            {
               return getSelection(currentKind == UnitKind.GROUND?groundFlanks:
                  (currentKind == UnitKind.MOVING?movingFlanks:spaceFlanks));
            }
            else
            {
               return getSelection(currentKind == UnitKind.GROUND?landFlanks:storedFlanks);
            }
         }
         
         protected function confirmAttack(e: GUnitsScreenEvent):void
         {
            if (currentKind == UnitKind.GROUND)
            {
               new UnitsCommand(
                  UnitsCommand.ATTACK,
                  {planetId: ML.latestPlanet.id,
                     targetId: target.id,
                     unitIds: selectionIds}
               ).dispatch ();
               dispatchEvent(new UnitsScreenEvent(UnitsScreenEvent.ATTACK_INITIATED));
            }
            else
            {
               OrdersController.getInstance().issueOrder(new ArrayCollection(selection), location);
            }
         }
         
         [Bindable]
         public var location: * = null;
         
         
         protected function tabChangeHandler(event:Event):void
         {
            if (tabBar.selectedItem == groundButton)
            {
               currentKind = UnitKind.GROUND;
            }
            else if (tabBar.selectedItem == spaceButton)
            {
               currentKind = UnitKind.SPACE;
            }
            else if (tabBar.selectedItem == landButton)
            {
               currentKind = UnitKind.GROUND;
               if (location is Unit)
               {
                  var temp: * = location;
                  location = target;
                  target = temp;
               }
            }
            else if (tabBar.selectedItem == storedButton)
            {
               currentKind = UnitKind.SPACE;
               if (location is Location)
               {
                  temp = location;
                  location = target;
                  target = temp;
               }
            }
            else
            {
               currentKind = UnitKind.MOVING;
            }
            dispatchRefreshSidebarStateEvent();
         }
         
      ]]>
   </fx:Script>
   
   
   <fx:Metadata>
      [ResourceBundle ("Units")]
      [ResourceBundle ("Location")]
   </fx:Metadata>
   <s:Group width="100%" bottom="0" top="0">
      <s:Group width="100%">
         <s:TabBar id="tabBar" dataProvider="{myViewStack}"
                   change="tabChangeHandler(event)" left="0"/>
         
         <s:Group visible="{location is Unit || target is Unit}" right="0">
            <s:Label styleName="locationHeader" id="lblStorage"
                     text="{RM.getString('Location', 'header.storage')}" verticalCenter="0"/>
            <s:Group width="200">
               <base:DoubleProgressBar text="{RM.getString('Location', 'label.storage',
                                       target is Unit
                                       ? [(target as Unit).stored + (target as Unit).selectedVolume, (target as Unit).storage]
                                       : [(location as Unit).stored + (location as Unit).selectedVolume, (location as Unit).storage])}"
                                       full="{target is Unit
                                       ? (target as Unit).stored + (target as Unit).selectedVolume &gt; (target as Unit).storage
                                       : (location as Unit).stored + (location as Unit).selectedVolume &gt; (location as Unit).storage}"
                                       currentStock="{target is Unit ? (target as Unit).stored : (location as Unit).stored}"
                                       addStock="{target is Unit ? (target as Unit).selectedVolume : (location as Unit).selectedVolume}"
                                       maxStock="{target is Unit ? (target as Unit).storage : (location as Unit).storage}" 
                                       specialHeight="20" left="0" right="0"/>
            </s:Group>
            <s:layout>
               <s:HorizontalLayout gap="3" verticalAlign="middle"/>
            </s:layout>
         </s:Group>
         
      </s:Group>
      
      <s:Group width="100%" height="100%">
         <!-- Define the ViewStack and two child containers. -->
         <mx:ViewStack id="myViewStack" borderVisible="false" 
                       left="0" right="0" top="0" bottom="0">
            
            <s:NavigatorContent id="groundButton"
                                label="{RM.getString('Units', 'kind.ground',[getUnitCount(groundFlanks)])}">
               <s:DataGroup id="unitsGroundList" dataProvider="{groundFlanks}" width="100%" height="100%"> 
                  <s:itemRenderer>
                     <fx:Component>
                        <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                           <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                        </s:ItemRenderer>
                     </fx:Component>
                  </s:itemRenderer>
                  <s:layout>
                     <s:VerticalLayout rowHeight="120"/>
                  </s:layout>
               </s:DataGroup>
            </s:NavigatorContent>
            
            <s:NavigatorContent id="spaceButton"
                                label="{RM.getString('Units', 'kind.space', [getUnitCount(spaceFlanks)])}">
               <s:DataGroup id="unitsSpaceList" dataProvider="{spaceFlanks}" width="100%" height="100%"> 
                  <s:itemRenderer>
                     <fx:Component>
                        <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                           <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                        </s:ItemRenderer>
                     </fx:Component>
                  </s:itemRenderer>
                  <s:layout>
                     <s:VerticalLayout rowHeight="120"/>
                  </s:layout>
               </s:DataGroup>
            </s:NavigatorContent>
            
            <s:NavigatorContent id="landButton"
                                label="{RM.getString('Units', 'kind.land', [getUnitCount(landFlanks)])}">
               <s:DataGroup id="unitsLandList" dataProvider="{landFlanks}" width="100%" height="100%"> 
                  <s:itemRenderer>
                     <fx:Component>
                        <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                           <unitsscreen:FlankComp transfer="true" flankModel="{data}" height="100%" width="100%"/>
                        </s:ItemRenderer>
                     </fx:Component>
                  </s:itemRenderer>
                  <s:layout>
                     <s:VerticalLayout rowHeight="120"/>
                  </s:layout>
               </s:DataGroup>
            </s:NavigatorContent>
            
            <s:NavigatorContent id="storedButton"
                                label="{RM.getString('Units', 'kind.stored', [getUnitCount(storedFlanks)])}">
               <s:DataGroup id="unitsStoredList" dataProvider="{storedFlanks}" width="100%" height="100%"> 
                  <s:itemRenderer>
                     <fx:Component>
                        <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                           <unitsscreen:FlankComp transfer="true" flankModel="{data}" height="100%" width="100%"/>
                        </s:ItemRenderer>
                     </fx:Component>
                  </s:itemRenderer>
                  <s:layout>
                     <s:VerticalLayout rowHeight="120"/>
                  </s:layout>
               </s:DataGroup>
            </s:NavigatorContent>
            
            <s:NavigatorContent id="moveButton"
                                label="{location.isSSObject?RM.getString('Units', 'kind.launch', 
                                [getUnitCount(movingFlanks)]):RM.getString('Units', 'kind.moving', 
                                [getUnitCount(movingFlanks)])}">
               <s:DataGroup id="unitsMovingList" dataProvider="{movingFlanks}" width="100%" height="100%"> 
                  <s:itemRenderer>
                     <fx:Component>
                        <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
                           <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
                        </s:ItemRenderer>
                     </fx:Component>
                  </s:itemRenderer>
                  <s:layout>
                     <s:VerticalLayout rowHeight="120"/>
                  </s:layout>
               </s:DataGroup>
            </s:NavigatorContent>
         </mx:ViewStack>
      </s:Group>
      <s:layout>
         <s:VerticalLayout/>
      </s:layout>
   </s:Group>
   
</base:BaseContainer>
