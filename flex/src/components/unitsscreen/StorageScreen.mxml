<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:base="components.base.*"
         xmlns:unitsscreen="components.unitsscreen.*"
         xmlns:screen="components.base.screen.*"
         xmlns:screens="components.screens.*"
         creationComplete="this_creationCompleteHandler(event)"
         width="100%" height="100%">
   
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.base.ResourceSelectorComp;

      import models.unit.MCUnitScreen;

      import utils.ApplicationLocker;

      import controllers.ui.NavigationController;
      import controllers.units.UnitsCommand;

      import globalevents.GResourcesEvent;
      import globalevents.GUnitsScreenEvent;

      import models.MWreckage;
      import models.ModelLocator;
      import models.location.LocationType;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.unit.Unit;
      import models.unit.UnitBuildingEntry;
      import models.unit.UnitKind;
      import models.unit.events.UnitEvent;

      import mx.collections.ArrayCollection;
      import mx.collections.ListCollectionView;
      import mx.events.CollectionEvent;
      import mx.events.FlexEvent;

      import utils.datastructures.Collections;
      import utils.locale.Localizer;


      private function get NAV_CTRL(): NavigationController {
         return NavigationController.getInstance();
      }

      private function get ML(): ModelLocator {
         return ModelLocator.getInstance();
      }

      private function getString(property: String, parameters: Array = null): String {
         return Localizer.string("Units", property, parameters);
      }


      private function this_creationCompleteHandler(event: FlexEvent): void {
         EventBroker.subscribe(GUnitsScreenEvent.OPEN_STORAGE_SCREEN,
                 setTransporter);
         NAV_CTRL.dispatchMainAreaScreenSwitchEvent();
      }

      [Bindable]
      private var transporter: Unit;

      [Bindable]
      private var cachedUnits: ArrayCollection = new ArrayCollection();

      [Bindable]
      private var items: ArrayCollection = new ArrayCollection();

      private var wreckage: MWreckage = null;


      private function refreshWreck(e: CollectionEvent): void {
         wreckage = filtered.length > 0 ? MWreckage(filtered.getItemAt(0))
                 : null;
         dispatchRefreshMaxStorageEvent();
      }

      private function resetSliders(e: GResourcesEvent): void {
         wreckage = filtered.length > 0 ? MWreckage(filtered.getItemAt(0))
                 : null;
         EventBroker.unsubscribe(GResourcesEvent.WRECKAGES_UPDATED,
                 resetSliders);
         selectTransporterValues();
         dispatchRefreshMaxStorageEvent();
      }

      private function setTransporter(e: GUnitsScreenEvent): void {
         oldUnits = e.unitsCollection;
         oldLocation = e.destination;
         cachedUnits.removeAll();
         var tempUnits: Object = {};
         transporter = Unit(e.location);
         filtered = (transporter.location.isSolarSystem
                 ? ML.latestSSMap.wreckages
                 : ML.latestGalaxy.wreckages);
         filtered = Collections.filter(
                 filtered,
                 function (item: MWreckage): Boolean {
                    return item.currentLocation.equals(transporter.location);
                 });

         filtered.addEventListener(
                 CollectionEvent.COLLECTION_CHANGE, refreshWreck
         );

         wreckage = filtered.length > 0
                 ? MWreckage(filtered.getItemAt(0))
                 : null;

         for each (var unit: Unit in transporter.units) {
            if (!tempUnits['unit::' + unit.type]) {
               tempUnits['unit::' + unit.type] = 1;
            }
            else {
               tempUnits['unit::' + unit.type]++;
            }
         }
         for (var uType: String in tempUnits) {
            cachedUnits.addItem(new UnitBuildingEntry(uType, tempUnits[uType]));
         }
         selectTransporterValues();
      }

      private var filtered: ListCollectionView;

      private var oldStored: int;

      private function selectTransporterValues(): void {
         metalSelector.setValue(transporter.metal);
         energySelector.setValue(transporter.energy);
         zetiumSelector.setValue(transporter.zetium);
      }

      private var prevScreenParams: Object = null;
      private var oldUnits: ListCollectionView;
      private var oldLocation: *;

      protected function manageUnits_clickHandler(event: UnitEvent): void {
         prevScreenParams = {'units': oldUnits, 'location': oldLocation};
         NAV_CTRL.showUnits(
                 Collections.filter(
                         ML.units,
                         function(item: Unit): Boolean {
                            return ((item.location.type == LocationType.UNIT)
                                    && (item.location.id == transporter.id));
                         }),
                 transporter,
                 null,
                 UnitKind.GROUND
         );
      }

      [Bindable (event="selectedResourcesChange")]
      private function getMaxStock(resource: String): int {
         var possibleStore: int =
                 (wreckage == null
                         ? transporter[resource]
                         : Math.min(transporter[resource] + wreckage[resource],
                         Resource.calculateNewResources(
                                 transporter[resource],
                                 transporter.transporterStorage
                                         - transporter.stored
                                         - getOtherSelected(resource),
                                 resource
                         )));
         return Math.max(0, possibleStore);
      }

      [Bindable (event="selectedResourcesChange")]
      private function get transferPossible(): Boolean {
         return (metalSelector.selectedVal != transporter.metal
                 || energySelector.selectedVal != transporter.energy
                 || zetiumSelector.selectedVal != transporter.zetium);
      }

      [Bindable (event="selectedResourcesChange")]
      private function getOtherSelected(resource: String = ''): int {
         var selectedTotal: int = 0;
         if (metalSelector && energySelector && zetiumSelector) {
            if (resource != ResourceType.METAL) {
               selectedTotal +=
                       Resource.getResourceVolume(
                               metalSelector.selectedVal, ResourceType.METAL
                       ) - Resource.getResourceVolume(
                               transporter.metal, ResourceType.METAL
                       );
            }
            if (resource != ResourceType.ENERGY) {
               selectedTotal +=
                       Resource.getResourceVolume(
                               energySelector.selectedVal, ResourceType.ENERGY
                       ) - Resource.getResourceVolume(
                               transporter.energy, ResourceType.ENERGY
                       );
            }
            if (resource != ResourceType.ZETIUM) {
               selectedTotal +=
                       Resource.getResourceVolume(
                               zetiumSelector.selectedVal, ResourceType.ZETIUM
                       ) - Resource.getResourceVolume(
                               transporter.zetium, ResourceType.ZETIUM
                       );
            }
         }
         return selectedTotal;
      }

      protected function selectedResourcesChangeHandler(event: UnitEvent): void {
         dispatchRefreshMaxStorageEvent();
      }

      private function dispatchRefreshMaxStorageEvent(e: Event = null): void {
         dispatchEvent(new UnitEvent(UnitEvent.SELECTED_RESOURCES_CHANGE));
      }

      private function getResourceDiff(resource: String): int {
         return ResourceSelectorComp(this[resource + 'Selector'])
                 .selectedVal - int(transporter[resource]);
      }


      protected function transfer_clickHandler(event: UnitEvent): void {
         if (transferPossible) {
            EventBroker.subscribe(GResourcesEvent.WRECKAGES_UPDATED,
                    resetSliders);
            new UnitsCommand(
                    UnitsCommand.TRANSFER_RESOURCES,
                    {
                       transporterId: transporter.id,
                       metal: getResourceDiff(ResourceType.METAL),
                       energy: getResourceDiff(ResourceType.ENERGY),
                       zetium: getResourceDiff(ResourceType.ZETIUM)
                    }).dispatch();
         }
      }


      protected function close_clickHandler(event: MouseEvent): void {
         if (prevScreenParams == null) {
            MCUnitScreen.getInstance().deselectUnits();
            NAV_CTRL.showPreviousScreen();
         }
         else {
            NAV_CTRL.showUnits(prevScreenParams.units,
                    prevScreenParams.location);
            prevScreenParams = null;
         }
      }

      private function selectAll(): void {
         metalSelector.setValue(metalSelector.maxAmmount);
         energySelector.setValue(energySelector.maxAmmount);
         zetiumSelector.setValue(zetiumSelector.maxAmmount);
      }

      private function selectNone(): void {
         metalSelector.setValue(0);
         energySelector.setValue(0);
         zetiumSelector.setValue(0);
      }
      ]]>
   </fx:Script>
   
   <screen:ScreenBackground/>
   <s:Group left="0" right="0" top="0" bottom="0">
      <s:layout>
         <s:VerticalLayout gap="0" horizontalAlign="justify"/>
      </s:layout>
      <screen:ScreenHeader title="{getString('title.storageScreen')}"
                           headerFromContentSeparatorVisible="true">
         <screen:controls>
            <s:Group>
               <s:Label styleName="locationHeader"
                        text="{Localizer.string('Location', 'header.storage')}"/>
               <base:DoubleProgressBar text="{Localizer.string('Location', 'label.storage',
                                       [transporter.stored + getOtherSelected(), 
                                       ML.technologies.getUnitStorage(transporter.type, transporter.level)])}"
                                       currentStock="{transporter.stored}"
                                       addStock="{getOtherSelected()}"
                                       maxStock="{ML.technologies.getUnitStorage(transporter.type, transporter.level)}" 
                                       specialHeight="20" width="200"/>
            </s:Group>
         </screen:controls>
      </screen:ScreenHeader>
      <s:Group height="100%">
         <base:Scroller id="contScroller" left="0" right="0" top="0" bottom="0" stepMultiplier="5">
            <base:AdvancedContainer right="6" left="0">
               <unitsscreen:StoragePanel width="100%" visible="{cachedUnits.length > 0}"  
                                         buttonLabel="{getString('label.manage')}"
                                         panelButtonClick="manageUnits_clickHandler(event)"
                                         skinClass="components.unitsscreen.StorageScreenSectionPanelSkin">
                  <s:DataGroup id="cachedUnitsList" width="100%" height="{unitLayout.rowCount * 72}" 
                               dataProvider="{cachedUnits}"
                               itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                     <s:layout>
                        <s:TileLayout id="unitLayout"/>
                     </s:layout>
                  </s:DataGroup>
                  <unitsscreen:layout>
                     <s:HorizontalLayout/>
                  </unitsscreen:layout>
               </unitsscreen:StoragePanel>
               
               <unitsscreen:StoragePanel width="100%" visible="{(getMaxStock(ResourceType.METAL) != 0) 
                                         || (getMaxStock(ResourceType.ENERGY) != 0) 
                                         || (getMaxStock(ResourceType.ZETIUM) != 0)}"
                                         buttonEnabled="{transferPossible}"
                                         buttonLabel="{getString('label.transferResources')}"
                                         skinClass="components.unitsscreen.StorageScreenSectionPanelSkin"
                                         panelButtonClick="transfer_clickHandler(event)">
                  <s:Group width="80%">
                     <base:ResourceSelectorComp resourceType="{ResourceType.METAL}" 
                                                maxAmmount="{getMaxStock(ResourceType.METAL)}"
                                                id="metalSelector" 
                                                selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
                     <s:Label text="{(transporter.metal &lt; metalSelector.selectedVal?'+':'')+
                              (metalSelector.selectedVal - transporter.metal)}" 
                              color="{transporter.metal &gt; metalSelector.selectedVal?0xff0000:(
                              transporter.metal == metalSelector.selectedVal?0xffffff:0x00ff00)}"
                              width="50" textAlign="right"/>
                     <s:layout>
                        <s:HorizontalLayout verticalAlign="middle"/>
                     </s:layout>
                  </s:Group>
                  <s:Group width="80%">
                     <base:ResourceSelectorComp resourceType="{ResourceType.ENERGY}" 
                                                maxAmmount="{getMaxStock(ResourceType.ENERGY)}"
                                                id="energySelector"
                                                selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
                     <s:Label text="{(transporter.energy &lt; energySelector.selectedVal?'+':'')+
                              (energySelector.selectedVal - transporter.energy)}" 
                              color="{transporter.energy &gt; energySelector.selectedVal?0xff0000:(
                              transporter.energy == energySelector.selectedVal?0xffffff:0x00ff00)}"
                              width="50" textAlign="right"/>
                     <s:layout>
                        <s:HorizontalLayout verticalAlign="middle"/>
                     </s:layout>
                  </s:Group>
                  <s:Group width="80%">
                     <base:ResourceSelectorComp resourceType="{ResourceType.ZETIUM}"
                                                maxAmmount="{getMaxStock(ResourceType.ZETIUM)}"
                                                id="zetiumSelector"
                                                selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
                     <s:Label text="{(transporter.zetium &lt; zetiumSelector.selectedVal?'+':'')+
                              (zetiumSelector.selectedVal - transporter.zetium)}" 
                              color="{transporter.zetium &gt; zetiumSelector.selectedVal?0xff0000:(
                              transporter.zetium == zetiumSelector.selectedVal?0xffffff:0x00ff00)}"
                              width="50" textAlign="right"/>
                     <s:layout>
                        <s:HorizontalLayout verticalAlign="middle"/>
                     </s:layout>
                  </s:Group>
                  <s:Group width="80%">
                     <s:Group right="50" width="150">
                        <s:Button label="{getString('label.all')}" 
                                  click="selectAll()" right="0"/>
                        <s:Button label="{getString('label.none')}" 
                                  click="selectNone()" left="0"/>
                     </s:Group>
                  </s:Group>
                  <unitsscreen:layout>
                     <s:VerticalLayout horizontalAlign="center"/>
                  </unitsscreen:layout>
               </unitsscreen:StoragePanel>
               
               <base:Warning text="{getString('label.empty')}"
                             visible="{!((getMaxStock(ResourceType.METAL) != 0) 
                             || (getMaxStock(ResourceType.ENERGY) != 0) 
                             || (getMaxStock(ResourceType.ZETIUM) != 0) 
                             || (items.length > 0)
                             || (cachedUnits.length > 0))}" paddingTop="10"/>
               
               
               <!--
               <unitsscreen:StoragePanel width="100%" visible="{items.length > 0}" title="HardcodedItemsTitle">
               </unitsscreen:StoragePanel>
               -->
               <base:layout>
                  <s:VerticalLayout gap="10" horizontalAlign="center"/>
               </base:layout>
               
            </base:AdvancedContainer>
         </base:Scroller>
      </s:Group>
   </s:Group>
   <screens:ScreenCloseButton right="0" bottom="0" label="{getString('label.close')}"
                              click="close_clickHandler(event)">
      
   </screens:ScreenCloseButton> 
   
</s:Group>
