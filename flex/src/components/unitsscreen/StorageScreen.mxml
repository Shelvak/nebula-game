<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:location="components.location.*"
                    creationComplete="basecontainer1_creationCompleteHandler(event)" xmlns:unitsscreen="components.unitsscreen.*">
   
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.YellowButtonSkin;
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import controllers.objects.actions.customcontrollers.WreckageController;
         import controllers.ui.NavigationController;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.MWreckage;
         import models.location.LocationType;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.unit.Unit;
         import models.unit.UnitBuildingEntry;
         import models.unit.UnitKind;
         import models.unit.events.UnitEvent;
         
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         
         import utils.Localizer;
         import utils.datastructures.Collections;
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.OPEN_STORAGE_SCREEN, setTransporter);
            NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
         }
         
         import controllers.units.UnitsCommand;
         import mx.collections.ArrayCollection;
         
         [Bindable]
         private var transporter: Unit;
         
         [Bindable]
         private var cachedUnits: ArrayCollection = new ArrayCollection();
         
         [Bindable]
         private var items: ArrayCollection = new ArrayCollection();
         
         private var wreckage: MWreckage = null;
         
         private function setTransporter(e: GUnitsScreenEvent): void
         {
            cachedUnits.removeAll();
            var tempUnits: Object = {};
            transporter = (e.location as Unit);
            wreckage = Collections.findFirst((transporter.location.isSolarSystem
               ? ML.latestSolarSystem.wreckages
               : ML.latestGalaxy.wreckages), function (item: MWreckage): Boolean
               {
                  return item.currentLocation.equals(transporter.location);
               });
            for each (var unit: Unit in transporter.units)
            {
               if (!tempUnits['unit::'+unit.type])
               {
                  tempUnits['unit::'+unit.type] = 1;
               }
               else
               {
                  tempUnits['unit::'+unit.type]++;
               }
            }
            for (var uType: String in tempUnits)
            {
               cachedUnits.addItem(new UnitBuildingEntry(uType, tempUnits[uType]));
            }
            metalSelector.setValue(transporter.metal);
            energySelector.setValue(transporter.energy);
            zetiumSelector.setValue(transporter.zetium);
         }

         protected function manageUnits_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().showUnits(Collections.filter(ML.units, 
               function(item: Unit): Boolean
               {
                  return ((item.location.type == LocationType.UNIT) && (item.location.id == transporter.id));
               }), transporter.location, null, UnitKind.GROUND);
         }
         
         [Bindable (event="selectedResourcesChange")]
         private function getMaxStock(resource: String): Number
         {
            var possibleStore: Number = (wreckage == null
               ? transporter[resource]
               : Math.min(transporter[resource] + wreckage[resource], 
                          transporter[resource] + Resource.getResourcesForVolume((transporter.storage - transporter.stored) - 
                          getOtherSelected(resource), resource)));
            return Math.max(0, possibleStore);
         }
         
         private function get loadPossible(): Boolean
         {
            return (metalSelector.selectedVal > transporter.metal
               || energySelector.selectedVal > transporter.energy
               || zetiumSelector.selectedVal > transporter.zetium);
         }
         
         private function get unloadPossible(): Boolean
         {
            return (metalSelector.selectedVal < transporter.metal
               || energySelector.selectedVal < transporter.energy
               || zetiumSelector.selectedVal < transporter.zetium);
         }
         
         [Bindable (event="selectedResourcesChange")]
         private function get transferPossible(): Boolean
         {
            return (metalSelector.selectedVal != transporter.metal
               || energySelector.selectedVal != transporter.energy
               || zetiumSelector.selectedVal != transporter.zetium);
         }
         
         [Bindable (event="selectedResourcesChange")]
         private function getOtherSelected(resource: String = ''): int
         {
            var selectedTotal: int = 0;
            if (metalSelector && energySelector && zetiumSelector)
            {
               if (resource != ResourceType.METAL)
                  selectedTotal += Resource.getResourceVolume(metalSelector.selectedVal, ResourceType.METAL) - 
                     Resource.getResourceVolume(transporter.metal, ResourceType.METAL);
               if (resource != ResourceType.ENERGY)
                  selectedTotal += Resource.getResourceVolume(energySelector.selectedVal, ResourceType.ENERGY) - 
                     Resource.getResourceVolume(transporter.energy, ResourceType.ENERGY);
               if (resource != ResourceType.ZETIUM)
                  selectedTotal += Resource.getResourceVolume(zetiumSelector.selectedVal, ResourceType.ZETIUM) - 
                     Resource.getResourceVolume(transporter.zetium, ResourceType.ZETIUM);
            }
            return selectedTotal;
         }
         
         protected function selectedResourcesChangeHandler(event:UnitEvent):void
         {
            dispatchRefreshMaxStorageEvent();
         }
         
         private function dispatchRefreshMaxStorageEvent(e: Event = null): void
         {
            dispatchEvent(new UnitEvent(UnitEvent.SELECTED_RESOURCES_CHANGE));
         }
         
         private function removePending(e: GUnitEvent): void
         {
            EventBroker.unsubscribe(GUnitEvent.LOAD_APPROVED, removePending);
            transporter.pending = false;
         }


         protected function transfer_clickHandler(event:MouseEvent):void
         {
            if (loadPossible)
            {
               transporter.pending = true;
               EventBroker.subscribe(GUnitEvent.LOAD_APPROVED, removePending);
               new UnitsCommand(
                  UnitsCommand.LOAD_RESOURCES,
                  {
                     transporterId: transporter.id,
                     metal: Math.abs(metalSelector.selectedVal - transporter.metal),
                     energy: Math.abs(energySelector.selectedVal - transporter.energy),
                     zetium: Math.abs(zetiumSelector.selectedVal - transporter.zetium)
                  }).dispatch();
            }
            if (unloadPossible)
            {
               transporter.pending = true;
               EventBroker.subscribe(GUnitEvent.LOAD_APPROVED, removePending);
               new UnitsCommand(
                  UnitsCommand.UNLOAD_RESOURCES,
                  {
                     transporterId: transporter.id,
                     metal: Math.abs(metalSelector.selectedVal - transporter.metal),
                     energy: Math.abs(energySelector.selectedVal - transporter.energy),
                     zetium: Math.abs(zetiumSelector.selectedVal - transporter.zetium)
                  }).dispatch();
            }
            dispatchRefreshMaxStorageEvent();
         }

      ]]>
   </fx:Script>
   
   
   <base:layout>
      <s:VerticalLayout paddingLeft="6" paddingTop="6" gap="6" paddingRight="6"/>
   </base:layout>
   <!--s:Label text="{Localizer.string('Units', 'label.currentUnits')}" fontSize="26" color="#3bc133"/-->
   <s:Group width="100%">
      <s:Group id="locationGroup" width="100%" maxWidth="{locComp.maxWidth}">
         <s:Label text="{Localizer.string('Units', 'label.location')}" styleName="h3"/>
         <location:MiniLocationComp id="locComp" location="{transporter}"/>
         <s:layout>
            <s:VerticalLayout/>
         </s:layout>
      </s:Group> 
      <s:layout>
         <s:HorizontalLayout gap="10"/>
      </s:layout>
   </s:Group>
   <base:AdvancedContainer width="100%" height="100%">
      <s:Group width="100%" visible="{cachedUnits.length > 0}">
         <s:Label text="{Localizer.string('Units', 'label.units') + ':'}"/>
         <s:DataGroup id="cachedUnitsList" width="100%" height="{unitLayout.rowCount * 72}" 
                      dataProvider="{cachedUnits}"
                      itemRenderer="components.unit.IRUnitBuildingEntrySmall">
            <s:layout>
               <s:TileLayout id="unitLayout"/>
            </s:layout>
         </s:DataGroup>
         <s:Button id="manageUnits" click="manageUnits_clickHandler(event)" label="{Localizer.string('Units',
                   'label.manage')}"/>
         <s:layout>
            <s:HorizontalLayout/>
         </s:layout>
      </s:Group>
      
      <base:AdvancedContainer width="100%" visible="{(getMaxStock(ResourceType.METAL) != 0) 
                              || (getMaxStock(ResourceType.ENERGY) != 0) 
                              || (getMaxStock(ResourceType.ZETIUM) != 0)}">
         <s:Label text="{Localizer.string('Units', 'label.resources') + ':'}"/>
         <s:Group width="80%">
            <unitsscreen:LoadResourceComp resourceType="{ResourceType.METAL}" 
                                          maxAmmount="{getMaxStock(ResourceType.METAL)}"
                                          id="metalSelector" 
                                          selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
         </s:Group>
         <s:Group width="80%">
            <unitsscreen:LoadResourceComp resourceType="{ResourceType.ENERGY}" 
                                          maxAmmount="{getMaxStock(ResourceType.ENERGY)}"
                                          id="energySelector"
                                          selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
         </s:Group>
         <s:Group width="80%">
            <unitsscreen:LoadResourceComp resourceType="{ResourceType.ZETIUM}"
                                          maxAmmount="{getMaxStock(ResourceType.ZETIUM)}"
                                          id="zetiumSelector"
                                          selectedResourcesChange="selectedResourcesChangeHandler(event)"/>
         </s:Group>
         <base:layout>
            <s:VerticalLayout/>
         </base:layout>
      </base:AdvancedContainer>
      
      <s:Group width="100%" visible="{transferPossible}">
         <s:Button skinClass="components.skins.YellowButtonSkin" 
                   label="{Localizer.string('Units', 'label.transferResources')}"
                   enabled="{!transporter.pending}"
                   click="transfer_clickHandler(event)" right="10"/>
      </s:Group>
      
      <s:Group width="100%" visible="{items.length > 0}">
         <!-- ITEMS ITEMS ITEMS ITEMS ITEMS ITEMS ITEMS ITEMS -->
      </s:Group>
      
      <base:layout>
         <s:VerticalLayout gap="10"/>
      </base:layout>
      
   </base:AdvancedContainer>
   
</base:BaseContainer>
