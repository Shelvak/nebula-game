<?xml version="1.0" encoding="utf-8"?>
<base:AdvancedContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                        xmlns:s="library://ns.adobe.com/flex/spark"
                        xmlns:base="components.base.*"
                        xmlns:credits="components.credits.*"
                        addedToStage="advancedcontainer1_addedToStageHandler(event)"
                        removedFromStage="advancedcontainer1_removedFromStageHandler(event)"
                        width="100%" xmlns:components="utils.components.*"
                        xmlns:facilities="components.unitsscreen.facilities.*">
   <fx:Binding source="ML.player.vipLevel != 0" destination="playerIsVip"/>
   <base:states>
      <s:State name="collapsed"/>
      <s:State name="expanded"/>
   </base:states>
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.credits.ConstructorCompleteAll;
      import components.popups.ActionConfirmationPopUp;
      import components.unitsscreen.UnitScreenAnimationDurations;

      import controllers.buildings.BuildingsCommand;
      import controllers.constructionqueues.ConstructionQueuesCommand;

      import globalevents.GTechnologiesEvent;
      import globalevents.GlobalEvent;

      import models.building.Building;
      import models.building.events.BuildingEvent;
      import models.constructionqueueentry.ConstructionQueueEntry;
      import models.unit.Unit;

      import mx.collections.ArrayCollection;
      import mx.core.IUIComponent;
      import mx.core.UIComponent;
      import mx.events.DragEvent;
      import mx.events.FlexEvent;
      import mx.managers.DragManager;

      import utils.UrlNavigate;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;


      public static const SHOP_PART_HEIGHT: Number = 180;
      [Bindable]
      private var _facility: Building;
      public function set facility(value: Building): void {
         var oldBuilding: Building = _facility;
         if (_facility != null) {
            _facility.removeEventListener(
               BuildingEvent.QUERY_CHANGE, cancelDragIfNeeded
            );
            _facility.removeEventListener(BuildingEvent.COLLAPSE, collapseList);
            _facility.removeEventListener(BuildingEvent.EXPAND, expandList);
         }
         _facility = value;
         if (_facility != null) {
            _facility.addEventListener(
               BuildingEvent.QUERY_CHANGE, cancelDragIfNeeded
            );
            _facility.addEventListener(BuildingEvent.COLLAPSE, collapseList);
            _facility.addEventListener(BuildingEvent.EXPAND, expandList);
         }
         if ((oldBuilding != null) && (_facility != null)) {
            if (oldBuilding.id != _facility.id) {
               recalculateUnitsList();
            }
         }
         else
         if (_facility != null) {
            recalculateUnitsList();
         }
      }
      [Bindable]
      private var playerIsVip: Boolean = false;
      [Bindable]
      private var purchasableList: ArrayCollection = null;
      private static const imageSize: int = 172;
      [Bindable]
      private var isMoving: Boolean = false;
      [Bindable]
      private var unitsList: ArrayCollection = null;
      private function cancelDragIfNeeded(e: BuildingEvent): void {
         if (isMoving) {
            isMoving = false;
            DragManager.acceptDragDrop(null);
            content.layout.hideDropIndicator();
            DragManager.showFeedback(DragManager.NONE);
            content.drawFocus(false);
         }
      }
      public function expandList(e: Event = null): void {
         if (currentState != "expanded") {
            collapse.stop();
            expand.play();
            (currentState = "expanded");
         }
      }
      public function collapseList(e: Event = null): void {
         if (currentState != "collapsed") {
            expand.stop();
            collapse.play();
            currentState = "collapsed"
         }
      }
      protected function content_dragCompleteHandler(event: DragEvent = null): void {
         if (isMoving) {
            var tempElement: ConstructionQueueEntry = (content.selectedItems[0] as ConstructionQueueEntry);
            if (_facility.constructionQueueEntries.getItemIndex(tempElement) !=
                   tempElement.position) {
               var newPosition: int = tempElement.position > _facility.constructionQueueEntries.getItemIndex(tempElement)
                                         ?
                                      content.selectedIndex
                                         : content.selectedIndex + 1;
               new ConstructionQueuesCommand(
                  ConstructionQueuesCommand.MOVE,
                  {id:         tempElement.id,
                     count:    tempElement.countSelected,
                     position: newPosition}
               ).dispatch();
            }
            isMoving = false;
         }
      }
      protected function content_dragStartHandler(event: DragEvent): void {
         isMoving = true;
      }
      protected function shop_creationCompleteHandler(event: FlexEvent): void {
         EventBroker.subscribe(GTechnologiesEvent.TECHNOLOGY_LEVEL_CHANGED,
                               recalculateUnitsList);
      }
      private function recalculateUnitsList(e: Event = null): void {
         if (_facility != null) {
            unitsList = Unit.getAllUnits(_facility);
         }
         else {
            unitsList = new ArrayCollection();
         }
      }
      private static const PREVIOUS_QUEUE: int = 1;
      private static const NEXT_QUEUE: int = 2;
      private static const PREVIOUS_SHOP: int = 3;
      private static const NEXT_SHOP: int = 4;
      private static const QUEUE_SCROLL_STEP: int = 10;
      private static const SHOP_SCROLL_STEP: int = 10;
      private static const SHOP_SKIP_STEP: int = 200;
      private static const SCROLL_DELAY: int = 30;
      private var scrollTimer: Timer;
      private var scrollType: int = 0;
      protected function nextQueue_rollOverHandler(event: Event): void {
         scrollType = NEXT_QUEUE;
         scrollTimer.start();
      }
      protected function previousQueue_rollOverHandler(event: Event): void {
         scrollType = PREVIOUS_QUEUE;
         scrollTimer.start();
      }
      protected function nextShop_rollOverHandler(event: Event): void {
         scrollType = NEXT_SHOP;
         scrollTimer.start();
      }
      protected function previousShop_rollOverHandler(event: Event): void {
         scrollType = PREVIOUS_SHOP;
         scrollTimer.start();
      }
      private function scrollViewport(e: TimerEvent): void {
         switch (scrollType) {
            case PREVIOUS_QUEUE:
               if (queueViewport.horizontalScrollPosition > 0) {
                  queueViewport.horizontalScrollPosition -=
                     Math.min(queueViewport.horizontalScrollPosition,
                              QUEUE_SCROLL_STEP);
               }
               break;
            case NEXT_QUEUE:
               if (queueViewport.horizontalScrollPosition < (content.width - queueCont.width)) {
                  queueViewport.horizontalScrollPosition +=
                     Math.min((content.width - queueCont.width) - queueViewport.horizontalScrollPosition,
                              QUEUE_SCROLL_STEP);
               }
               break;
            case PREVIOUS_SHOP:
               if (shopViewport.horizontalScrollPosition > 0) {
                  shopViewport.horizontalScrollPosition -=
                     Math.min(shopViewport.horizontalScrollPosition,
                              SHOP_SCROLL_STEP);
               }
               break;
            case NEXT_SHOP:
               if (shopViewport.horizontalScrollPosition < (shop.width - shopCont.width)) {
                  shopViewport.horizontalScrollPosition +=
                     Math.min((shop.width - shopCont.width) - shopViewport.horizontalScrollPosition,
                              SHOP_SCROLL_STEP);
               }
               break;
            default:
               throw new Error('Scrolling failed, with uknown scroll type: ' + scrollType);
         }
      }
      protected function scroll_rollOutHandler(event: Event): void {
         scrollType = 0;
         scrollTimer.stop();
      }
      protected function nextQueue_dragEnterHandler(event: DragEvent): void {
         DragManager.acceptDragDrop(event.target as IUIComponent);
         nextQueue_rollOverHandler(event);
         content.dragMoveEnabled = false;
      }
      protected function previousQueue_dragEnterHandler(event: DragEvent): void {
         DragManager.acceptDragDrop(event.target as IUIComponent);
         previousQueue_rollOverHandler(event);
         content.dragMoveEnabled = false;
      }
      protected function nextShop_dragEnterHandler(event: DragEvent): void {
         DragManager.acceptDragDrop(event.target as IUIComponent);
         nextShop_rollOverHandler(event);
         content.dragMoveEnabled = false;
      }
      protected function previousShop_dragEnterHandler(event: DragEvent): void {
         DragManager.acceptDragDrop(event.target as IUIComponent);
         previousShop_rollOverHandler(event);
         content.dragMoveEnabled = false;
      }
      protected function button_dragDropHandler(event: Event): void {
         callLater(function (): void {
            content.dragMoveEnabled = true;
         });
      }
      private function reset(e: GlobalEvent): void {
         facility = null;
         if (scrollTimer != null) {
            scrollTimer.stop();
            scrollTimer.removeEventListener(TimerEvent.TIMER, scrollViewport);
            scrollTimer = null;
         }
      }
      protected function advancedcontainer1_addedToStageHandler(event: Event): void {
         scrollTimer = new Timer(SCROLL_DELAY);
         scrollTimer.addEventListener(TimerEvent.TIMER, scrollViewport);
         EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
      }
      protected function advancedcontainer1_removedFromStageHandler(event: Event): void {
         if (scrollTimer != null) {
            scrollTimer.stop();
            scrollTimer.removeEventListener(TimerEvent.TIMER, scrollViewport);
            scrollTimer = null;
         }
      }
      protected function nextShop_clickHandler(event: MouseEvent): void {
         if (shopViewport.horizontalScrollPosition < (shop.width - shopCont.width)) {
            shopViewport.horizontalScrollPosition +=
               Math.min((shop.width - shopCont.width) - shopViewport.horizontalScrollPosition,
                        SHOP_SKIP_STEP);
         }
      }
      protected function previousShop_clickHandler(event: MouseEvent): void {
         if (shopViewport.horizontalScrollPosition > 0) {
            shopViewport.horizontalScrollPosition -=
               Math.min(shopViewport.horizontalScrollPosition, SHOP_SKIP_STEP);
         }
      }
      protected function btnFlank_clickHandler(event: Event): void {
         new BuildingsCommand(BuildingsCommand.SET_BUILD_IN_2ND_FLANK,
                              {
                                 'model':  _facility,
                                 'enable': !_facility.buildIn2ndFlank
                              }
         ).dispatch();
      }
      private function getProvider(_list: ArrayCollection,
                                   _constructableId: int): ArrayCollection {
         return _constructableId > 0 ? _list : null;
      }
      protected function btnHidden_clickHandler(event: Event): void {
         new BuildingsCommand(BuildingsCommand.SET_BUILD_HIDDEN,
                              {
                                 'model':  _facility,
                                 'enable': !_facility.buildHidden
                              }
         ).dispatch();
      }
      private function coinComp1_clickHandler(event: MouseEvent): void {
         var accelerator: ConstructorCompleteAll = new ConstructorCompleteAll();
         var speedPopUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         accelerator.popUp = speedPopUp;
         accelerator.constructor = _facility;
         speedPopUp.confirmButtonEnabled = true;
         speedPopUp.confirmButtonClickHandler = function (): void {
            if (_facility != null) {
               if (accelerator.hasEnoughCredits()) {
                  new BuildingsCommand(
                     BuildingsCommand.CONSTRUCT_ALL, {
                        'constructorId': _facility.id,
                        'index':         accelerator.currentModel.index}).dispatch();
               }
               else {
                  UrlNavigate.getInstance().showBuyCreds();
               }
            }
         };
         speedPopUp.addElement(accelerator);
         speedPopUp.show();
      }
      private static const CONSTRUCT_ALL_HIDDEN: int = 0;
      private static const CONSTRUCT_ALL_DISABLED: int = 1;
      private static const CONSTRUCT_ALL_NOT_VIP: int = 3;
      private static const CONSTRUCT_ALL_ENABLED: int = 2;

      private function getConstructAllState(entries: ArrayCollection,
                                            playerIsVip: Boolean): int {
         var hasPrepaid: Boolean = false;
         var hasUnprepaid: Boolean = false;
         for each (var entry: ConstructionQueueEntry in entries) {
            if (entry.prepaid) {
               hasPrepaid = true;
            }
            else {
               hasUnprepaid = true;
            }
         }
         if (hasPrepaid) {
            if (hasUnprepaid) {
               return CONSTRUCT_ALL_DISABLED;
            }
            else if (playerIsVip) {
               return CONSTRUCT_ALL_ENABLED;
            }
            return CONSTRUCT_ALL_NOT_VIP;
         }
         else {
            return CONSTRUCT_ALL_HIDDEN;
         }
      }

      private function getConstructAllTooltip(entries: ArrayCollection,
                                              playerIsVip: Boolean): String {
         const state: int = getConstructAllState(entries, playerIsVip);
         if (state == CONSTRUCT_ALL_DISABLED) {
            return Localizer.string('Credits', 'tooltip.hasUnprepaid');
         }
         if (state == CONSTRUCT_ALL_NOT_VIP) {
            return Localizer.string('Credits', 'tooltip.buildAllEntries.mustBeVip')
         }
         return "";
      }
      ]]>
   </fx:Script>  
   <fx:Declarations>
      <s:Parallel id="expand" target="{colGroup}">
         <s:Move yFrom="{colGroup.y}" yTo="{SHOP_PART_HEIGHT}" 
                 duration="{UnitScreenAnimationDurations.FACILITY_EXPAND}"
                 effectStart="colGroup.visible = true"
                 effectEnd="_facility.dispatchExpandFinishedEvent()"/>
      </s:Parallel>
      
      <s:Parallel id="collapse" target="{colGroup}">
         <s:Move yFrom="{colGroup.y}" yTo="0" 
                 duration="{UnitScreenAnimationDurations.FACILITY_COLLAPSE}"
                 effectEnd="colGroup.visible = false"/>
      </s:Parallel>
   </fx:Declarations>
   <s:Group id="colGroup" height="{SHOP_PART_HEIGHT}" left="0" right="0" visible="false">

      <!-- content rect borders -->
      <s:BitmapImage top="0" bottom="0" width="100%" fillMode="repeat"
                     source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'bottom_center')}"/>
      <s:BitmapImage left="0"
                     source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'bottom_left')}"/>

      <s:Group id="shopGroup" top="12" left="10" right="10" bottom="3">
         <base:Scroller horizontalScrollPolicy="off" verticalScrollPolicy="off"
                        id="shopCont" top="0" bottom="0" left="{previousShop.visible?24:0}"
                        right="{nextShop.visible?24:0}">
            <s:Group id="shopViewport" top="0" bottom="0" width="100%">
               <s:List id="shop" name="shop" top="0" bottom="0" dataProvider="{unitsList}"
                       minWidth="{shopGroup.width -(previousShop.visible?48:0)}"
                       maxWidth="{unitsList.length == 0? shopGroup.width : UIComponent.DEFAULT_MAX_WIDTH}"
                       skinClass="components.skins.ListNonScrollableSkin"
                       width="{shopLayout.columnCount * 263}"
                       useVirtualLayout="false" contentBackgroundColor="#0f0f0f" contentBackgroundAlpha="0"
                       rollOverColor="#0f0f0f" selectionColor="#0f0f0f" allowMultipleSelection="false"
                       borderVisible="false" creationComplete="shop_creationCompleteHandler(event)"
                       itemRenderer="components.unitsscreen.facilities.IRPurchasableUnit">
                  <s:layout>
                     <s:HorizontalLayout id="shopLayout" gap="3"/>
                  </s:layout>
               </s:List>
            </s:Group>

         </base:Scroller>
      </s:Group>

      <s:BitmapImage right="0"
                     source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'bottom_right')}"/>

      <s:Button skinClass="components.skins.PreviousButtonSkin" id="previousShop" visible="{!(!(shopGroup.width &lt; shop.width)
                || (unitsList.length == 0))}"
                verticalCenter="0" left="0"  dragEnter="previousShop_dragEnterHandler(event)"
                dragExit="content.dragMoveEnabled = true; scroll_rollOutHandler(event)"
                dragDrop="button_dragDropHandler(event)"
                click="previousShop_clickHandler(event)"
                rollOver="previousShop_rollOverHandler(event)" rollOut="scroll_rollOutHandler(event)"/>
      <s:Button skinClass="components.skins.NextButtonSkin" visible="{!(!(shopGroup.width &lt; shop.width)
                || (unitsList.length == 0))}" right="0"
                                              verticalCenter="0"  dragEnter="nextShop_dragEnterHandler(event)"
                                              dragExit="content.dragMoveEnabled = true; scroll_rollOutHandler(event)"
                                              dragDrop="button_dragDropHandler(event)"
                                              click="nextShop_clickHandler(event)"
                                              rollOver="nextShop_rollOverHandler(event)" id="nextShop" rollOut="scroll_rollOutHandler(event)"/>
   </s:Group>
   <s:Group left="0" right="0" height="{SHOP_PART_HEIGHT}">



      <s:ToggleButton skinClass="components.skins.ChangeDefaultFlankButtonSkin"
             selected="{_facility.buildIn2ndFlank}" id="btnFlank"
             click="btnFlank_clickHandler(event)"
             toolTip="{Localizer.string(
               'Units',
               'tooltip.' + ( _facility.buildIn2ndFlank
                  ? 'buildInFlank2' : 'buildInFlank1')
             )}"/>
      <s:ToggleButton skinClass="components.skins.ChangeBuildHiddenSkin"
                      top="{btnFlank.height}"
             selected="{_facility.buildHidden}" id="btnHidden"
             click="btnHidden_clickHandler(event)"
             toolTip="{Localizer.string(
               'Units',
               'tooltip.' + ( _facility.buildHidden
                  ? 'buildNotHidden' : 'buildHidden')
             )}"/>
      <s:Group id="facilityGroup" left="{btnFlank.width}">
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'top_left')}"/>
         <s:Group width="{imageSize}" height="{imageSize}" left="4" top="4">
            <components:CenteredBitmapImage
               source="{IMG.getImage(AssetNames.getConceptBuildingImageName(_facility.type))}"
               width="100%" height="100%"/>
            <base:BackgroundedLabel right="3" bottom="3" visible="{_facility.totalConstructorMod > 0}"
                                    text="{_facility.totalConstructorMod + '%'}"/>
            <s:Group top="0" right="0"
                     visible="{getConstructAllState(
                                  _facility.constructionQueueEntries,
                                  playerIsVip) != CONSTRUCT_ALL_HIDDEN}"
                    toolTip="{getConstructAllTooltip(
                                 _facility.constructionQueueEntries,
                                 playerIsVip)}"
                    clipAndEnableScrolling="true">
               <s:Rect top="-5" bottom="0" left="0" right="-5" alpha="0.9"
                       radiusX="5" radiusY="5">
                  <s:fill>
                     <s:SolidColor color="#000000"/>
                  </s:fill>
               </s:Rect>
               <credits:CoinComp top="6" right="6" left="6" bottom="6"
                                 enabled="{getConstructAllState(
                                              _facility.constructionQueueEntries,
                                              playerIsVip) == CONSTRUCT_ALL_ENABLED}"
                                 click="coinComp1_clickHandler(event)"/>
            </s:Group>
         </s:Group>
      </s:Group>



      <s:Group right="{topRight.width}" height="100%" left="{facilityGroup.width + btnFlank.width}">
         <!-- content rect background -->
         <s:BitmapImage top="0" bottom="0" width="100%" fillMode="repeat"
                        source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'top_center')}"/>
         <s:Group left="0" right="0" height="100%">
            <s:Group left="0" right="0" height="100%">
               <facilities:BuildElement unitModel="{_facility.constructableId > 0
                                           ? ML.latestPlanet.getUnitById(_facility.constructableId)
                                           : null}" height="100%"
                                        visible="{_facility.constructableId > 0}" id="buildElem"
                                        left="0" top="6" facilityId="{_facility.id}" />
               <s:Group id="queueGroup" left="{buildElem.visible?buildElem.width:0}" height="100%" right="0">
                  <base:Scroller horizontalScrollPolicy="off" verticalScrollPolicy="off"
                                 id="queueCont" top="0" bottom="0" left="{previousQueue.visible?24:0}" right="{nextQueue.visible?24:0}">
                     <s:Group id="queueViewport" top="0" bottom="0" width="100%">
                        <s:List top="6" bottom="6" id="content" minWidth="{queueGroup.width -(previousQueue.visible?48:0)}"
                                maxWidth="{_facility.constructionQueueEntries.length == 0? queueGroup.width : UIComponent.DEFAULT_MAX_WIDTH}"
                                width="{Math.max(queueLayout.columnCount * 167, queueGroup.width -(previousQueue.visible?48:0))}"
                                dataProvider="{getProvider(_facility.constructionQueueEntries, _facility.constructableId)}"
                                skinClass="components.skins.ListNonScrollableSkin"
                                useVirtualLayout="false" contentBackgroundColor="#00ff22"
                                contentBackgroundAlpha="0" dropEnabled="{isMoving}"
                                rollOverColor="#0f0f0f" selectionColor="#0f0f0f"
                                dragStart="content_dragStartHandler(event)"
                                dragEnabled="true" dragMoveEnabled="true"
                                borderVisible="false" dragComplete="content_dragCompleteHandler(event)">
                           <s:itemRenderer>
                              <fx:Component>
                                 <s:ItemRenderer height="100%">
                                    <facilities:QueryElement queryElementModel="{data}" height="100"/>
                                 </s:ItemRenderer>
                              </fx:Component>
                           </s:itemRenderer>
                           <s:layout>
                              <s:HorizontalLayout id="queueLayout" gap="3"/>
                           </s:layout>
                        </s:List>
                     </s:Group>

                  </base:Scroller>
                  <s:Button skinClass="components.skins.PreviousButtonSkin" id="previousQueue" visible="{!(!(queueGroup.width &lt; content.width)
                            || (_facility.constructionQueueEntries.length == 0))}"
                            verticalCenter="0" dragEnter="previousQueue_dragEnterHandler(event)"
                            dragExit="content.dragMoveEnabled = true; scroll_rollOutHandler(event)"
                            dragDrop="button_dragDropHandler(event)"
                            rollOver="previousQueue_rollOverHandler(event)" rollOut="scroll_rollOutHandler(event)" left="0"/>
                  <s:Button skinClass="components.skins.NextButtonSkin" visible="{!(!(queueGroup.width &lt; content.width)
                            || (_facility.constructionQueueEntries.length == 0))}" right="0"
                                                                                   verticalCenter="0" dragEnter="nextQueue_dragEnterHandler(event)"
                                                                                   dragExit="content.dragMoveEnabled = true; scroll_rollOutHandler(event)"
                                                                                   dragDrop="button_dragDropHandler(event)"
                                                                                   rollOver="nextQueue_rollOverHandler(event)" id="nextQueue" rollOut="scroll_rollOutHandler(event)"/>
               </s:Group>
            </s:Group>
         </s:Group>
      </s:Group>

      <s:BitmapImage right="0" id="topRight"
                     source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'top_right')}"/>
   </s:Group>
   
</base:AdvancedContainer>
