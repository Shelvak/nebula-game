<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:facilities="components.unitsscreen.facilities.*"
                    creationComplete="unitsScreen_creationCompleteHandler(event)" 
                    width="100%" height="100%">
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import controllers.ui.NavigationController;

      import globalevents.GlobalEvent;

      import models.building.Building;
      import models.building.events.BuildingEvent;
      import models.planet.MPlanet;
      import models.planet.events.MPlanetEvent;
      import models.unit.MCUnitsBuild;
      import models.unit.events.UnitEvent;

      import mx.collections.ListCollectionView;
      import mx.events.FlexEvent;

      import spark.events.IndexChangeEvent;


      [Bindable]
      private var facilities: ListCollectionView = new ListCollectionView();

      private function refreshFacilities(e: Event = null): void {
         var oldSelection: Building = facilitiesList.selectedItem;
         var facility: Building;
         if (facilities != null && facilities.length > 0) {
            for each (facility in facilities) {
               facility.removeEventListener(BuildingEvent.EXPAND_FINISHED,
                                            scrollToSelected);
               facility.dispatchCollapseEvent();
            }
         }
         facilities = latestPlanet.getUnitsFacilities();
         for each (facility in facilities) {
            facility.addEventListener(BuildingEvent.EXPAND_FINISHED,
                                      scrollToSelected);
            if (facility == oldSelection && e) {
               facility.dispatchExpandEvent();
            }
         }
      }

      private var latestPlanet: MPlanet;

      private function scrollToSelected(e: Event): void {
         vPort.verticalScrollPosition =
            facilitiesList.selectedIndex * UnitFacility.SHOP_PART_HEIGHT;
      }

      private function refreshPlanet(): void {
         if (latestPlanet != ML.latestPlanet) {
            if (latestPlanet != null) {
               latestPlanet.removeEventListener(MPlanetEvent.BUILDING_UPGRADED,
                                                refreshFacilities);
            }
            latestPlanet = ML.latestPlanet;
            latestPlanet.addEventListener(MPlanetEvent.BUILDING_UPGRADED,
                                          refreshFacilities);
            refreshFacilities();
         }
      }

      private function openFacilityById(e: UnitEvent): void {
         refreshPlanet();
         for each(var element: Building in facilities) {
            if (element.id == BS.facilityId) {
               element.dispatchExpandEvent();
               facilitiesList.selectedIndex = facilities.getItemIndex(element);
               facilitiesList.addEventListener(FlexEvent.UPDATE_COMPLETE,
                                               element.dispatchExpandEvent);
               facilitiesList.removeEventListener
                  (FlexEvent.UPDATE_COMPLETE, element.dispatchCollapseEvent);
            }
            else {
               facilitiesList.removeEventListener(FlexEvent.UPDATE_COMPLETE,
                                                  element.dispatchExpandEvent);
               facilitiesList.addEventListener(FlexEvent.UPDATE_COMPLETE,
                                               element.dispatchCollapseEvent);
            }
         }
      }

      private function reset(e: GlobalEvent): void {
         if (latestPlanet != null) {
            latestPlanet.removeEventListener(MPlanetEvent.BUILDING_UPGRADED,
                                             refreshFacilities);
         }
         latestPlanet = null;
      }

      private var BS: MCUnitsBuild = MCUnitsBuild.getInstance();

      protected function unitsScreen_creationCompleteHandler(event: FlexEvent): void {
         BS.addEventListener(UnitEvent.OPEN_FACILITY, openFacilityById);
         latestPlanet = ML.latestPlanet;
         refreshFacilities();
         latestPlanet.addEventListener(MPlanetEvent.BUILDING_UPGRADED,
                                       refreshFacilities);
         var selectFacilityEvent: Function = function(e: FlexEvent): void {
            facilitiesList.removeEventListener(FlexEvent.UPDATE_COMPLETE,
                                               selectFacilityEvent);
            NavigationController.getInstance()
               .dispatchMainAreaScreenSwitchEvent();
         };
         EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
         facilitiesList.addEventListener(FlexEvent.UPDATE_COMPLETE,
                                         selectFacilityEvent);
      }


      protected function facilitiesList_changeHandler(event: IndexChangeEvent): void {
         if (event.newIndex != -1) {
            for each (var element: Building in facilities)
               if (facilities.getItemIndex(element)
                      != facilitiesList.selectedIndex) {
                  facilitiesList.removeEventListener
                     (FlexEvent.UPDATE_COMPLETE, element.dispatchExpandEvent);
                  element.dispatchCollapseEvent();
               }
               else {
                  facilitiesList.removeEventListener
                     (FlexEvent.UPDATE_COMPLETE, element.dispatchCollapseEvent);
                  element.dispatchExpandEvent();
               }
         }
      }
      ]]>
   </fx:Script>
   <s:Rect top="0" bottom="0" left="0" right="0">
      <s:fill>
         <s:SolidColor color="#080808"/>
      </s:fill>
   </s:Rect>
   <base:Scroller id="scrollCont" top="0" bottom="0" left="0"
                  right="0" horizontalScrollPolicy="off" 
                  stepMultiplier="5">
      <s:Group left="0" right="0" height="100%" id="vPort">
         <s:List id="facilitiesList" dataProvider="{facilities}" left="0" right="0" height="100%"
                 useVirtualLayout="false" contentBackgroundColor="#0f0f0f" requireSelection="true"
                 rollOverColor="#0f0f0f" selectionColor="#0f0f0f" 
                 skinClass="components.skins.ListNonScrollableSkin"
                 borderVisible="false" changing="facilitiesList_changeHandler(event)">
            <s:itemRenderer>
               <fx:Component>
                  <s:ItemRenderer width="100%">
                     <facilities:UnitFacility facility="{data}" width="100%" focusEnabled="false"/>
                  </s:ItemRenderer>
               </fx:Component>
            </s:itemRenderer>
            <s:layout>
               <s:VerticalLayout gap="1"/>
            </s:layout>
         </s:List>
      </s:Group>
   </base:Scroller>
</base:BaseContainer>