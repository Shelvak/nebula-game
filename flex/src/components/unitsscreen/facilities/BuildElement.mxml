<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    creationComplete="basecontainer1_creationCompleteHandler(event)" 
                    xmlns:components="utils.components.*" xmlns:credits="components.credits.*">
   
   <fx:Script>
      <![CDATA[
      import components.credits.AccelerateSelector;
      import components.popups.ActionConfirmationPopup;

      import config.Config;

      import models.building.Building;

      import controllers.buildings.BuildingsCommand;
      import controllers.objects.ObjectClass;

      import models.parts.events.UpgradeEvent;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.unit.MCUnitsBuild;
      import models.unit.Unit;

      import mx.events.FlexEvent;

      import spark.components.Button;
      import spark.components.Label;
      import spark.effects.Fade;
      import spark.effects.animation.RepeatBehavior;

      import utils.UrlNavigate;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;

      private var fade: Fade = new Fade();

      private static const FADE_TIME: int = 600;
      private static const LOOP_TIME: int = 1500;
      [Bindable]
      private var _unitModel: Unit;

      public function set unitModel(value: Unit): void {
         if (_unitModel != value) {
            if (_unitModel != null && _unitModel.upgradePart != null) {
               _unitModel.upgradePart.removeEventListener(
                       UpgradeEvent.UPGRADE_PROGRESS,
                       model_upgradeProgressHandler
               );
               fade.end();
            }
            _unitModel = value;
            if (_unitModel != null) {
               _unitModel.upgradePart.addEventListener(
                       UpgradeEvent.UPGRADE_PROGRESS,
                       model_upgradeProgressHandler, false, 0, true
               );
               fade.play([lights]);
            }
         }
      }

      [Bindable]
      public var facilityId: int;

      private static const imageSize: int = 132;

      [Bindable]
      private var builtPart: Number;

      override protected function updateDisplayList(uw: Number, uh: Number): void {
         super.updateDisplayList(uw, uh);
         if (!_unitModel || !_unitModel.upgradePart) {
            return;
         }

         if (!_unitModel.upgradePart.upgradeCompleted) {
            progBar.setProgress(_unitModel.upgradePart.upgradeProgress, 1);
            builtPart = _unitModel.upgradePart.upgradeProgress;
         }
         else {
            progBar.setProgress(1, 1);
         }
      }

      private function model_upgradeProgressHandler(e: UpgradeEvent): void {
         invalidateDisplayList();
      }

      [Bindable (event="willNotChange")]
      private function get notEnoughStorageTooltip(): String
      {
         return Localizer.string('Resources', 'notEnoughStorage');
      }

      protected function basecontainer1_creationCompleteHandler(event: FlexEvent): void {
         fade.duration = FADE_TIME;
         fade.repeatBehavior = RepeatBehavior.REVERSE;
         fade.repeatCount = 0;
         fade.alphaFrom = 0;
         fade.alphaTo = 1;
      }


      protected function coincomp1_clickHandler(event: MouseEvent): void {
         var accelerator: AccelerateSelector = new AccelerateSelector();
         accelerator.upgradePart = _unitModel.upgradePart;
         var speedPopUp: ActionConfirmationPopup = new ActionConfirmationPopup();
         accelerator.popUp = speedPopUp;
         speedPopUp.confirmButtonEnabled = false;
         speedPopUp.confirmButtonClickHandler = function(): void {
            const building: Building =
                     ML.latestPlanet.getBuildingByConstructable(
                        _unitModel.id, ObjectClass.UNIT
                     );
            if (building != null) {
               if (accelerator.hasEnoughCredits()) {
                  new BuildingsCommand(
                     BuildingsCommand.ACCELERATE_CONSTRUCTOR, {
                        'id': building.id,
                        'index': accelerator.selectedAccelerateType}).dispatch();
               }
               else {
                  UrlNavigate.getInstance().showBuyCreds();
               }
            }
         }
         speedPopUp.addElement(accelerator);
         speedPopUp.show();
      }

      [Bindable]
      private var BS: MCUnitsBuild = MCUnitsBuild.getInstance();

      private function getString(prop: String, params: Array = null): String {
         return Localizer.string('Units', prop, params);
      }

      private function cancelUpgrade(): void {
         var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
         popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
         popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
         var lbl: Label = new Label();
         lbl.minWidth = 300;
         lbl.text = Localizer.string('Popups', 'message.cancelUnitTraining');
         popUp.addElement(lbl);
         popUp.title = Localizer.string('Popups', 'title.cancelUnitTraining');
         popUp.confirmButtonClickHandler = function (button: Button = null): void {
            new BuildingsCommand(BuildingsCommand.CANCEL_CONSTRUCTOR,
                    {'id': facilityId}).dispatch();
         };
         popUp.show();
      }
      ]]>
   </fx:Script>
   <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit_ready')}"/>
   <s:Group width="{imageSize}" height="{imageSize}" left="16" top="9">
      <components:CenteredBitmapImage source="{IMG.getImage(AssetNames.getUnitImageName(_unitModel.type))}" 
                                      width="100%" height="100%"
                                      mouseOver="BS.cancelId = facilityId"
                                      mouseOut="BS.cancelId = -1"/> 
      <s:Group visible="{BS.cancelId == facilityId}" top="0" left="0" right="0" bottom="0"
               mouseOver="BS.cancelId = facilityId"
               mouseOut="BS.cancelId = -1">
         <s:Rect top="0" bottom="0" left="0" right="0" alpha="0.9">
            <s:fill>
               <s:SolidColor color="#000000"/>
            </s:fill>
         </s:Rect>
         <s:Button right="3" top="3" skinClass="components.skins.DeleteButtonSkin"
                   click="cancelUpgrade()"
                   mouseOver="BS.cancelId = facilityId"
                   mouseOut="BS.cancelId = -1"/>
         <base:AdvancedContainer top="6" bottom="6" left="6" right="20"
                                 mouseOver="BS.cancelId = facilityId"
                                 mouseOut="BS.cancelId = -1">
            <s:Group width="100%">
               <s:Label text="{getString('label.cancelTraining')}"
                        left="0" right="0"
                        mouseOver="BS.cancelId = facilityId"
                        mouseOut="BS.cancelId = -1"
                        paddingBottom="6"/>
            </s:Group>
            <base:ImageAndLabel type="{ResourceType.METAL}" paddingLeft="6" 
                                visible="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.METAL, builtPart) != null}"
                                textToDisplay="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.METAL, builtPart)}"
                                mouseOver="BS.cancelId = facilityId"
                                mouseOut="BS.cancelId = -1"
                                labelStyleName="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.METAL, builtPart) +
                                ML.latestPlanet.ssObject.metal.currentStock >
                                ML.latestPlanet.ssObject.metal.maxStock
                                ? 'yellow' : null}"
                                toolTip="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.METAL, builtPart) +
                                ML.latestPlanet.ssObject.metal.currentStock >
                                ML.latestPlanet.ssObject.metal.maxStock
                                ? notEnoughStorageTooltip : null}"/>
            <base:ImageAndLabel type="{ResourceType.ENERGY}" paddingLeft="6" 
                                visible="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.ENERGY, builtPart) != null}"
                                textToDisplay="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.ENERGY, builtPart)}"
                                mouseOver="BS.cancelId = facilityId"
                                mouseOut="BS.cancelId = -1"
                                labelStyleName="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.ENERGY, builtPart) +
                                ML.latestPlanet.ssObject.energy.currentStock >
                                ML.latestPlanet.ssObject.energy.maxStock
                                ? 'yellow' : null}"
                                toolTip="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.ENERGY, builtPart) +
                                ML.latestPlanet.ssObject.energy.currentStock >
                                ML.latestPlanet.ssObject.energy.maxStock
                                ? notEnoughStorageTooltip : null}"/>
            <base:ImageAndLabel type="{ResourceType.ZETIUM}" paddingLeft="6"
                                visible="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.ZETIUM, builtPart) != null}"
                                textToDisplay="{Resource.getModelCancelRevenueString(
                                _unitModel, ResourceType.ZETIUM, builtPart)}"
                                mouseOver="BS.cancelId = facilityId"
                                mouseOut="BS.cancelId = -1"
                                labelStyleName="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.ZETIUM, builtPart) +
                                ML.latestPlanet.ssObject.zetium.currentStock >
                                ML.latestPlanet.ssObject.zetium.maxStock
                                ? 'yellow' : null}"
                                toolTip="{Resource.getModelCancelRevenue(
                                _unitModel, ResourceType.ZETIUM, builtPart) +
                                ML.latestPlanet.ssObject.zetium.currentStock >
                                ML.latestPlanet.ssObject.zetium.maxStock
                                ? notEnoughStorageTooltip : null}"/>
            <base:ImageAndLabel type="{ResourceType.POPULATION}" paddingLeft="6"
                                textToDisplay="{Config.getUnitPopulation(
                                _unitModel.type).toString()}"
                                mouseOver="BS.cancelId = facilityId"
                                mouseOut="BS.cancelId = -1"/>
            <base:layout>
               <s:VerticalLayout />
            </base:layout>
         </base:AdvancedContainer>
      </s:Group>
   </s:Group>
   <mx:ProgressBar id="progBar" left="42" top="148" width="89" height="9" 
                   labelPlacement="center" mode="manual"
                   label="{getString('property.timeToFinish.short', 
                   [_unitModel.upgradePart.timeToFinishString])}"/>
   <credits:CoinComp top="144" left="139" click="coincomp1_clickHandler(event)"
                     enabled="{_unitModel.upgradePart.upgradeProgress &lt; 1}"/>
   <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit_ready_lights')}"
                  id="lights"/>
</base:BaseContainer>
