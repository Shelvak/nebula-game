<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    mouseDown="basecontainer1_mouseDownHandler(event)"
                    creationComplete="basecontainer1_creationCompleteHandler(event)">
   
   <fx:Metadata>
      [ResourceBundle ("Units")]
   </fx:Metadata>
   
   <fx:Declarations>
      <s:Fade target="{lights}" alphaFrom="{lightsAlpha}" alphaTo="1" id="fadeIn" duration="{FADE_TIME}"/>  
      <s:Fade target="{lights}" alphaFrom="{lightsAlpha}" alphaTo="0" id="fadeOut" duration="{FADE_TIME}"/> 
   </fx:Declarations>
   
   <base:states>
      <s:State name="active"/>
      <s:State name="inactive"/>
   </base:states>
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.BuildButtonSkin;
         import components.skins.InfoButtonSkin;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GObjectEvent;
         import globalevents.GResourcesEvent;
         
         import models.building.Building;
         import models.building.events.BuildingEvent;
         import models.parts.Upgradable;
         import models.resource.ResourceType;
         import models.solarsystem.SSObject;
         import models.unit.Unit;
         
         import mx.core.UIComponent;
         import mx.events.FlexEvent;
         import mx.events.ToolTipEvent;
         
         import spark.filters.ColorMatrixFilter;
         
         import utils.DateUtil;
         import utils.StringUtil;
         import utils.assets.AssetNames;
         
         private static const FADE_TIME: int = 300;
         
         private static const NOT_VALID_FILTER: Array = [new ColorMatrixFilter([
            0.2,0,0,0,0, //red
            0,0.2,0,0,0, //green
            0,0,0.2,0,0, //blue
            0,0,0,1,0,])];
         
         
         [Bindable]
         private var lightsAlpha: Number = 0;
         
         [Bindable]
         private var selectedMetalCost: Number = 0;
         
         [Bindable]
         private var selectedEnergyCost: Number = 0;
         
         [Bindable]
         private var selectedZetiumCost: Number = 0;
         
         [Bindable]
         private var selectedTimeCost: String = null;
         
         [Bindable]
         private var qSelectedMetalCost: String = null;
         
         [Bindable]
         private var qSelectedEnergyCost: String = null;
         
         [Bindable]
         private var qSelectedZetiumCost: String = null;
         
         [Bindable]
         private var qSelectedTimeCost: String = null;
         
         [Bindable]
         private var _type: String;
         
         [Bindable]
         public var facility: Building;
         
         
         private static const imageSize: int = 132;
         
         public function set type (value :String): void
         {
            _type = StringUtil.firstToUpperCase(value);
            selector.value = 1;
            recalculateCosts();
            refreshUpgradeState();
         }
         
         public function get type (): String
         {
            return _type;
         };
         
         [Bindable]
         private var canBeUpgraded: Boolean = false;
         
         
         [Bindable]
         private var purchasePending: Boolean = false;
         
         public function refreshUpgradeState(e: Event = null): void
         {
            var planet:SSObject = ML.latestPlanet.ssObject;
            canBeUpgraded = !((selectedMetalCost > planet.metal.currentStock) ||
               (selectedEnergyCost > planet.energy.currentStock) ||
               (selectedZetiumCost > planet.zetium.currentStock));
         }
         
         [Bindable]
         public var ammount: int;
         
         protected function info_clickHandler(event:MouseEvent):void
         {
            var temp: Unit = new Unit();
            temp.type = type;
            temp.upgradePart.level = 0;
            ML.infoModel = temp;
            NavigationController.getInstance().showInfo();
         }
         
         private function recalculateCosts(event: Event = null): void
         {
            selectedMetalCost = StringUtil.evalFormula(Config.getUnitMetalCost(_type), 
               {"level": 1});
            qSelectedMetalCost = (selectedMetalCost * selector.value).toString();
            
            selectedEnergyCost = StringUtil.evalFormula(Config.getUnitEnergyCost(_type), 
               {"level": 1});
            qSelectedEnergyCost = (selectedEnergyCost * selector.value).toString();
            
            selectedZetiumCost = StringUtil.evalFormula(Config.getUnitZetiumCost(_type), 
               {"level": 1});
            qSelectedZetiumCost = (selectedZetiumCost * selector.value).toString();
            
            var timeCost: Number = Upgradable.getUpgradeTimeWithConstructionMod(
               StringUtil.evalFormula(
                  Config.getUnitUpgradeTime(_type),
                  {"level": 1}
               ),
               facility.constructorMod
            );
            selectedTimeCost = DateUtil.secondsToHumanString(timeCost);
            qSelectedTimeCost = DateUtil.secondsToHumanString(Math.max(1, timeCost * selector.value));
            refreshUpgradeState();
         }
         
         private function removePurchacePending(e: Event): void
         {
            purchasePending = false;
            EventBroker.unsubscribe(GObjectEvent.OBJECT_APROVED, removePurchacePending);
            facility.removeEventListener(BuildingEvent.QUERY_CHANGE, removePurchacePending);
         }
         
         protected function bButton_clickHandler(event:MouseEvent):void
         {
            purchasePending = true;
            EventBroker.subscribe(GObjectEvent.OBJECT_APROVED, removePurchacePending);
            facility.addEventListener(BuildingEvent.QUERY_CHANGE, removePurchacePending);
            new UnitsCommand(UnitsCommand.NEW,                
               {type: _type,
                  count: selector.value,
                  constructorId: facility.id}
            ).dispatch ();
         }
         
         
         protected function basecontainer1_mouseDownHandler(event:MouseEvent):void
         {
            facility.selectedCount = Unit.unitIsValid(_type)?selector.value:-1;
            recalculateCosts();
         }
         
         private function changeHandler(e: Event = null): void
         {
            if (selector.value > selector.maximum)
            {
               selector.value = selector.maximum;
            }
            facility.selectedCount = selector.value;
            recalculateCosts();
         }
         
         
         
         protected function createCustomToolTip(event:ToolTipEvent):void
         {
            recalculateCosts();
            if (Unit.unitIsValid(_type))
            {
               var ptt:PriceToolTip = new PriceToolTip();
               ptt.qMetalCost = qSelectedMetalCost;
               ptt.qEnergyCost = qSelectedEnergyCost;
               ptt.qZetiumCost = qSelectedZetiumCost;
               ptt.qTimeCost = qSelectedTimeCost;
               ptt.metalCost = selectedMetalCost.toString();
               ptt.energyCost = selectedEnergyCost.toString();
               ptt.zetiumCost = selectedZetiumCost.toString();
               ptt.timeCost = selectedTimeCost;
               event.toolTip = ptt;
            }
            else
            {
               event.toolTip = new NoToolTip();
            }
         }
         
         
         protected function priceGroup_creationCompleteHandler(event:FlexEvent):void
         {
            recalculateCosts();
         }
         
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshUpgradeState);
         }
         
         
         protected function selector_creationCompleteHandler(event:FlexEvent):void
         {
            facility.addEventListener(BuildingEvent.QUERY_CHANGE, changeHandler);
         }
         
      ]]>
   </fx:Script>
   <base:SpinnerContainer busy="{purchasePending}" top="0" left="0" right="0" bottom="0"  timeoutEnabled="false">

      <s:Group rollOver="
               lightsAlpha = lights.alpha; 
               fadeOut.stop(); 
               fadeIn.play()" 
               rollOut="
               fadeOut.play()"
               filters="{Unit.unitIsValid(_type)?[]:NOT_VALID_FILTER}">
         
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit')}"/>
         <s:Group width="{imageSize}" height="{imageSize}" left="16" top="9">
            <mx:Image source="{IMG.getBitmapAsset(AssetNames.getUnitImageName(_type))}" 
                      width="100%" height="100%" maintainAspectRatio="true"
                      verticalAlign="middle" horizontalAlign="center"/>
         </s:Group>
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit_over')}"
                        id="lights" alpha="0"/>
         <s:Button skinClass="components.skins.InfoButtonSkin" left="120" bottom="30"
                   click="info_clickHandler(event)"/>
         
         <s:Label id="bottomLabel" horizontalCenter="0" text="{
                  facility.constructableType == null?
                  ((canBeUpgraded || !Unit.unitIsValid(_type))?RM.getString('Units', _type+'.name'):
                  RM.getString('Units', 'label.notEnoughResources')):
                  (facility.getQueueEmptySpace() == 0?
                  RM.getString('Units', 'label.fullQueue'):
                  _type)}" bottom="5"/>
         
         <s:Group id="priceGroup" top="10" left="158" toolTip=" " creationComplete="priceGroup_creationCompleteHandler(event)" 
                  toolTipCreate="createCustomToolTip(event)">
            <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{qSelectedMetalCost}"/>
            <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{qSelectedEnergyCost}"/>
            <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{qSelectedZetiumCost}"/>
            <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{qSelectedTimeCost}"/>
            <s:Label text="{RM.getString('Units', 'label.count')}" fontSize="10"/>
            <s:layout>
               <s:VerticalLayout gap="6"/>
            </s:layout>
         </s:Group>
      </s:Group>
      <s:Group left="158" top="{priceGroup.height + 13}" rollOver="{lightsAlpha = lights.alpha; 
               fadeOut.stop();
               fadeIn.play()}"
               filters="{Unit.unitIsValid(_type)?[]:NOT_VALID_FILTER}">
         <s:NumericStepper id="selector" value="1" change="changeHandler(event)" minimum="1"
                           enabled="{Unit.unitIsValid(_type)}"
                           top="0" bottom="0" focusEnabled="false" snapInterval="1"
                           maximum="{facility.getQueueEmptySpace()}" width="50" textAlign="right"
                           rollOver="{lightsAlpha = lights.alpha; fadeOut.stop(); lights.alpha = 1}"
                           creationComplete="selector_creationCompleteHandler(event)"/>
         <s:Button id="bButton" skinClass="components.skins.BuildButtonSkin"
                   enabled="{!((facility.getQueueEmptySpace() == 0) || (!Unit.unitIsValid(_type)) ||
                   !(!(facility.constructableType == null) || !(!canBeUpgraded)))}"
                   left="{selector.width}" click="bButton_clickHandler(event)"
                   rollOver="{lightsAlpha = lights.alpha; 
                   fadeOut.stop();
                   fadeIn.play()}"/>
      </s:Group>
      <s:Label verticalCenter="0" horizontalCenter="0" text="{RM.getString('Units','label.technologyNeeded')}" fontSize="12" fontWeight="bold" color="#eec500"
               visible="{!Unit.unitIsValid(_type)}"/>
   </base:SpinnerContainer>
</base:BaseContainer>
