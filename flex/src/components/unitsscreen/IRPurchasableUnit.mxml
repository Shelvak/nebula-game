<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer     xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    mouseDown="basecontainer1_mouseDownHandler(event)"
                    creationComplete="basecontainer1_creationCompleteHandler(event)"
                    addedToStage="addEventListeners(event)"
                    removedFromStage="removeEventListeners(event)" xmlns:components="utils.components.*">
   
   <fx:Declarations>
      <s:Fade target="{lights}" alphaFrom="{lightsAlpha}" alphaTo="1" id="fadeIn" duration="{FADE_TIME}"/>  
      <s:Fade target="{lights}" alphaFrom="{lightsAlpha}" alphaTo="0" id="fadeOut" duration="{FADE_TIME}"/> 
   </fx:Declarations>
   
   <s:states>
      <s:State name="active"/>
      <s:State name="inactive"/>
   </s:states>
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.BuildButtonSkin;
         import components.skins.InfoButtonSkin;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GObjectEvent;
         import globalevents.GPlanetEvent;
         import globalevents.GResourcesEvent;
         import globalevents.GlobalEvent;
         
         import models.ModelLocator;
         import models.building.Building;
         import models.building.events.BuildingEvent;
         import models.parts.Upgradable;
         import models.parts.UpgradableType;
         import models.planet.events.PlanetEvent;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         import models.technology.events.TechnologyEvent;
         import models.unit.Unit;
         import models.unit.events.UnitEvent;
         
         import mx.events.FlexEvent;
         import mx.events.ToolTipEvent;
         
         import spark.filters.ColorMatrixFilter;
         
         import utils.DateUtil;
         import utils.StringUtil;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         private static const FADE_TIME: int = 300;
         
         private static const NOT_VALID_FILTER: Array = [new ColorMatrixFilter([
            0.2,0,0,0,0, //red
            0,0.2,0,0,0, //green
            0,0,0.2,0,0, //blue
            0,0,0,1,0,])];
         
         
         [Bindable]
         private var lightsAlpha: Number = 0;
         
         [Bindable]
         private var selectedMetalCost: Number = 0;
         
         [Bindable]
         private var selectedEnergyCost: Number = 0;
         
         [Bindable]
         private var selectedZetiumCost: Number = 0;
         
         [Bindable]
         private var populationCost: int = 0;
         
         [Bindable]
         private var selectedTimeCost: String = null;
         
         [Bindable]
         private var qSelectedMetalCost: String = null;
         
         [Bindable]
         private var qSelectedEnergyCost: String = null;
         
         [Bindable]
         private var qSelectedZetiumCost: String = null;
         
         [Bindable]
         private var qSelectedTimeCost: String = null;
         
         [Bindable]
         private var type: String;
         
         [Bindable]
         private var facility: Building;
         
         private function addEventListeners(e: Event): void
         {
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshUpgradeState);
            ML.technologies.addEventListener(TechnologyEvent.TECHNOLOGY_CHANGED, dispatchRefreshValidEvent);
            ML.latestPlanet.addEventListener(PlanetEvent.BUILDING_UPGRADED, dispatchRefreshValidEvent);
            EventBroker.subscribe(GPlanetEvent.BUILDINGS_CHANGE, dispatchRefreshValidEvent);
            EventBroker.subscribe(GlobalEvent.APP_RESET, removeEventListeners);
            dispatchRefreshValidEvent();
            var temp: String = type;
            type = null;
            type = temp;
         }
         
         private function removeEventListeners(e: Event): void
         {
            EventBroker.unsubscribe(GResourcesEvent.RESOURCES_CHANGE, refreshUpgradeState);
            if (ML.technologies)
            {
               ML.technologies.removeEventListener(TechnologyEvent.TECHNOLOGY_CHANGED, dispatchRefreshValidEvent);
            }
            if (ML.latestPlanet)
            {
               ML.latestPlanet.removeEventListener(PlanetEvent.BUILDING_UPGRADED, dispatchRefreshValidEvent);
            }
            EventBroker.unsubscribe(GPlanetEvent.BUILDINGS_CHANGE, dispatchRefreshValidEvent);
            EventBroker.unsubscribe(GlobalEvent.APP_RESET, removeEventListeners);
            purchasePending = false;
         }
         
         private static const imageSize: int = 132;
         
         
         public override function set data(value:Object) : void
         {
            if (data != value)
            {
               super.data = value;
               if (data)
               {
                  type = StringUtil.firstToUpperCase(data.type);
                  facility = data.facility;
                  selector.value = 1;
                  recalculateCosts();
                  refreshUpgradeState();
                  dispatchRefreshValidEvent();
                  var temp: String = type;
                  type = null;
                  type = temp;
               }
            }
         }
         
         [Bindable]
         private var canBeUpgraded: Boolean = false;
         [Bindable]
         private var enoughStorages: Boolean = false;
         [Bindable]
         private var enoughRates: Boolean = false;
         [Bindable]
         private var resLeft: String = '';
         
         private static function get ML(): ModelLocator
         {
            return ModelLocator.getInstance();
         }
         
         private static function get IMG(): ImagePreloader
         {
            return ImagePreloader.getInstance();
         }
         
         [Bindable]
         private var purchasePending: Boolean = false;
         
         private function refreshUpgradeState(e: Event = null): void
         {
            if (ML.latestPlanet)
            {
               var planet:MSSObject = ML.latestPlanet.ssObject;
               if (planet)
               {
                  canBeUpgraded = !((selectedMetalCost > planet.metal.currentStock) ||
                     (selectedEnergyCost > planet.energy.currentStock) ||
                     (selectedZetiumCost > planet.zetium.currentStock) ||
                     (populationCost > ML.player.populationMax - ML.player.population));
                  if (!canBeUpgraded)
                  {
                     enoughStorages = !(selectedMetalCost > planet.metal.maxStock ||
                        selectedEnergyCost > planet.energy.maxStock ||
                        selectedZetiumCost > planet.zetium.maxStock);
                     enoughRates = !(selectedMetalCost > planet.metal.currentStock && planet.metal.rate <= 0
                        || selectedEnergyCost > planet.energy.currentStock && planet.energy.rate <= 0
                        || selectedZetiumCost > planet.zetium.currentStock && planet.zetium.rate <= 0
                        || (Config.getUnitPopulation(type) > planet.player.populationMax - planet.player.population));
                     resLeft = DateUtil.secondsToHumanString(Resource.getTimeToReachResources
                        (planet.metal, planet.energy, planet.zetium, 
                           selectedMetalCost, selectedEnergyCost, selectedZetiumCost));
                  }
               }
            }
         }
         
         [Bindable]
         private var ammount: int;
         
         protected function info_clickHandler(event:MouseEvent):void
         {
            var temp: Unit = new Unit();
            temp.type = type;
            temp.upgradePart.level = 0;
            ML.infoModel = temp;
            NavigationController.getInstance().showInfo();
         }
         
         private function recalculateCosts(event: Event = null): void
         {
            function calcCost(resourceType:String) : Number
            {
               return Upgradable.calculateCost(UpgradableType.UNITS, type, resourceType, {"level": 1});
            }
            selectedMetalCost  = calcCost(ResourceType.METAL);
            qSelectedMetalCost = (selectedMetalCost * selector.value).toString();
            
            selectedEnergyCost  = calcCost(ResourceType.ENERGY); 
            qSelectedEnergyCost = (selectedEnergyCost * selector.value).toString();
            
            selectedZetiumCost  = calcCost(ResourceType.ZETIUM);
            qSelectedZetiumCost = (selectedZetiumCost * selector.value).toString();
            
            populationCost = Config.getUnitPopulation(type);
            
            var timeCost:Number = Upgradable.calculateUpgradeTime(UpgradableType.UNITS, type,
               {"level": 1}, facility.constructorMod + facility.leveledConstructionMod);
            selectedTimeCost  = DateUtil.secondsToHumanString(timeCost);
            qSelectedTimeCost = DateUtil.secondsToHumanString(Math.max(1, timeCost * selector.value));
            refreshUpgradeState();
         }
         
         private function removePurchacePending(e: Event): void
         {
            purchasePending = false;
            EventBroker.unsubscribe(GObjectEvent.OBJECT_APPROVED, removePurchacePending);
            facility.removeEventListener(BuildingEvent.QUERY_CHANGE, removePurchacePending);
         }
         
         protected function bButton_clickHandler(event:MouseEvent):void
         {
            purchasePending = true;
            EventBroker.subscribe(GObjectEvent.OBJECT_APPROVED, removePurchacePending);
            facility.addEventListener(BuildingEvent.QUERY_CHANGE, removePurchacePending);
            new UnitsCommand(UnitsCommand.NEW,                
               {type: type,
                  count: selector.value,
                  constructorId: facility.id}
            ).dispatch ();
         }
         
         
         protected function basecontainer1_mouseDownHandler(event:MouseEvent):void
         {
            facility.selectedCount = isValid?selector.value:-1;
            recalculateCosts();
         }
         
         private function changeHandler(e: Event = null): void
         {
            if (selector.value > selector.maximum)
            {
               selector.value = selector.maximum;
            }
            if (facility != null)
            {
               facility.selectedCount = selector.value;
               recalculateCosts();
            }
         }
         
         
         
         protected function createCustomToolTip(event:ToolTipEvent):void
         {
            recalculateCosts();
            if (isValid)
            {
               var ptt:PriceToolTip = new PriceToolTip();
               ptt.qMetalCost = qSelectedMetalCost;
               ptt.qEnergyCost = qSelectedEnergyCost;
               ptt.qZetiumCost = qSelectedZetiumCost;
               ptt.qPopulationCost = int(Config.getUnitPopulation(type) * selector.value).toString();
               ptt.qTimeCost = qSelectedTimeCost;
               ptt.metalCost = selectedMetalCost.toString();
               ptt.energyCost = selectedEnergyCost.toString();
               ptt.zetiumCost = selectedZetiumCost.toString();
               ptt.populationCost = populationCost.toString();
               ptt.timeCost = selectedTimeCost;
               event.toolTip = ptt;
            }
            else
            {
               event.toolTip = new NoToolTip();
            }
         }
         
         
         protected function priceGroup_creationCompleteHandler(event:FlexEvent):void
         {
            recalculateCosts();
         }
         
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            // refresh internal components states after creation as they dont take values from getters
            //lblValidation.addEventListener(FlexEvent.UPDATE_COMPLETE, dispatchRefreshValidEvent);
            dispatchRefreshValidEvent();
         }
         
         private function dispatchRefreshValidEvent(e: Event = null): void
         {
            if (e is FlexEvent)
            {
               lblValidation.removeEventListener(FlexEvent.UPDATE_COMPLETE, dispatchRefreshValidEvent);
            }
            dispatchEvent(new UnitEvent(UnitEvent.VALIDATION_CHANGED));
         }
         
         
         protected function selector_creationCompleteHandler(event:FlexEvent):void
         {
            facility.addEventListener(BuildingEvent.QUERY_CHANGE, changeHandler);
         }
         
         [Bindable (event="validationChanged")]
         private function get isValid(): Boolean
         {
            return Unit.unitIsValid(type);
         }
         
         [Bindable (event="validationChanged")]
         private function get filter(): Array
         {
            return isValid?[]:NOT_VALID_FILTER;
         }
         
      ]]>
   </fx:Script>
   <base:SpinnerContainer busy="{purchasePending}" top="0" left="0" right="0" bottom="0"  timeoutEnabled="false">
      
      <s:Group rollOver="
               lightsAlpha = lights.alpha; 
               fadeOut.stop(); 
               fadeIn.play()" 
               rollOut="
               fadeOut.play()"
               filters="{filter}">
         
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit')}"/>
         <s:Group width="{imageSize}" height="{imageSize}" left="16" top="9">
            <components:CenteredBitmapImage source="{IMG.getImage(AssetNames.getUnitImageName(type))}" 
                                            width="100%" height="100%"/>
         </s:Group>
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'unit_over')}"
                        id="lights" alpha="0"/>
         <s:Button skinClass="components.skins.InfoButtonSkin" left="120" bottom="30"
                   click="info_clickHandler(event)"/>
         
         <s:Label id="bottomLabel" horizontalCenter="0" text="{
                  facility.constructableType == null?
                  ((canBeUpgraded || !isValid)?
                  (type==null?'':Localizer.string('Units', type+'.name')):
                  (enoughRates?(enoughStorages?Localizer.string('Units', 'label.enoughIn', [resLeft])
                  :Localizer.string('Units', 'label.notEnoughStorage'))
                  :Localizer.string('Units', 'label.notEnoughResources'))):
                  (facility.getQueueEmptySpace() &lt; 1?
                  Localizer.string('Units', 'label.fullQueue'):
                  Localizer.string('Units', type+'.name'))}" bottom="5"/>
         
         <s:Group id="priceGroup" top="10" left="158" toolTip=" " creationComplete="priceGroup_creationCompleteHandler(event)" 
                  toolTipCreate="createCustomToolTip(event)">
            <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{qSelectedMetalCost}"
                                labelStyleName="{selectedMetalCost > ML.latestPlanet.ssObject.metal.currentStock? 'unsatisfied':null}"/>
            <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{qSelectedEnergyCost}"
                                labelStyleName="{selectedEnergyCost > ML.latestPlanet.ssObject.energy.currentStock? 'unsatisfied':null}"/>
            <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{qSelectedZetiumCost}"
                                labelStyleName="{selectedZetiumCost > ML.latestPlanet.ssObject.zetium.currentStock? 'unsatisfied':null}"/>
            <base:ImageAndLabel type="{ResourceType.POPULATION}" textToDisplay="{Config.getUnitPopulation(type) * selector.value}"
                                labelStyleName="{populationCost > (ML.player.populationMax - ML.player.population)? 'unsatisfied':null}"/>
            <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{qSelectedTimeCost}"/>
            <s:layout>
               <s:VerticalLayout gap="6"/>
            </s:layout>
         </s:Group>
      </s:Group>
      <s:Group left="158" top="{priceGroup.height + 13}" rollOver="{lightsAlpha = lights.alpha; 
               fadeOut.stop();
               fadeIn.play()}"
               filters="{filter}">
         <s:NumericStepper id="selector" value="1" change="changeHandler(event)" minimum="1"
                           enabled="{isValid}"
                           top="0" bottom="0" focusEnabled="false" snapInterval="1"
                           maximum="{Math.max(1, facility.getQueueEmptySpace())}" width="50" textAlign="right"
                           rollOver="{lightsAlpha = lights.alpha; fadeOut.stop(); lights.alpha = 1}"
                           creationComplete="selector_creationCompleteHandler(event)"/>
         <s:Button id="bButton" skinClass="components.skins.BuildButtonSkin"
                   enabled="{!(
                   (facility.getQueueEmptySpace() &lt; 1) || 
                   (!isValid) ||
                   !(facility.constructableType != null || canBeUpgraded))}"
                   left="{selector.width}" click="bButton_clickHandler(event)"
                   rollOver="{lightsAlpha = lights.alpha; 
                   fadeOut.stop();
                   fadeIn.play()}"/>
      </s:Group>
      <s:Label verticalCenter="0" horizontalCenter="0" text="{Localizer.string('Units','label.technologyNeeded')}" fontSize="12" fontWeight="bold" color="#eec500"
               alpha="{isValid?0:1}" id="lblValidation"/>
   </base:SpinnerContainer>
</s:ItemRenderer>
