<?xml version="1.0"?>
<base:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:base="components.base.*"
            xmlns:s="library://ns.adobe.com/flex/spark"
            title="{getText('title.claimUnits')}"
            visible="{meetsRequirements(US.selection)
            &amp;&amp; US.owner != Owner.PLAYER
            &amp;&amp; ML.latestPlanet != null
            &amp;&amp; ML.latestPlanet.ssObject.ownerIsPlayer}">
  <base:layout>
     <s:VerticalLayout gap="10" horizontalAlign="center"/>
  </base:layout>
  <s:Group width="100%">
    <s:Label text="{getText('label.claimUnits')}" left="0" right="0"/>
  </s:Group>
  <s:Label text="{getText('label.claimPopulationIncrease',
              [getPopulation(US.selection)])}"
           fontWeight="bold"
           styleName="{getPopulation(US.selection) + ML.player.population >
                       ML.player.populationMax? 'unsatisfied': null}"/>
  <s:Button label="{getText('label.buttonClaimUnits')}"
             click="claimConfirm(event)"
             skinClass="components.skins.YellowButtonSkin"/>
  <fx:Script><![CDATA[
    import components.popups.ActionConfirmationPopUp;

    import config.Config;

    import models.Owner;
    import models.unit.MCUnitScreen;
    import models.unit.Unit;
    import models.unit.UnitKind;

    import mx.collections.ArrayCollection;

    import utils.locale.Localizer;

    private function meetsRequirements(selection: ArrayCollection): Boolean
    {
       for each (var unit: Unit in selection)
       {
         if (unit.kind == UnitKind.SPACE || unit.hasGuns)
         {
           return false;
         }
       }
       return true;
    }

    private function getPopulation(selection: ArrayCollection): int
    {
      var tempPopulation: int = 0;
      for each (var unit: Unit in selection)
      {
        tempPopulation += Config.getUnitPopulation(unit.type);
      }
      return tempPopulation;
    }

    private function claimConfirm(e: MouseEvent): void
    {
      var popUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
      popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
      popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
      var lbl: Label = new Label();
      lbl.minWidth = 300;
      lbl.text = Localizer.string('Popups', 'message.claimUnits');
      popUp.addElement(lbl);
      popUp.title = Localizer.string('Popups', 'title.claimUnits');
      popUp.confirmButtonClickHandler = function (button: Button = null): void {
         US.confirmClaim();
      };
      popUp.show();
    }

    [Bindable]
    private var US: MCUnitScreen = MCUnitScreen.getInstance();

    private function getText(prop: String, params: Array = null): String {
       return Localizer.string('Units', prop, params);
    }
    ]]></fx:Script>
</base:Panel>
