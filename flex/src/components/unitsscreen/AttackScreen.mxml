<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx" 
                    xmlns:notifications="components.notifications.*" 
                    xmlns:unitsscreen="components.unitsscreen.*"
                    creationComplete="attackScreen_creationCompleteHandler(event)">

   <fx:Metadata>
      [ResourceBundle('buildingSelectedSidebar')]
      [ResourceBundle ("Units")]
   </fx:Metadata>
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.buildingselectedsidebar.BuildingSelectedSidebar;
         
         import controllers.ui.NavigationController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.building.Building;
         import models.planet.events.PlanetEvent;
         import models.unit.Unit;
         import models.unit.UnitKind;
         import models.unit.UnitsFlank;
         
         import mx.collections.ArrayCollection;
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.CollectionEvent;
         import mx.events.FlexEvent;
         
         private var _units: ArrayCollection;
         
         [Bindable]
         private var flanks: ArrayCollection;
         
         public function set units(value: ArrayCollection): void
         {
            _units = getActive(value);
            value.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
            buildFlankComps();
         } 
         
         private function refreshList(e: CollectionEvent): void
         {
            var _tempUnits: ArrayCollection = getActive(e.currentTarget as ArrayCollection);
            for each (var oldUnit: Unit in _units)
            {
               if (_tempUnits.getItemIndex(oldUnit) == -1)
                  new GUnitsScreenEvent(GUnitsScreenEvent.DESTROY_UNIT, oldUnit);
            }
            for each (var newUnit: Unit in _tempUnits)
            {
               if (_units.getItemIndex(newUnit) == -1)
                  addUnit(newUnit);
            }
            _units = _tempUnits;
         }
         
         private function addUnit(unitToAdd: Unit): void
         {
            if (unitToAdd.kind == unitKind)
            {
            switch (unitToAdd.flank)
            {
               case 0:
                  addUnitToFlank(unitToAdd, 1)
                  break;
               case 1:
                  addUnitToFlank(unitToAdd, 2);
                  break;
            }
            }
         }
         
         private function addUnitToFlank(unit: Unit, flankNr: int): void
         {
               for each (var flank: UnitsFlank in flanks)
               {
                  if (flank.nr == flankNr)
                  {
                     flank.flank.addItem(unit);
                     return;
                  }
               }
         }
         
         public var unitKind: String;
         
         private function buildFlankComps(): void
         {
            flanks = new ArrayCollection();
            var flank0: ArrayCollection = new ArrayCollection();
            var flank1: ArrayCollection = new ArrayCollection();
            for each (var unit: Unit in _units)
            {
               if (unit.kind == unitKind)
               {
                  switch (unit.flank)
                  {
                     case 0:
                        flank0.addItem(unit);
                        break;
                     case 1:
                        flank1.addItem(unit);
                        break;
                  }
               }
            }
            flanks.addItem(new UnitsFlank(flank0, 1));
            flanks.addItem(new UnitsFlank(flank1, 2));
         }
         
         
         private function getActive(unitsCont: ArrayCollection): ArrayCollection
         {
            var activeUnits: ArrayCollection = new ArrayCollection();
            for each (var unit: Unit in unitsCont)
            if (unit.level > 0)
               activeUnits.addItem(unit);
            activeUnits.sort = new Sort();
            activeUnits.sort.fields = [new SortField('hp', false, true, true)];
            activeUnits.refresh();
            return activeUnits;
         }
         
         private var target: Building;
         
         private function setTarget(e: GUnitsScreenEvent): void
         {
            target = e.building;
         }

         protected function attackScreen_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.SELECT_NPC, setTarget);
            var selectTargetEvent: Function = function(e: FlexEvent): void
            {
               NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
            }
            units = ML.latestPlanet.units;
            unitsList.addEventListener(FlexEvent.UPDATE_COMPLETE, selectTargetEvent);
         }
         
         [Bindable]
         private var attackPending: Boolean = false;
         
         private function removePending(e: Event): void
         {
            attackPending = false  
         }

         protected function confirmAttack():void
         {
            attackPending = true;
            EventBroker.subscribe(GUnitEvent.ATTACK_APPROVED, removePending);
            new UnitsCommand(
               UnitsCommand.ATTACK,
               {planetId: ML.latestPlanet.id,
                  targetId: target.id,
                  unitIds: []}
            ).dispatch ();
         }

      ]]>
   </fx:Script>
   
   <s:List id="unitsList" dataProvider="{flanks}" width="100%" height="100%"
           useVirtualLayout="false" contentBackgroundColor="#0f0f0f" contentBackgroundAlpha="0"
           rollOverColor="#0f0f0f" selectionColor="#0f0f0f"
           borderVisible="false"> 
      <s:itemRenderer>
         <fx:Component>
            <s:ItemRenderer height="100%" width="100%">
               <unitsscreen:FlankComp flankModel="{data}" height="100%" width="100%"/>
            </s:ItemRenderer>
         </fx:Component>
      </s:itemRenderer>
      <s:layout>
         <s:VerticalLayout rowHeight="120"/>
      </s:layout>
   </s:List>
   
   <s:Button right="6" label="{RM.getString('buildingSelectedSidebar', 'attack')}"
             click="confirmAttack()" enabled="{!attackPending}"/>
   
   <base:layout>
      <s:VerticalLayout/>
   </base:layout>
   
</base:BaseContainer>
