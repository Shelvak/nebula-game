<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/halo"
                    xmlns:base="components.base.*"
                    xmlns:screens="components.screens.*"
                    width="100%" height="100%"
                    xmlns:unitsscreen="components.unitsscreen.*">
   
   <fx:Script>
      <![CDATA[
      import components.skins.RedButtonSkin;
      import components.skins.YellowButtonSkin;

      import models.healing.MCHealingScreen;

      import models.unit.MCUnitScreen;

      import utils.ApplicationLocker;

      import controllers.ui.NavigationController;

      import models.unit.MCLoadUnloadScreen;
      import models.unit.Unit;

      import utils.assets.AssetNames;
      import utils.locale.Localizer;

      protected function button1_clickHandler(event: MouseEvent): void {
         NavigationController.getInstance().disableActiveButton();
         MCUnitScreen.getInstance().deselectUnits();
         MCHealingScreen.getInstance().selectNone();
         NavigationController.getInstance().showPreviousScreen();
      }

      [Bindable]
      private var LS: MCLoadUnloadScreen = MCLoadUnloadScreen.getInstance();

      private function selectAll(): void {
         if (LS.resourcesSelected) {
            LS.selectAllResources();
         }
         else {
            LS.selectAllUnits();
         }
      }

      private function selectNone(): void {
         if (LS.resourcesSelected) {
            LS.deselectAllResources();
         }
         else {
            LS.deselectAllUnits();
         }
      }

      private function load_clickHandler(e: Event): void {
         LS.confirmTransfer();
      }
      ]]>
   </fx:Script>
   <base:Scroller top="0" left="0" right="-4" bottom="12"
                  stepMultiplier="3" id="scroller">
      <s:Group left="0" right="0">
         <base:AdvancedContainer left="0" right="0">
            <base:Panel width="100%" title="{Localizer.string ('Units', 'label.select')}">
               <base:layout>
                  <s:HorizontalLayout gap="10" horizontalAlign="center"/>
               </base:layout>
               <s:Button label="{Localizer.string ('Units', 'label.all')}" click="selectAll()"/>
               <s:Button label="{Localizer.string ('Units', 'label.none')}" click="selectNone()"/>
            </base:Panel>
            
            <unitsscreen:NoSelectionPanel visible="{LS.volume == 0}"/>
            
            <base:Panel width="100%" title="{Localizer.string ('Units', 'label.transfer')}">
               <base:AdvancedContainer width="100%">
                  <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.selectedVolume', 
                           [LS.volume])}"/>
                  <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.freeStorage', 
                           [ML.technologies.getUnitStorage(LS.transporter.type, LS.transporter.level) 
                           - LS.transporter.stored + (LS.target is Unit ? -LS.volume : LS.volume )])}"/>
                  <s:Group width="100%" visible="{!(!(LS.volume + LS.transporter.stored > 
                           ML.technologies.getUnitStorage(LS.transporter.type, LS.transporter.level)) 
                           || LS.location is Unit)}">
                     <s:Label styleName="unsatisfied" horizontalCenter="0" 
                              text="{Localizer.string ('Units', 'label.noStorage')}" fontSize="16"/>
                  </s:Group>
                  <s:Group width="100%">
                     <s:Button label="{LS.target is Unit 
                               ? Localizer.string ('Units', 'label.load')
                               : Localizer.string ('Units', 'label.unload')}" 
                               enabled="{(LS.volume > 0) &amp;&amp;
                               (
                               (LS.target is Unit &amp;&amp; 
                               ((LS.transporter.stored + LS.volume) &lt;= 
                               ML.technologies.getUnitStorage(LS.transporter.type, LS.transporter.level))
                               )
                               || 
                               (!(LS.target is Unit))
                               )
                               }" 
                               click="load_clickHandler(event)"
                               horizontalCenter="0"
                               skinClass="components.skins.YellowButtonSkin"/>
                  </s:Group>
                  <base:layout>
                     <s:VerticalLayout paddingLeft="6"/>
                  </base:layout>
               </base:AdvancedContainer>
            </base:Panel>

            <s:Group height="{closeGroup.height}"/>
            
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            
         </base:AdvancedContainer>
      </s:Group>
   </base:Scroller>
  <s:Group width="100%" id="closeGroup" bottom="0">
    <screens:ScreenCloseButton right="0" bottom="0" top="0"
                               click="button1_clickHandler(event)"
                               scroller="{scroller}"
                               label="{Localizer.string ('Units', 'label.close')}"/>
  </s:Group>


   
</base:BaseContainer>