<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/halo"
                    xmlns:base="components.base.*"
                    creationComplete="basecontainer1_creationCompleteHandler(event)">
   
   <fx:Script>
      <![CDATA[
         import components.skins.GreenButtonSkin;
         import components.skins.RedButtonSkin;
         import components.skins.YellowButtonSkin;
         
         import utils.Localizer;
         import utils.assets.AssetNames;
         protected function button1_clickHandler(event:MouseEvent):void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.CLOSE_LOAD_REQUESTED);
         }
      ]]>
   </fx:Script>
   
   
   
   <fx:Script>
      <![CDATA[
         import models.building.Building;
         import components.unitsscreen.events.UnitsScreenEvent;
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.StanceButtonSkin;
         
         import controllers.GlobalFlags;
         import controllers.units.UnitsCommand;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.unit.Unit;
         import models.unit.UnitKind;
         
         import mx.collections.ArrayCollection;
         import mx.events.FlexEvent;
         
         
         protected function stance_clickHandler(stance: int):void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.SET_STANCE, stance);
         }
         
         [Bindable]
         private var showPending: Boolean = false;
         
         private function removePending(e: Event): void
         {
            GlobalFlags.getInstance().lockApplication = false;
         }
         
         protected function order_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            new GUnitsScreenEvent(GUnitsScreenEvent.ORDER_CONFIRMED);
         }
         
         protected function formationConfirm_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            EventBroker.subscribe(GUnitEvent.FLANK_APPROVED, removePending);
            new GUnitsScreenEvent(GUnitsScreenEvent.FORMATION_CONFIRMED);
         }
         
         protected function formationCancel_clickHandler(event:MouseEvent):void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.FORMATION_CANCELED);
         }
         
         [Bindable]
         private var selection: Array;
         [Bindable]
         private var hasChanges: Boolean;
         [Bindable]
         private var currentKind: String;
         [Bindable]
         private var location: *;
         [Bindable]
         private var target: *;
         
         private function invalidatePanelState(e: GUnitsScreenEvent): void
         {
            selection = e.units;
            hasChanges = e.hasChanges;
            currentKind = e.currentKind;
            location = e.location;
            target = e.destination;
            calculateValues();
            loaded = true;
         }
         
         [Bindable]
         private var selectedVolume: int;
         
         [Bindable]
         private var storage: int;
         
         [Bindable]
         private var stored: int;
         
         [Bindable]
         private var loading: Boolean = false;
         
         [Bindable]
         private var attacking: Boolean = false;
         
         [Bindable]
         private var mission: Boolean = false;
         
         [Bindable]
         private var transferPossible: Boolean = false;
         
         private function calculateValues(): void
         {
            loading = (target is Unit) || (location is Unit);
            if (loading)
            {
               calculateLoadingValues();
            }
            attacking = target is Building;
            mission = (target is Building) || (currentKind == UnitKind.SPACE);
            transferPossible = ((target is Unit) && ((stored + selectedVolume) <= storage))
               || (location is Unit);
         }
         
         private function calculateLoadingValues(): void
         {
            var unit: Unit = location is Unit?Unit(location):Unit(target);
            selectedVolume = Math.abs(unit.selectedVolume);
            storage = unit.storage;
            stored = unit.stored;
         }
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.REFRESH_SIDEBAR, invalidatePanelState);
         }
         
         private function selectAll(): void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.SELECT_ALL);
         }
         
         private function selectNone(): void
         {
            new GUnitsScreenEvent(GUnitsScreenEvent.DESELECT_UNITS);
         }
         
         private function load_clickHandler(e: Event): void
         {
            GlobalFlags.getInstance().lockApplication = true;
            EventBroker.subscribe(GUnitEvent.LOAD_APPROVED, removePending);
            new GUnitsScreenEvent(GUnitsScreenEvent.TRANSFER_CONFIRMED);
         }
         
         [Bindable]
         private var loaded: Boolean = false;
      ]]>
   </fx:Script>
   <s:Label top="20" text="{Localizer.string('Units','label.pleaseWait')}" fontWeight="bold"
            color="#eec500" fontSize="14" horizontalCenter="0" visible="{!loaded}"/>
   <base:AdvancedContainer top="0" left="0" right="0" bottom="0" visible="{loaded}">
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.select')}">
         <s:Button label="{Localizer.string ('Units', 'label.all')}" click="selectAll()" left="50"/>
         <s:Button label="{Localizer.string ('Units', 'label.none')}" click="selectNone()" right="50"/>
      </base:Panel>
      
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.setStance')}"
                  visible="{selection.length > 0}">
         <s:Button label="{Unit.STANCE_DEFENSIVE}" skinClass="components.skins.StanceButtonSkin"
                   click="stance_clickHandler(Unit.STANCE_DEFENSIVE)"
                   toolTip="{Localizer.string('Units', 'stance.defensive')}"/>
         <s:Button label="{Unit.STANCE_NEUTRAL}" skinClass="components.skins.StanceButtonSkin"
                   click="stance_clickHandler(Unit.STANCE_NEUTRAL)"
                   toolTip="{Localizer.string('Units', 'stance.neutral')}"/>
         <s:Button label="{Unit.STANCE_AGGRESSIVE}" skinClass="components.skins.StanceButtonSkin"
                   click="stance_clickHandler(Unit.STANCE_AGGRESSIVE)"
                   toolTip="{Localizer.string('Units', 'stance.aggressive')}"/>
         <base:layout>
            <s:HorizontalLayout gap="5" paddingLeft="10"/>
         </base:layout>
      </base:Panel>
      
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.noSelection')}"
                  visible="{selection.length == 0}">
         <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'arrow_select_units')}"/>
         <s:Group width="100%">
            <s:Label text="{Localizer.string('Units', 'label.selectUnits')}" fontSize="20" fontWeight="bold" 
                     color="#ffd200" horizontalCenter="0"/>
         </s:Group>
         <base:layout>
            <s:HorizontalLayout verticalAlign="middle"/>
         </base:layout>
      </base:Panel>
      
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.mission')}" 
                  visible="{!(selection.length == 0 || !mission || hasChanges)}">
         <base:AdvancedContainer width="100%">
            <s:Button label="{Localizer.string ('Units', 'label.attack')}" horizontalCenter="0"
                      visible="{target is Building}"
                      enabled="{selection.length > 0}" click="order_clickHandler(event)"
                      skinClass="components.skins.RedButtonSkin"/>
            <s:Button label="{Localizer.string ('Units', 'label.issueOrder')}" horizontalCenter="0"
                      visible="{currentKind == UnitKind.SPACE}"
                      enabled="{selection.length > 0}" click="order_clickHandler(event)"
                      skinClass="components.skins.GreenButtonSkin"/>
            <base:layout>
               <s:VerticalLayout horizontalAlign="center"/>
            </base:layout>
         </base:AdvancedContainer>
      </base:Panel>
      
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.changesDetected')}" 
                  visible="{hasChanges}">
         <s:Group right="6" >
            <s:Button click="formationCancel_clickHandler(event)"
                      label="{Localizer.string ('Units', 'label.cancel')}"/>
            <s:Button click="formationConfirm_clickHandler(event)"
                      label="{Localizer.string ('Units', 'label.confirm')}"/>
            <s:layout>
               <s:HorizontalLayout/>
            </s:layout>
         </s:Group>
      </base:Panel>
      
      <base:Panel width="100%" title="{Localizer.string ('Units', 'label.transfer')}" 
                  visible="{!(selection.length == 0 || !loading || hasChanges 
                  || location == null || target == null)}">
         <base:AdvancedContainer width="100%">
            <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.selectedVolume', 
                     [selectedVolume])}"/>
            <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.freeStorage', 
                     [storage - stored])}"/>
            <s:Group width="100%" visible="{!(!(selectedVolume + stored > storage) || location is Unit)}">
               <s:Label styleName="unsatisfied" horizontalCenter="0" 
                        text="{Localizer.string ('Units', 'label.noStorage')}" fontSize="16"/>
            </s:Group>
            <s:Group width="100%">
               <s:Button label="{target is Unit 
                         ? Localizer.string ('Units', 'label.load')
                         : Localizer.string ('Units', 'label.unload')}" 
                         enabled="{transferPossible}" 
                         click="load_clickHandler(event)"
                         horizontalCenter="0"
                         skinClass="components.skins.YellowButtonSkin"/>
            </s:Group>
            <base:layout>
               <s:VerticalLayout paddingLeft="6"/>
            </base:layout>
         </base:AdvancedContainer>
      </base:Panel>
      
      <s:Group width="100%" visible="{loading}">
         <s:Button label="{Localizer.string ('Units', 'label.close')}"
                   click="button1_clickHandler(event)" horizontalCenter="0"
                   skinClass="components.skins.RedButtonSkin"/>
      </s:Group>
      
      <base:layout>
         <s:VerticalLayout/>
      </base:layout>
      
   </base:AdvancedContainer>
   
</base:BaseContainer>
