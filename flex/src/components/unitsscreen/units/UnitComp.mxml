<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:base="components.base.*"
                xmlns:mx="library://ns.adobe.com/flex/mx" 
                xmlns:unitsscreen="components.unitsscreen.*"
                autoDrawBackground="false"
                rollOver="basecontainer1_rollOverHandler(event)"
                rollOut="basecontainer1_rollOutHandler(event)"
                mouseDown="itemrenderer1_mouseDownHandler(event)"
                xmlns:components="utils.components.*">
   
   <fx:Declarations>
      <s:Resize id="expandLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="50"
                effectStart="expandLabel_effectStartHandler(event)"/>
      <s:Resize id="colapseLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="0"
                effectEnd="colapseLabel_effectEndHandler(event)"/>
   </fx:Declarations>
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.skins.DeployButtonSkin;

      import controllers.ui.NavigationController;
      import controllers.units.UnitsCommand;

      import globalevents.GSelectConstructableEvent;
      import globalevents.GUnitEvent;

      import models.ModelLocator;
      import models.Owner;
      import models.building.Building;
      import models.factories.BuildingFactory;
      import models.location.LocationType;
      import models.planet.MPlanet;
      import models.unit.MCUnit;
      import models.unit.Unit;
      import models.unit.UnitKind;

      import mx.events.EffectEvent;

      import utils.assets.AssetNames;
      import utils.assets.ImagePreloader;
      import utils.datastructures.Collections;
      import utils.locale.Localizer;


      private static const IMG: ImagePreloader = ImagePreloader.getInstance();

      [Bindable]
      private var ML: ModelLocator = ModelLocator.getInstance();

      [Bindable]
      public var model: MCUnit;


      public override function set data(value: Object): void {
         if (data != value) {
            super.data = value;
            if (data) {
               model = MCUnit(data);
            }
         }
      }

      protected function basecontainer1_rollOverHandler(event: MouseEvent): void {
         colapseLabel.stop();
         expandLabel.play();
      }


      protected function basecontainer1_rollOutHandler(event: MouseEvent): void {
         expandLabel.stop();
         colapseLabel.play();
      }


      protected function info_clickHandler(event: MouseEvent): void {
         NavigationController.getInstance().showInfo(model.unit);
      }

      protected function deploy_clickHandler(event: MouseEvent): void {
         NavigationController.getInstance().toPlanet
            (ModelLocator.getInstance().latestPlanet.ssObject);
         var building: Building = BuildingFactory.createDefault
                                     (model.unit.deploysTo);
         building.cleanup();
         building.unitDeployed = model.unit;
         new GSelectConstructableEvent(building);
      }

      private var unitsLoading: Boolean;

      /* ensure to open the same unit as requested */
      private var unitToOpen: Unit;

      private function show_inside(load: Boolean): void {
         unitsLoading = load;
         unitToOpen = model.unit;
         if (model.unit.stored > 0) {
            EventBroker.subscribe(GUnitEvent.UNITS_SHOWN, openUnit);
            new UnitsCommand(UnitsCommand.SHOW, unitToOpen).dispatch();
         }
         else {
            openUnit();
         }
      }

      private function openUnit(e: GUnitEvent = null): void {
         var planet: MPlanet = ModelLocator.getInstance().latestPlanet;
         if (e != null) {
            EventBroker.unsubscribe(GUnitEvent.UNITS_SHOWN, openUnit);
         }
         NavigationController.getInstance().enableActiveButton();
         if (unitsLoading) {
            NavigationController.getInstance().showLoadUnload(
               planet.toLocation(),
               unitToOpen,
               Collections.filter(
                  planet
                     .units,
                  function (_unit: Unit): Boolean {
                     return (_unit.level > 0)
                               && (_unit.volume > 0)
                               && (_unit.owner == Owner.PLAYER)
                               && _unit.location.type == LocationType.SS_OBJECT;
                  }
               )
            );
         }
         else {
            NavigationController.getInstance().showLoadUnload(
               unitToOpen,
               planet.toLocation(),
               Collections.filter(
                  ModelLocator.getInstance().units,
                  function (_unit: Unit): Boolean {
                     return (_unit.level > 0)
                               && (_unit.location.type == LocationType.UNIT)
                               && (model != null) && (model.unit != null)
                               && (_unit.location.id == model.unit.id);
                  }
               )
            );
         }
         unitToOpen = null;
      }

      [Bindable]
      private var expanded: Boolean = false;


      protected function expandLabel_effectStartHandler(event: EffectEvent): void {
         expanded = true;
      }


      protected function colapseLabel_effectEndHandler(event: EffectEvent): void {
         expanded = false;
      }

      protected function itemrenderer1_mouseDownHandler(event: MouseEvent): void {
         model.selected = !model.selected;
         model.flankModel.invertSelection(model, event.shiftKey);
      }
      ]]>
   </fx:Script>
   <s:Group id="contGroup" width="100" height="76">
      <s:Rect left="0" right="0" top="0" bottom="0">
         <s:fill>
            <s:SolidColor color="{model.selected?0x2f2f2f:0x0f0f0f}"/>
         </s:fill>
      </s:Rect>
      <base:AdvancedContainer left="0" width="24" bottom="0" top="0">
         <base:layout>
            <s:VerticalLayout/>
         </base:layout>
         
         <!-- actionGroup -->
         <s:Button id="deploy" click="deploy_clickHandler(event)" 
                   visible="{!(!(model.unit.deploysTo != null)
                   || (model.unit.owner != Owner.PLAYER)
                   || (!ML.latestPlanet)
                   || !(ML.latestPlanet.ssObject.owner == Owner.PLAYER
                    || ML.latestPlanet.ssObject.owner == Owner.ALLY))}"
                   skinClass="components.skins.DeployButtonSkin" 
                   toolTip="{Localizer.string('Units', 'label.deploy')}"/>
         
         <base:AdvancedContainer id="loadGroup" visible="{model.unit != null}" width="100%">
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            <s:Button id="load" click="show_inside(true)" visible="{!(
                      (ML.technologies.getUnitStorage(model.unit.type, model.unit.level) == 0)
                      || (!model.unit.location.isSSObject)
                      || (!ML.latestPlanet)
                      || (model.unit.owner != Owner.PLAYER)
                      || (!ML.latestPlanet.hasActiveGroundUnits(Owner.PLAYER)
                      &amp;&amp; (ML.latestPlanet.ssObject.owner == 
                      Owner.ALLY))
                      || (ML.latestPlanet.ssObject.owner == Owner.ENEMY))}"
                      toolTip="{Localizer.string('Units', 'label.load')}"
                      skinClass="components.skins.LoadButtonSkin"/>
            <s:Button id="unload" click="show_inside(false)" 
                      visible="{!(model.unit.stored == 0 
                      || !model.unit.location.isSSObject
                      || (model.unit.owner != Owner.PLAYER)
                      || (!ML.latestPlanet)
                      || (!((ML.latestPlanet.ssObject.owner == Owner.PLAYER)
                      || (ML.latestPlanet.ssObject.owner == Owner.ALLY))))}"
                      toolTip="{Localizer.string('Units', 'label.unload')}"
                      skinClass="components.skins.UnloadButtonSkin"/>
         </base:AdvancedContainer>
      </base:AdvancedContainer>
      <s:Group left="24" right="24" top="0" bottom="0">
         <base:SetableProgressBar id="sBar" maxStock="{model.unit.hpMax}" curentStock="{model.unit.hp}"
                                  specialHeight="6" width="50" text="" top="0" useColorCoding="true"/>
         <components:CenteredBitmapImage source="{IMG.getImage(AssetNames.getUnitImageName(model.unit.type))}" 
                                         width="50" height="50" horizontalCenter="0" top="9"/>
         
         <unitsscreen:XpBar xpCurrent="{model.unit.xp}" xpNeeded="{Unit.getXpMax(model.unit.type, model.unit.level + 1)}" 
                            left="0" right="0" top="61" visible="{model.unit.level &lt; model.unit.maxLevel}"/>
         <unitsscreen:StarsContainer starCount="{model.unit.upgradePart.level-1}" horizontalCenter="0" top="62"/>
         <s:Label id="hpLabel" top="9" width="50" height="0" textAlign="center" horizontalCenter="0" 
                  text="{model.unit.hp+'\n'+'/'+'\n'+model.unit.hpMax}" verticalAlign="middle"
                  backgroundColor="#0f0f0f" backgroundAlpha="0.7"/>
         
      </s:Group>
      <base:BackgroundedLabel visible="{model.unit &amp;&amp; model.loadUnload 
                              &amp;&amp; !expanded}" 
                              bottom="17" right="24" text="{model.unit.volume}"
                              defaultFontSize="12"/>
      <base:BackgroundedLabel visible="{model.unit &amp;&amp; model.unit.stored
                              &amp;&amp; !expanded &amp;&amp; !model.loadUnload}"
                              bottom="17" right="24"
                              text="{Localizer.string('Units', 'stored.short',
                              [Unit.getStoredResourcesPercent(
                              ML.technologies.getUnitStorage(model.unit.type, model.unit.level), model.unit.metal,
                              model.unit.energy, model.unit.zetium), Unit.getStoredUnitsPercent(
                              ML.technologies.getUnitStorage(model.unit.type, model.unit.level),
                              model.unit.stored, model.unit.metal, model.unit.energy, model.unit.zetium)])}"
                              defaultFontSize="10"/>
      <s:Group right="0" width="24" bottom="0" top="0">
         <s:BitmapImage source="{IMG.getImage(AssetNames.getIconImageName(
                        Unit.STANCE_WORD + model.unit.stance))}" 
                        top="2" horizontalCenter="0"/>
         <s:BitmapImage source="{IMG.getImage(AssetNames.getIconImageName('hide'))}"
                        top="26" horizontalCenter="0"
                        visible="{model.hidden}"/>
         <s:Button skinClass="components.skins.InfoButtonSkin" horizontalCenter="0" bottom="5"
                   click="info_clickHandler(event)"/>
      </s:Group>
   </s:Group>
</s:ItemRenderer>