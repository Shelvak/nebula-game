<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:base="components.base.*"
                xmlns:mx="library://ns.adobe.com/flex/mx" 
                xmlns:unitsscreen="components.unitsscreen.*"
                autoDrawBackground="false"
                rollOver="basecontainer1_rollOverHandler(event)"
                rollOut="basecontainer1_rollOutHandler(event)">
   <fx:Declarations>
      <s:Resize id="expandLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="50"/>
      <s:Resize id="colapseLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="0"/>
   </fx:Declarations>
   <fx:Script>
      <![CDATA[
         import components.skins.DeployButtonSkin;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GSelectConstructableEvent;
         
         import models.ModelLocator;
         import models.building.Building;
         import models.factories.BuildingFactory;
         import models.unit.Unit;
         
         import utils.StringUtil;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         
         private static const IMG:ImagePreloader = ImagePreloader.getInstance();
         
         [Bindable]
         public var stance: int;
         
         [Bindable]
         private var _type: String;
         
         public function set type(value: String): void
         {
            if (value.indexOf('::') != -1)
            {
               _type = StringUtil.firstToUpperCase(value.split('::')[1]);
            }
            else
            {
               _type = value;
            }
         }
         
         [Bindable]
         public var hp: int;
         
         [Bindable]
         public var level: int;
         
         
         public override function set data(value:Object) : void
         {
            if (data != value)
            {
               super.data = value;
               if (data)
               {
                  type = data.type;
                  hp = data.hp;
                  level = data.level;
                  stance = data.stance;
               }
            }
         }
         
         
         
         [Bindable]
         public var deployable: Boolean = false;
         
         protected function basecontainer1_rollOverHandler(event:MouseEvent):void
         {
            colapseLabel.stop();
            expandLabel.play();
         }
         
         
         protected function basecontainer1_rollOutHandler(event:MouseEvent):void
         {
            expandLabel.stop();
            colapseLabel.play();
         }
         
         
         protected function info_clickHandler(event:MouseEvent):void
         {
            var temp: Unit = new Unit();
            temp.type = _type;
            temp.upgradePart.level = level;
            ModelLocator.getInstance().infoModel = temp;
            NavigationController.getInstance().showInfo();
         }
         
         /*
         * for deployment
         */
         public var unitModel: Unit;

         protected function deploy_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().toPlanet(ModelLocator.getInstance().latestPlanet);
            var building: Building = BuildingFactory.createDefault(unitModel.deploysTo);
            building.unitDeployed = unitModel;
            new GSelectConstructableEvent(building);
         }

      ]]>
   </fx:Script>
   <s:Group id="contGroup" width="100" height="76">
      <s:Rect left="0" right="0" top="0" bottom="0" alpha="0">
         <s:fill>
            <s:SolidColor color="0x0f0f0f"/>
         </s:fill>
      </s:Rect>
      <base:AdvancedContainer left="0" width="24" bottom="0" top="0">
         <!-- actionGroup -->
         <s:Button id="deploy" click="deploy_clickHandler(event)" visible="{deployable}"
                   skinClass="components.skins.DeployButtonSkin"/>
         <base:layout>
            <s:VerticalLayout/>
         </base:layout>
      </base:AdvancedContainer>
      <s:Group left="24" right="24" top="0" bottom="0">
         <base:SetableProgressBar id="sBar" maxStock="{int(Config.getUnitHp(_type))}" curentStock="{hp}"
                                  specialHeight="6" width="50" text="" top="0" useColorCoding="true"/>
         <mx:Image source="{IMG.getBitmapAsset(AssetNames.getUnitImageName(_type))}" 
                   width="50" height="50" top="9" horizontalCenter="0" maintainAspectRatio="true"
                   horizontalAlign="center"/>
         
         <unitsscreen:StarsContainer starCount="{level-1}" horizontalCenter="0" top="62"/>
         <s:Label id="hpLabel" top="9" width="50" height="0" textAlign="center" horizontalCenter="0" 
                  text="{hp+'\n'+'/'+'\n'+Config.getUnitHp(_type)}" verticalAlign="middle"
                  backgroundColor="#0f0f0f" backgroundAlpha="0.7"/>
         
      </s:Group>
      <s:Group right="0" width="24" bottom="0" top="0">
         <s:BitmapImage source="{IMG.getImage(AssetNames.getIconImageName(Unit.STANCE_WORD + stance))}" 
                        top="10" horizontalCenter="0"/>
         <s:Button skinClass="components.skins.InfoButtonSkin" horizontalCenter="0" bottom="10"
                   click="info_clickHandler(event)"/>
      </s:Group>
   </s:Group>
</s:ItemRenderer>

