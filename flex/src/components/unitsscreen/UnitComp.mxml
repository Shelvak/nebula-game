<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:base="components.base.*"
                xmlns:mx="library://ns.adobe.com/flex/mx" 
                xmlns:unitsscreen="components.unitsscreen.*"
                autoDrawBackground="false"
                rollOver="basecontainer1_rollOverHandler(event)"
                rollOut="basecontainer1_rollOutHandler(event)">
   
   <fx:Declarations>
      <s:Resize id="expandLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="50"
                effectStart="expandLabel_effectStartHandler(event)"/>
      <s:Move id="showVolumeLabel" target="{volumeLabel}" duration="100" yTo="59" 
              effectStart="showVolumeLabel_effectStartHandler(event)"
              effectEnd="showVolumeLabel_effectEndHandler(event)"/>
      <s:Move id="hideVolumeLabel" target="{volumeLabel}" duration="100" yTo="45" 
              effectEnd="hideVolumeLabel_effectEndHandler(event)"
              effectStart="hideVolumeLabel_effectStartHandler(event)"/>
      <s:Resize id="colapseLabel" target="{hpLabel}" duration="100" heightFrom="{hpLabel.height}" heightTo="0"
                effectEnd="colapseLabel_effectEndHandler(event)"/>
   </fx:Declarations>
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.DeployButtonSkin;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GLoadUnloadScreenEvent;
         import globalevents.GSelectConstructableEvent;
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.ModelLocator;
         import models.Owner;
         import models.building.Building;
         import models.factories.BuildingFactory;
         import models.location.LocationType;
         import models.planet.Planet;
         import models.unit.Unit;
         
         import mx.events.EffectEvent;
         
         import utils.Localizer;
         import utils.ModelUtil;
         import utils.StringUtil;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.datastructures.Collections;
         
         private static const IMG:ImagePreloader = ImagePreloader.getInstance();
         
         [Bindable]
         public var stance: int;
         
         [Bindable]
         private var _type: String;
         
         public function set type(value: String): void
         {
            _type = ModelUtil.getModelSubclass(value, false);
            if (_type == null)
            {
               _type = value;
            }
         }
         
         [Bindable]
         public var hp: int;
         
         [Bindable]
         public var level: int;
         
         
         public override function set data(value:Object) : void
         {
            if (data != value)
            {
               super.data = value;
               if (data)
               {
                  type = data.type;
                  hp = data.hp;
                  level = data.level;
                  stance = data.stance;
               }
            }
         }
         
         
         
         [Bindable]
         public var deployable: Boolean = false;
         
         protected function basecontainer1_rollOverHandler(event:MouseEvent):void
         {
            colapseLabel.stop();
            expandLabel.play();
            //            if (_transfer)
            //            {
            //               hideVolumeLabel.stop();
            //               showVolumeLabel.play();
            //            }
         }
         
         
         protected function basecontainer1_rollOutHandler(event:MouseEvent):void
         {
            expandLabel.stop();
            colapseLabel.play();
            //            if (_transfer)
            //            {
            //               showVolumeLabel.stop();
            //               hideVolumeLabel.play();
            //            }
         }
         
         
         protected function info_clickHandler(event:MouseEvent):void
         {
            var temp: Unit = new Unit();
            temp.type = _type;
            temp.upgradePart.level = level;
            ModelLocator.getInstance().infoModel = temp;
            NavigationController.getInstance().showInfo();
         }
         
         /*
         * for deployment and loading/unloading
         */
         public function set unit(value: Unit): void
         {
            unitModel = value;
            if (unitModel != null)
            {
               volumeLabel.text = unitModel.volume.toString();
            }
         }
         
         [Bindable]
         private var unitModel: Unit;
         
         protected function deploy_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().toPlanet(ModelLocator.getInstance().latestPlanet.ssObject);
            var building: Building = BuildingFactory.createDefault(unitModel.deploysTo);
            building.cleanup();
            building.unitDeployed = unitModel;
            new GSelectConstructableEvent(building);
         }
         
         private var unitsLoading: Boolean;
         
         private function show_inside(load: Boolean): void
         {
            unitsLoading = load;
            if (unitModel.stored > 0)
            {
               EventBroker.subscribe(GUnitEvent.UNITS_SHOWN, openUnit);
               new UnitsCommand(UnitsCommand.SHOW, unitModel).dispatch();
            }
            else
            {
               openUnit();
            }
         }
         
         private function openUnit(e: GUnitEvent = null): void
         {
            var planet:Planet = ModelLocator.getInstance().latestPlanet;
            if (e != null)
            {
               EventBroker.unsubscribe(GUnitEvent.UNITS_SHOWN, openUnit);
            }
            NavigationController.getInstance().enableActiveButton();
            if (unitsLoading)
            {
               NavigationController.getInstance().showLoadUnload(planet.toLocation(), unitModel, 
                  Collections.filter(planet.units, 
                  function (unit: Unit): Boolean {
                     return (unit.level > 0) && (unit.volume > 0) && (unit.owner == Owner.PLAYER)
                  && unit.location.type == LocationType.SS_OBJECT}));
            }
            else
            {
               NavigationController.getInstance().showLoadUnload(unitModel, planet.toLocation(),
                  Collections.filter(ModelLocator.getInstance().units, 
                     function (unit: Unit): Boolean {
                        return (unit.level > 0) && (unit.location.type == LocationType.UNIT) && (unitModel != null) 
                        && (unit.location.id == unitModel.id);}));
            }
         }
         
         
         protected function showStorage():void
         {
            if (unitModel != null && !unitModel.pending)
            {
               EventBroker.subscribe(GUnitEvent.UNITS_SHOWN, switchToStorage);
               new UnitsCommand(UnitsCommand.SHOW, unitModel).dispatch();
            }
         }
         
         private function switchToStorage(e: GUnitEvent): void
         {
            EventBroker.unsubscribe(GUnitEvent.UNITS_SHOWN, switchToStorage);
            NavigationController.getInstance().enableActiveButton();
            new GUnitsScreenEvent(GUnitsScreenEvent.SWITCH_TO_STORAGE_SCREEN, unitModel);
         }
         
         [Bindable]
         private var _transfer: Boolean = false;
         
         public function set transfer(value: Boolean): void
         {
            _transfer = value;
         }
         
         
         protected function showVolumeLabel_effectStartHandler(event:EffectEvent):void
         {
            volumeLabel.text = Localizer.string('Units', 'label.volume', [unitModel.volume]);
         }
         
         
         protected function hideVolumeLabel_effectEndHandler(event:EffectEvent):void
         {
            volumeLabel.text = unitModel.volume.toString();
            volumeLabel.horizontalCenter = null;
            volumeLabel.right = 24;
         }
         
         
         protected function showVolumeLabel_effectEndHandler(event:EffectEvent):void
         {
            volumeLabel.setStyle('backgroundAlpha',0.7);
            volumeLabel.horizontalCenter = 0;
         }
         
         
         protected function hideVolumeLabel_effectStartHandler(event:EffectEvent):void
         {
            volumeLabel.setStyle('backgroundAlpha',0);
         }
         
         [Bindable]
         private var expanded: Boolean = false;
         
         
         protected function expandLabel_effectStartHandler(event:EffectEvent):void
         {
            expanded = true;
         }
         
         
         protected function colapseLabel_effectEndHandler(event:EffectEvent):void
         {
            expanded = false;
         }
         
      ]]>
   </fx:Script>
   <s:Group id="contGroup" width="100" height="76">
      <s:Rect left="0" right="0" top="0" bottom="0" alpha="0">
         <s:fill>
            <s:SolidColor color="0x0f0f0f"/>
         </s:fill>
      </s:Rect>
      <base:AdvancedContainer left="0" width="24" bottom="0" top="0">
         <base:layout>
            <s:VerticalLayout/>
         </base:layout>
         
         <!-- actionGroup -->
         <s:Button id="deploy" click="deploy_clickHandler(event)" 
                   visible="{!(!deployable
                   || (unitModel.owner != Owner.PLAYER)
                   || (!ModelLocator.getInstance().latestPlanet)
                   || (ModelLocator.getInstance().latestPlanet.ssObject.owner != Owner.PLAYER))}"
                   skinClass="components.skins.DeployButtonSkin" 
                   toolTip="{Localizer.string('Units', 'label.deploy')}"/>
         
         <base:AdvancedContainer id="loadGroup" visible="{unitModel != null}" width="100%">
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            <s:Button id="load" click="show_inside(true)" visible="{!(
                      (unitModel.storage == 0)
                      || (!unitModel.location.isSSObject)
                      || (!ModelLocator.getInstance().latestPlanet)
                      || (unitModel.owner != Owner.PLAYER))}"
                      toolTip="{Localizer.string('Units', 'label.load')}"
                      skinClass="components.skins.LoadButtonSkin"/>
            <s:Button id="unload" click="show_inside(false)" visible="{!(unitModel.stored == 0 
                      || !unitModel.location.isSSObject
                      || (unitModel.owner != Owner.PLAYER)
                      || (!ModelLocator.getInstance().latestPlanet)
                      || (!(
                      (ModelLocator.getInstance().latestPlanet.ssObject.owner == Owner.PLAYER)
                      ||
                      (ModelLocator.getInstance().latestPlanet.ssObject.owner == Owner.ALLY))))}"
                      toolTip="{Localizer.string('Units', 'label.unload')}"
                      skinClass="components.skins.UnloadButtonSkin"/>
            <s:Button id="show" click="showStorage()" visible="{!(unitModel.location.isSSObject || 
                      unitModel.storage == 0)}"
                      toolTip="{Localizer.string('Units', 'label.show')}"
                      skinClass="components.skins.ShowButtonSkin"/>
         </base:AdvancedContainer>
      </base:AdvancedContainer>
      <s:Group left="24" right="24" top="0" bottom="0">
         <base:SetableProgressBar id="sBar" maxStock="{int(Config.getUnitHp(_type))}" curentStock="{hp}"
                                  specialHeight="6" width="50" text="" top="0" useColorCoding="true"/>
         <s:Group width="50" height="50" top="9" horizontalCenter="0">
            <mx:Image source="{IMG.getBitmapAsset(AssetNames.getUnitImageName(_type))}" 
                      width="50" height="50" left="0" right="0" maintainAspectRatio="true"
                      horizontalAlign="center"/>
         </s:Group>
         
         <unitsscreen:StarsContainer starCount="{level-1}" horizontalCenter="0" top="62"/>
         <s:Label id="hpLabel" top="9" width="50" height="0" textAlign="center" horizontalCenter="0" 
                  text="{hp+'\n'+'/'+'\n'+Config.getUnitHp(_type)}" verticalAlign="middle"
                  backgroundColor="#0f0f0f" backgroundAlpha="0.7" doubleClickEnabled="true"/>
         
      </s:Group>
      <s:Label id="volumeLabel" visible="{!(!_transfer || expanded)}" y="45" right="24"
               backgroundColor="#0f0f0f" backgroundAlpha="0"/>
      <s:Group right="0" width="24" bottom="0" top="0">
         <s:BitmapImage source="{IMG.getImage(AssetNames.getIconImageName(Unit.STANCE_WORD + stance))}" 
                        top="10" horizontalCenter="0"/>
         <s:Button skinClass="components.skins.InfoButtonSkin" horizontalCenter="0" bottom="10"
                   click="info_clickHandler(event)"/>
      </s:Group>
   </s:Group>
</s:ItemRenderer>



