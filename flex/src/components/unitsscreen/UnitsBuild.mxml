<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:unitsscreen="components.unitsscreen.*"
                    creationComplete="unitsScreen_creationCompleteHandler(event)" width="100%">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.ListNonScrollableSkin;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GUnitsScreenEvent;
         import globalevents.GlobalEvent;
         
         import models.building.Building;
         import models.building.events.BuildingEvent;
         import models.planet.Planet;
         import models.planet.events.PlanetEvent;
         
         import mx.collections.ArrayCollection;
         import mx.events.FlexEvent;
         
         import spark.events.IndexChangeEvent;
         [Bindable]
         private var facilities: ArrayCollection = new ArrayCollection();
         
         private function refreshFacilities(e: Event= null): void
         {
            facilities = latestPlanet.getUnitsFacilities();
            for each (var facility: Building in facilities)
            facility.addEventListener(BuildingEvent.EXPAND_FINISHED, scrollToSelected);
         }
         
         private var latestPlanet: Planet;
         
         private function scrollToSelected(e: Event): void
         {
            vPort.verticalScrollPosition = facilitiesList.selectedIndex * UnitFacility.SHOP_PART_HEIGHT;
         }
         
         private function refreshPlanet(): void
         {
            if (latestPlanet != ML.latestPlanet)
            {
               if (latestPlanet != null)
               {
                  latestPlanet.removeEventListener(PlanetEvent.BUILDING_UPGRADED, refreshFacilities);
               }
               latestPlanet = ML.latestPlanet;
               latestPlanet.addEventListener(PlanetEvent.BUILDING_UPGRADED, refreshFacilities);
               refreshFacilities();
            }
         }
         
         private function openFacilityById(e: GUnitsScreenEvent): void
         {
            refreshPlanet();
            for each(var element: Building in facilities)
            {
               if (element.id == e.facilityId)
               {
                  element.dispatchExpandEvent();
                  facilitiesList.selectedIndex = facilities.getItemIndex(element);
               }
               else
               {
                  element.dispatchCollapseEvent();
               }
            }
         }
         
         private function reset(e: GlobalEvent): void
         {
            if (latestPlanet != null)
            {
               latestPlanet.removeEventListener(PlanetEvent.BUILDING_UPGRADED, refreshFacilities);
            }
            latestPlanet = null;
         }
         
         protected function unitsScreen_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.FACILITY_OPEN, openFacilityById);
            latestPlanet = ML.latestPlanet;
            refreshFacilities();
            latestPlanet.addEventListener(PlanetEvent.BUILDING_UPGRADED, refreshFacilities);
            var selectFacilityEvent: Function = function(e: FlexEvent): void
            {
               NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
            }
            facilitiesList.addEventListener(FlexEvent.UPDATE_COMPLETE, selectFacilityEvent);
            EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
         }
         
         
         protected function facilitiesList_changeHandler(event:IndexChangeEvent):void
         {
            if (event.newIndex != -1)
            {
               for each (var element: Building in facilities)
               if (facilities.getItemIndex(element) != facilitiesList.selectedIndex)
               {
                  element.dispatchCollapseEvent();
               }
               else
               {
                  element.dispatchExpandEvent();
               }
            }
         }
         
      ]]>
   </fx:Script>
   <base:Scroller id="scrollCont" top="6" bottom="6" left="0"
                  right="0" horizontalScrollPolicy="off" 
                  stepMultiplier="5">
      <s:Group left="0" right="0" height="100%" id="vPort">
         <s:List id="facilitiesList" dataProvider="{facilities}" left="0" right="0" height="100%"
                 useVirtualLayout="false" contentBackgroundColor="#0f0f0f" requireSelection="true"
                 rollOverColor="#0f0f0f" selectionColor="#0f0f0f" 
                 skinClass="components.skins.ListNonScrollableSkin"
                 borderVisible="false" changing="facilitiesList_changeHandler(event)">
            <s:itemRenderer>
               <fx:Component>
                  <s:ItemRenderer width="100%">
                     <unitsscreen:UnitFacility facility="{data}" width="100%" focusEnabled="false"/>
                  </s:ItemRenderer>
               </fx:Component>
            </s:itemRenderer>
            <s:layout>
               <s:VerticalLayout gap="1"/>
            </s:layout>
         </s:List>
      </s:Group>
   </base:Scroller>
</base:BaseContainer>
