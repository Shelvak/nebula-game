<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:unitsscreen="components.unitsscreen.*"
                    creationComplete="unitsScreen_creationCompleteHandler(event)">
   <fx:Metadata>
      [ResourceBundle ("Units")]
   </fx:Metadata>
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import config.Config;
         
         import controllers.screens.MainAreaScreens;
         import controllers.screens.MainAreaScreensSwitch;
         import controllers.ui.NavigationController;
         
         import globalevents.GScreenChangeEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.building.Building;
         import models.building.events.BuildingEvent;
         import models.events.ScreensSwitchEvent;
         import models.planet.Planet;
         import models.planet.events.PlanetEvent;
         
         import mx.collections.ArrayCollection;
         import mx.events.FlexEvent;
         
         import utils.assets.AssetNames;
         [Bindable]
         private var facilities: ArrayCollection = new ArrayCollection();
         
         private function refreshFacilities(e: Event= null): void
         {
            facilities = ML.latestPlanet.getUnitsFacilities();
            for each (var facility: Building in facilities)
            facility.addEventListener(BuildingEvent.EXPAND_FINISHED, scrollToSelected);
         }
         
         private function scrollToSelected(e: Event): void
         {
            facilitiesList.ensureIndexIsVisible(facilitiesList.selectedIndex);
         }
         
         public function openFacilityById(e: GUnitsScreenEvent): void
         {
            for each(var element: Building in facilities)
            {
               if (element.id == e.facilityId)
               {
                  element.dispatchExpandEvent();
                  facilitiesList.selectedIndex = facilities.getItemIndex(element);
               }
               else
               {
                  element.dispatchCollapseEvent();
               }
            }
         }
         
         protected function unitsScreen_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GUnitsScreenEvent.FACILITY_OPEN, openFacilityById);
            refreshFacilities();
            ML.latestPlanet.addEventListener(PlanetEvent.BUILDING_UPGRADED, refreshFacilities);
            var selectFacilityEvent: Function = function(e: FlexEvent): void
            {
               NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
            }
            facilitiesList.addEventListener(FlexEvent.UPDATE_COMPLETE, selectFacilityEvent);
         }
         
         
         protected function facilitiesList_clickHandler(event:MouseEvent = null):void
         {
            for each (var element: Building in facilities)
            if (facilities.getItemIndex(element) != facilitiesList.selectedIndex)
               element.dispatchCollapseEvent();
         }

      ]]>
   </fx:Script>
   
   <base:layout>
      <s:VerticalLayout paddingLeft="6" paddingBottom="6" paddingRight="6" paddingTop="6"/>
   </base:layout>
   <s:Label text="{RM.getString('Units', 'label.currentFacilities')}" fontSize="26" color="#3bc133"/>
   <s:List id="facilitiesList" dataProvider="{facilities}" width="100%" height="100%"
           useVirtualLayout="false" contentBackgroundColor="#0f0f0f" contentBackgroundAlpha="0"
           rollOverColor="#4f4f4f" selectionColor="#2f2f2f" 
           borderVisible="true" borderColor="#afafaf" click="facilitiesList_clickHandler(event)">
      <s:itemRenderer>
         <fx:Component>
            <s:ItemRenderer width="100%">
               <unitsscreen:UnitFacility facility="{data}" width="100%"/>
            </s:ItemRenderer>
         </fx:Component>
      </s:itemRenderer>
      <s:layout>
         <s:VerticalLayout/>
      </s:layout>
   </s:List>
</base:BaseContainer>
