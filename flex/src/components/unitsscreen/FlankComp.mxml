<?xml version="1.0" encoding="utf-8"?>
<base:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
            xmlns:s="library://ns.adobe.com/flex/spark" 
            xmlns:mx="library://ns.adobe.com/flex/mx" 
            xmlns:base="components.base.*" 
            xmlns:unitsscreen="components.unitsscreen.*"
            title="{RM.getString('Units', 'label.flankNr'+flankModel.nr)}"
            skinClass="components.skins.FlankPanelSkin"
            creationComplete="panel1_creationCompleteHandler(event)" xmlns:unit="components.unit.*">
   
   <fx:Metadata>
      [ResourceBundle ("Units")]
      [SkinState("transfering")]
      [SkinState("normal")]
   </fx:Metadata>
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.base.AdvancedList;
         import components.skins.ListNonScrollableSkin;
         import components.skins.ListScrollableSkin;
         import components.skins.ZoomInButtonSkin;
         import components.skins.ZoomOutButtonSkin;
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import globalevents.GUnitsScreenEvent;
         
         import models.unit.Unit;
         import models.unit.UnitsFlank;
         
         import mx.collections.ArrayCollection;
         import mx.controls.Alert;
         import mx.core.IUIComponent;
         import mx.events.DragEvent;
         import mx.events.FlexEvent;
         import mx.graphics.SolidColor;
         import mx.managers.DragManager;
         
         import spark.components.List;
         import spark.events.IndexChangeEvent;
         import spark.primitives.Rect;
         
         [Bindable]
         public var flankModel: UnitsFlank;
         
         public function get selectedUnits(): Vector.<Object>
         {
            return unitsList.selectedItems;
         }
         
         public function dragEnterHandler(event:DragEvent):void
         {           
            DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
         }
         
         
         public function unitsList_dragDropHandler(event:DragEvent):void
         {
            if (event.dragInitiator is List)
            { 
               var flanksObj: Object = {};
               for each (var unit: Unit in (event.dragInitiator as List).selectedItems)
               {
                  flanksObj[unit.id] = [flankModel.nr - 1, null];
               }
               new GUnitsScreenEvent(GUnitsScreenEvent.UNITS_UPDATED, flanksObj);
            }
            deselect = true;
         }
         
         public var deselect: Boolean = false;
         
         private function deselectAll(e: Event = null): void
         {
            unitsList.selectedIndices = new Vector.<int>;
            unitsList.addEventListener(FlexEvent.UPDATE_COMPLETE, unitsList_changeHandler);
         }
         
         private function selectAllUnits(e: Event = null): void
         {
            var allSelection: Vector.<int> = new Vector.<int>;
            for each (var unit: Unit in flankModel.flank)
            allSelection.push(flankModel.flank.getItemIndex(unit));
            unitsList.selectedIndices = allSelection;
            unitsList.addEventListener(FlexEvent.UPDATE_COMPLETE, unitsList_changeHandler);
         }
         
         private function updateStances(e: GUnitsScreenEvent): void
         {
            var flanksObj: Object = {};
            for each (var unit: Unit in unitsList.selectedItems)
            {
               flanksObj[unit.id] = [null, e.stance];
               unit.newStance = e.stance;
            }
            new GUnitsScreenEvent(GUnitsScreenEvent.UNITS_UPDATED, flanksObj);
            deselectAll();
         }
         
         public function panel1_creationCompleteHandler(event:FlexEvent):void
         {
            addEventListener(UnitsScreenEvent.FLANK_SELECT_ALL, selectAllUnits);
            addEventListener(UnitsScreenEvent.FLANK_DESELECT, deselectAll);
            EventBroker.subscribe(GUnitsScreenEvent.DESELECT_UNITS, deselectAll);
            EventBroker.subscribe(GUnitsScreenEvent.SELECT_ALL, selectAllUnits);
            EventBroker.subscribe(GUnitsScreenEvent.SET_STANCE, updateStances);
         }
         
         
         public function unitsList_changeHandler(event:Event = null):void
         {
            flankModel.selection = unitsList.selectedItems;
            new GUnitsScreenEvent(GUnitsScreenEvent.SELECTION_PRECHANGE);
            unitsList.removeEventListener(FlexEvent.UPDATE_COMPLETE, unitsList_changeHandler);
         }
         
         override protected function getCurrentSkinState():String
         {
            if (_transfer)
               return "transfering";
            else
               return "normal";
         }
         
         private var _transfer: Boolean = false;
         
         public function set transfer(value: Boolean): void
         {
            _transfer = value;
            invalidateSkinState();
         }
         
         [SkinPart (required="true")]
         public var unitsList: AdvancedList;
         
      ]]>
   </fx:Script>
   
</base:Panel>
