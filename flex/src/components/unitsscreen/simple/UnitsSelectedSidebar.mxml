<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/halo"
                    xmlns:base="components.base.*">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.GreenButtonSkin;
         import components.skins.RedButtonSkin;
         import components.skins.StanceButtonSkin;
         
         import config.BattleConfig;
         
         import controllers.GlobalFlags;
         import controllers.ui.NavigationController;
         
         import globalevents.GUnitEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.Owner;
         import models.building.Building;
         import models.location.Location;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.unit.MCUnitScreen;
         import models.unit.Unit;
         import models.unit.UnitKind;
         
         import mx.events.FlexEvent;
         
         import utils.assets.AssetNames;
         import utils.locale.Localizer;
         
         
         protected function stance_clickHandler(stance: int):void
         {
            US.setStance(stance);
         }
         
         protected function order_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            US.confirmAttack();
         }
         
         protected function dismiss_clickHandler(event:MouseEvent):void
         {
            US.confirmDismiss();
         }
         
         [Bindable]
         private var US: MCUnitScreen = MCUnitScreen.getInstance();
         
         protected function formationConfirm_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            US.updateChanges();
         }
         
         protected function formationCancel_clickHandler(event:MouseEvent):void
         {
            US.cancel();
         }
         
         private function selectAll(): void
         {
            US.selectAll();
         }
         
         private function selectNone(): void
         {
            US.deselectUnits();
         }
         
         protected function button1_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().showPreviousScreen();
         }
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Units', prop, params);
         }
      ]]>
   </fx:Script>
   <base:Scroller top="0" left="0" right="0" bottom="0" stepMultiplier="3">
      <s:Group left="0" right="0">
         <s:Label top="20" text="{getText('label.pleaseWait')}" fontWeight="bold"
                  color="#eec500" fontSize="14" textAlign="center" left="6" right="6"/>
         <s:Label top="20" text="{getText('label.leavingSquadrons')}" fontWeight="bold"
                  color="#eec500" fontSize="14" textAlign="center" left="6" right="6" 
                  visible="{US.currentKind == UnitKind.MOVING}"/>
         <base:Warning top="20" left="6" right="6" text="{getText('label.notYours')}" 
                       visible="{(US.owner != Owner.PLAYER)}"/>
         <base:AdvancedContainer left="0" right="0" 
                                 visible="{US.owner == Owner.PLAYER 
                                 &amp;&amp; US.currentKind != UnitKind.MOVING}">
            <base:Panel width="100%" title="{getText('label.select')}">
               <base:layout>
                  <s:HorizontalLayout gap="10" horizontalAlign="center"/>
               </base:layout>
               <s:Button label="{getText('label.all')}" click="selectAll()"/>
               <s:Button label="{getText('label.none')}" click="selectNone()"/>
            </base:Panel>
            
            <base:Panel width="100%" title="{getText('label.setStance')}"
                        visible="{US.selection.length > 0}">
               <s:Button label="{Unit.STANCE_DEFENSIVE}" 
                         skinClass="components.skins.StanceButtonSkin"
                         click="stance_clickHandler(Unit.STANCE_DEFENSIVE)"
                         toolTip="{getText('stance.defensive', 
                         BattleConfig.getStanceProps(Unit.STANCE_DEFENSIVE))}"/>
               <s:Button label="{Unit.STANCE_NEUTRAL}" 
                         skinClass="components.skins.StanceButtonSkin"
                         click="stance_clickHandler(Unit.STANCE_NEUTRAL)"
                         toolTip="{getText('stance.neutral', 
                         BattleConfig.getStanceProps(Unit.STANCE_NEUTRAL))}"/>
               <s:Button label="{Unit.STANCE_AGGRESSIVE}" 
                         skinClass="components.skins.StanceButtonSkin"
                         click="stance_clickHandler(Unit.STANCE_AGGRESSIVE)"
                         toolTip="{getText('stance.aggressive', 
                         BattleConfig.getStanceProps(Unit.STANCE_AGGRESSIVE))}"/>
               <base:layout>
                  <s:HorizontalLayout gap="5" paddingLeft="10"/>
               </base:layout>
            </base:Panel>
            
            <base:Panel width="100%" title="{getText('label.noSelection')}"
                        visible="{US.selection.length == 0}">
               <s:BitmapImage source="{IMG.getImage(AssetNames.UNITS_SCREEN_IMAGE_FOLDER + 'arrow_select_units')}"/>
               <s:Group width="100%">
                  <s:Label text="{getText('label.selectUnits')}" fontSize="20" fontWeight="bold" 
                           color="#ffd200" horizontalCenter="0"/>
               </s:Group>
               <base:layout>
                  <s:HorizontalLayout verticalAlign="middle"/>
               </base:layout>
            </base:Panel>
            
            <base:Panel width="100%" title="{getText('label.mission')}" 
                        visible="{!(US.selection.length == 0 
                        || !((US.target is Building)
                        || (US.currentKind == UnitKind.SPACE) 
                        || (US.currentKind == UnitKind.SQUADRON)) 
                        || US.hasChanges)}">
               <base:AdvancedContainer width="100%">
                  <s:Button label="{getText('label.attack')}" horizontalCenter="0"
                            visible="{US.target is Building}"
                            enabled="{US.selection.length > 0}" click="order_clickHandler(event)"
                            skinClass="components.skins.RedButtonSkin"/>
                  <s:Button label="{getText('label.issueOrder')}" horizontalCenter="0"
                            visible="{US.currentKind == UnitKind.SPACE || US.currentKind == UnitKind.SQUADRON}"
                            enabled="{US.selection.length > 0}" click="order_clickHandler(event)"
                            skinClass="components.skins.GreenButtonSkin"/>
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="center" gap="6"/>
                  </base:layout>
               </base:AdvancedContainer>
            </base:Panel>
            
            <base:Panel width="100%" title="{getText('title.dismiss')}"
                        visible="{US.selection.length > 0 &amp;&amp; !US.hasChanges &amp;&amp;
                        US.target == null &amp;&amp; US.location is Location &amp;&amp; 
                        Location(US.location).isSSObject}">
               <s:Label text="{getText('message.dismiss')}" width="100%"
                        fontSize="12"/>
               <base:ImageAndLabel paddingLeft="12" paddingTop="6" type="{ResourceType.METAL}" 
                                   textToDisplay="{Resource.calculateUnitDestructRevenue(
                                   US.selection, ResourceType.METAL)}"
                                   toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
               <base:ImageAndLabel paddingLeft="12" type="{ResourceType.ENERGY}"  
                                   textToDisplay="{Resource.calculateUnitDestructRevenue(
                                   US.selection, ResourceType.ENERGY)}"
                                   toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
               <base:ImageAndLabel paddingLeft="12" type="{ResourceType.ZETIUM}" 
                                   textToDisplay="{Resource.calculateUnitDestructRevenue(
                                   US.selection, ResourceType.ZETIUM)}"
                                   toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
               <base:ImageAndLabel paddingLeft="12" type="{ResourceType.POPULATION}" 
                                   paddingBottom="12"
                                   textToDisplay="{Resource.calculateUnitDestructRevenue(
                                   US.selection, ResourceType.POPULATION)}"
                                   toolTip="{Localizer.string('Resources', ResourceType.POPULATION)}"/>
               <s:Group width="100%">
                  <s:Button label="{getText('label.dismiss')}" horizontalCenter="0"
                            visible="{US.target == null 
                            &amp;&amp; US.location is Location 
                            &amp;&amp; Location(US.location).isSSObject}"
                            click="dismiss_clickHandler(event)"
                            skinClass="components.skins.RedButtonSkin"/>
               </s:Group>
               <base:layout>
                  <s:VerticalLayout paddingTop="6" paddingLeft="6" paddingRight="6"/>
               </base:layout>
            </base:Panel>
            
            <base:Panel width="100%" title="{getText('label.changesDetected')}" 
                        visible="{US.hasChanges}">
               <s:Button click="formationConfirm_clickHandler(event)" 
                         skinClass="components.skins.GreenButtonSkin"
                         label="{getText('label.confirm')}"/>
               <s:Button click="formationCancel_clickHandler(event)" 
                         skinClass="components.skins.RedButtonSkin"
                         label="{getText('label.cancel')}"/>
               <base:layout>
                  <s:VerticalLayout horizontalAlign="center" gap="10"/>
               </base:layout>
            </base:Panel>
            
            
            <s:Group width="100%" visible="{US.location is Unit}">
               <s:Button label="{getText('label.close')}"
                         click="button1_clickHandler(event)" horizontalCenter="0"
                         skinClass="components.skins.RedButtonSkin"/>
            </s:Group>
            
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            
         </base:AdvancedContainer>
         
      </s:Group>
   </base:Scroller>
   
</base:BaseContainer>
