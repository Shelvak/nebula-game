<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:ratings="components.ratings.*"
                    xmlns:screens="components.screens.*"
                    width="100%" height="100%"
                    creationComplete="basecontainer1_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.LargePanelSkin;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GRatingsEvent;
         
         import models.events.HeaderEvent;
         import models.player.MRatingPlayer;
         import models.ratings.MCRatingsScreen;
         import models.ratings.events.RatingsEvent;
         
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.FlexEvent;
         
         import spark.components.CheckBox;
         import spark.components.TextInput;
         import spark.events.TextOperationEvent;
         
         import utils.assets.AssetNames;
         import utils.locale.Localizer;
         
         
         private var _filterOnline:Boolean;
         private function setFilterOnline(value:Boolean) : void
         {
            if (_filterOnline != value)
            {
               _filterOnline = value;
               if (searchHeader != null && searchHeader.chkFilterOnline != null)
               {
                  searchHeader.chkFilterOnline.selected = value;
               }
            }
         }
         
         
         private var _searchText:String = '';
         private function setSearchText(value:String, setInputValue: Boolean = false) : void
         {
            if (_searchText != value)
            {
               _searchText = value;
               if (searchHeader != null && searchHeader.txtSearch != null && setInputValue)
               {
                  searchHeader.txtSearch.text = value;
               }
            }
         }
         
         
         protected function textinput1_changeHandler(event:TextOperationEvent):void
         {
            setSearchText(TextInput(event.target).text);
            RS.ratings.filterFunction = function (item: MRatingPlayer): Boolean
            {
               return (item.name.toLowerCase().indexOf(_searchText.toLowerCase()) != -1) &&
                      (!_filterOnline || item.online);
            };
            RS.ratings.refresh();
         }
         
         private function filterPlayer(e: RatingsEvent): void
         {
            deselectOnline();
            setSearchText(RS.filterName, true);
            RS.ratings.filterFunction = function (item: MRatingPlayer): Boolean
            {
               return (item.name.toLowerCase().indexOf(_searchText.toLowerCase()) != -1) &&
                      (!_filterOnline || item.online);
            };
            RS.ratings.refresh();
         }
         
         [Bindable]
         private var RS: MCRatingsScreen = MCRatingsScreen.getInstance();
         
         protected function onlyOnline_changeHandler(event:Event):void
         {
            setFilterOnline(CheckBox(event.target).selected);
            RS.ratings.filterFunction = function (item: MRatingPlayer): Boolean
            {
               return (item.name.toLowerCase().indexOf(_searchText.toLowerCase()) != -1)
               && (!_filterOnline || item.online);
            }
            RS.ratings.refresh();
         }
         
         private function deselectOnline(): void
         {
            setSearchText('');
            setFilterOnline(false);
            header.reset();
         }
         
         private function scrollPlayer(e: RatingsEvent): void
         {
            deselectOnline();
            theList.validateNow();
            theList.verticalScrollPosition = RS.getScrollPosition(contScroller.height,
            rLayout.rowHeight);
         }
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            RS.addEventListener(RatingsEvent.RATINGS_FILTER, filterPlayer);
            RS.addEventListener(RatingsEvent.RATINGS_SCROLL, scrollPlayer);
            NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
         }
         
         private var sortKey: String;
         
         private static const nameField: SortField = new SortField('name', true);
         private static const rankField: SortField = new SortField('rank', false, false, true);
         private static const allianceField: SortField = new SortField('alliance', true);
         private static const victoryPtsField: SortField = new SortField('victoryPoints', false, true, true);
         private static const pointsField: SortField = new SortField('points', false, true, true);
         private static const planetsCountField: SortField = new SortField('planetsCount', false, true, true);
         private static const economyPtsField: SortField = new SortField('economyPoints', false, true, true);
         private static const sciencePtsField: SortField = new SortField('sciencePoints', false, true, true);
         private static const armyPtsField: SortField = new SortField('armyPoints', false, true, true);
         private static const warPtsField: SortField = new SortField('warPoints', false, true, true);
         
         
         private static const sortFields: Object = 
            {
               'rank':[rankField],
               'name':[nameField],
               'alliance':[allianceField, victoryPtsField, pointsField, planetsCountField, nameField],
               'planetsCount':[planetsCountField, victoryPtsField, pointsField, nameField],
               'economyPoints':[economyPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'sciencePoints':[sciencePtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'armyPoints':[armyPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'warPoints':[warPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'victoryPoints':[victoryPtsField, pointsField, planetsCountField, nameField],
               'points':[pointsField, victoryPtsField, planetsCountField, nameField]
            }
         
         protected function header_ratingsSortHandler(event:HeaderEvent):void
         {
            RS.ratings.sort = new Sort();
            RS.ratings.sort.fields = sortFields[event.key];
            RS.ratings.refresh();
         }
         
      ]]>
   </fx:Script>
   <screens:GradientBackground gradientWidth="{(width - searchHeader.width) / 2}"/>
   <base:AdvancedContainer left="0" right="0" top="0" bottom="0">
      <ratings:RatingsSearchHeader id="searchHeader"
                                   searchTextInputChangeHandler="{textinput1_changeHandler}"
                                   filterOnlineCheckBoxChangeHandler="{onlyOnline_changeHandler}"/>
      
      <base:Panel height="100%" horizontalCenter="0" 
                  skinClass="components.skins.LargePanelSkin"
                  title="{Localizer.string('Ratings', 'label.ratings')}">
         <ratings:RatingsHeader id="header" listSort="header_ratingsSortHandler(event)"/>
         <base:Scroller id="contScroller" left="0" right="0" top="{header.height}" bottom="0">
               <s:DataGroup dataProvider="{RS.ratings}" id="theList"
                            itemRenderer="components.ratings.IRRatingsRow">
                  <s:layout>
                     <s:VerticalLayout id="rLayout" gap="0" useVirtualLayout="true"/>
                  </s:layout>
               </s:DataGroup>
         </base:Scroller>
      </base:Panel>
      <base:layout>
         <s:VerticalLayout horizontalAlign="center" gap="10" paddingTop="10"/>
      </base:layout>
   </base:AdvancedContainer>
   
   <screens:ScreenCloseButton label="{Localizer.string('Ratings', 'label.close')}"
                              right="0" bottom="0"
                              click="NavigationController.getInstance().showPreviousScreen()"/>
</base:BaseContainer>
