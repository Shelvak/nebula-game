<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false" 
                xmlns:base="components.base.*" 
                xmlns:unitsscreen="components.unitsscreen.*">
   <fx:Script>
      <![CDATA[
         import components.alliance.AllianceScreenM;
         import components.skins.LinkButtonSkin;
         
         import controllers.ui.NavigationController;
         
         import models.ModelLocator;
         import models.player.MRatingPlayer;

         import utils.DateUtil;

         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         [Bindable]
         private var player: MRatingPlayer;
         
         public override function set data(value:Object):void
         {
            player = MRatingPlayer(value);
         }
         
         public override function get data():Object
         {
            return player;
         }
         
         private function getImaginaryLevel(rank: int): int
         {
            if (rank > 1000) return 0;
            else if (rank > 500) return 1;
            else if (rank > 250) return 2;
            else if (rank > 150) return 3;
            else if (rank > 100) return 4;
            else if (rank > 50) return 5;
            else if (rank > 30) return 6;
            else if (rank > 20) return 7;
            else if (rank > 10) return 8;
            else return 9;
         }

         [Bindable]
      private var ML: ModelLocator = ModelLocator.getInstance();
      ]]>
   </fx:Script>
   <s:Rect left="0" right="0" top="0" bottom="0">
      <s:fill>
         <s:SolidColor color="{player.id == ModelLocator.getInstance().player.id
                       ?0x363636
                       :itemIndex%2==0?0x0e0e0e:0x141414}"/>
      </s:fill>
   </s:Rect>
   <base:AdvancedContainer top="3" bottom="3">
      <base:layout>
         <s:HorizontalLayout gap="1" verticalAlign="middle"/>
      </base:layout>
      <s:Label text="{player.nr}" width="{RatingsWidths.rank}" textAlign="center"/>
      <base:AdvancedContainer width="{RatingsWidths.player -
                              (getImaginaryLevel(player.rank) > 0?47:0)}"
                              toolTipCreate="player.createStatusTooltip(event)"
                              toolTip=" ">
         <s:BitmapImage source="{ImagePreloader.getInstance().getImage(
                        AssetNames.getIconImageName(player.online?'online':'offline'))}"/>
         <s:Button label="{player.name}" width="100%" skinClass="components.skins.LinkButtonSkin"
                   click="NavigationController.getInstance().showPlayer(player.id)"/>
         <base:layout>
            <s:HorizontalLayout verticalAlign="middle" paddingLeft="6" paddingRight="3"/>
         </base:layout>
      </base:AdvancedContainer>
      <s:Group width="{RatingsWidths.vipStatus}">
         <s:BitmapImage source="{ImagePreloader.getInstance().getImage(
            AssetNames.getIconImageName('vipPlayer'))}"
            visible="{player.vip}" horizontalCenter="0"/>
      </s:Group>
      <s:Group width="46" visible="{getImaginaryLevel(player.rank) > 0}">
         <unitsscreen:StarsContainer starCount="{getImaginaryLevel(player.rank)}" 
                                     horizontalCenter="-3"/>
      </s:Group>
      <s:Group width="{RatingsWidths.playerAlliance}">
         <s:Button label="{player.getAllianceName()}" left="6" right="3"
                   visible="{player.alliance != null}"
                   skinClass="components.skins.LinkButtonSkin"
                   click="AllianceScreenM.getInstance().showScreen(player.alliance.id)"/>
      </s:Group>
      <s:Label text="{player.planetsCount}" width="{RatingsWidths.planetsCount}"
               textAlign="center" visible="{player.planetsCount > 0
               || player.bgPlanetsCount > 0}"
               includeInLayout="{player.planetsCount > 0
               || player.bgPlanetsCount > 0}"/>
      <s:Label text="{player.bgPlanetsCount}" width="{RatingsWidths.bgPlanetsCount}"
               textAlign="center" visible="{player.planetsCount > 0
               || player.bgPlanetsCount > 0}"
               includeInLayout="{player.planetsCount > 0
               || player.bgPlanetsCount > 0}"/>
      <s:Label visible="{player.planetsCount == 0
               &amp;&amp; player.bgPlanetsCount == 0}"
               text="{player.deathDate == null ? ''
               : Localizer.string('Ratings', 'label.deathDay',
                  [MRatingPlayer.getDays(
                     ML.latestGalaxy.apocalypseStartEvent.occursAt,
                     player.deathDate)
                  ])}"
               toolTip="{player.deathDate == null ? ''
               : Localizer.string('Ratings', 'tooltip.deathDay',
                  [DateUtil.formatShortDateTime(
                     player.deathDate)])}"
               width="{RatingsWidths.planetsCount + 1 + RatingsWidths.bgPlanetsCount}"
               textAlign="center"
               includeInLayout="{player.planetsCount == 0
               &amp;&amp; player.bgPlanetsCount == 0}"
               styleName="unsatisfied"/>
      <s:Label text="{player.economyPoints}" width="{RatingsWidths.economyPoints}" 
               textAlign="center"/>
      <s:Label text="{player.sciencePoints}" width="{RatingsWidths.sciencePoints}" 
               textAlign="center"/>
      <s:Label text="{player.armyPoints}" width="{RatingsWidths.armyPoints}" 
               textAlign="center"/>
      <s:Label text="{player.warPoints}" width="{RatingsWidths.warPoints}" 
               textAlign="center"/>
      <s:Label text="{player.victoryPoints}" width="{RatingsWidths.victoryPoints}" 
               textAlign="center"/>
      <s:Label text="{player.points}" width="{RatingsWidths.points}" 
               textAlign="center"/>
   </base:AdvancedContainer>
</s:ItemRenderer>
