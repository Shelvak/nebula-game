<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:base="components.base.*"
                    xmlns:battle="components.battle.*"
                    width="{barGroup.width}">
   <fx:Binding source="ML.latestPlanet.ssObject" destination="ssObject"/>
   <fx:Script>
      <![CDATA[
      import config.Config;

      import models.planet.MPlanet;
      import models.resource.ResourceType;
      import models.solarsystem.MSSObject;
      import models.time.IMTimeEvent;

      import mx.events.EffectEvent;

      import utils.assets.AssetNames;
      import utils.locale.Localizer;


      private static const DURATION_TIME: int = 100;

      [Bindable]
      private var addPlanet: int = 0;

      [Bindable]
      private var ssObject: MSSObject;

      protected function shorten_effectEndHandler(event: EffectEvent): void {
         infoPanel.visible = false;
         addPlanet = 0;
      }

      protected function widen_effectStartHandler(event: EffectEvent): void {
         infoPanel.visible = true;
      }

      private function getDays(toDate: Date, fromDate: Date): int {
         return Math.round((toDate.time - fromDate.time) /
                              (1000 * 60 * 60 * 24));
      }

      private function getMaxArg(ssObject: MSSObject): int {
         return (ssObject.inBattleground || ssObject.inMiniBattleground)
                   ? Config.getRaidingBattlegroundMaxArg()
                   : Config.getRaidingPlanetsMaxArg();
      }

      private function getPlanetCountLabel(ssObject: MSSObject, raidArg: int,
                                           raidArrives: IMTimeEvent,
                                           apocalypseMoment: IMTimeEvent,
                                           planetCountDiff: int): String {
         if (raidArrives == null) {
            return '';
         }
         if (planetCountDiff == 0) {
            return raidArrives.occuresAtString();
         }
         return Localizer.string(
            'Units',
            ssObject.apocalypseWillBeStartedBeforeRaid
               ? 'label.afterDays'
               : (getMaxArg(ssObject) > (this.ssObject.raidArg + planetCountDiff)
                     ? 'label.withPlanets'
                     : 'label.withPlanetsOrMore'),
            [
               (ssObject.apocalypseWillBeStartedBeforeRaid
                   ? 1 + getDays(raidArrives.occuresAt,
                                 apocalypseMoment.occuresAt)
                   : raidArg)
                  + planetCountDiff
            ]
         );
      }
      ]]>
   </fx:Script>
   
   <fx:Declarations>
      <s:Resize id="widen" heightTo="{background.height + 8}"
                duration="{DURATION_TIME}" effectStart="widen_effectStartHandler(event)"/>
      
      <s:Resize id="shorten" heightTo="0"
                duration="{DURATION_TIME}" effectEnd="shorten_effectEndHandler(event)"/>
      
      <s:Fade id="fadeIn" duration="{DURATION_TIME}"/>
      <s:Fade id="fadeOut" duration="{DURATION_TIME}"/>
   </fx:Declarations>
   <s:Group mouseEnabledWhereTransparent="true">
      <s:Group width="{background.width}" height="0" id="infoPanel"
               visible="false" clipAndEnableScrolling="true"
               rollOver="{shorten.stop(); fadeOut.stop(); widen.play([infoPanel]); fadeIn.play([infoPanel])}"
               rollOut="{widen.stop(); fadeIn.stop();  shorten.play([infoPanel]); fadeOut.play([infoPanel])}">
         <s:Group width="100%" height="100%">
            <s:BitmapImage source="{IMG.getImage(AssetNames.UI_IMAGES_FOLDER + 'raiders_bar')}"
                    id="background"/>
               <s:Button skinClass="components.skins.LeftButtonSkin"
                         left="28" top="2"
                         click="addPlanet--"
                         visible="{MPlanet.hasRaiders(
                           ssObject.apocalypseWillBeStartedBeforeRaid
                              ? addPlanet - 1
                              : ssObject.raidArg + addPlanet - 1,
                           ssObject.nextRaidEvent,
                           ssObject.inBattleground || ssObject.inMiniBattleground,
                           ML.latestGalaxy.apocalypseStartEvent
                        )}"/>
               <s:Label top="7" left="48" right="32" textAlign="center" fontSize="12" fontWeight="bold" color="#f4c300" 
                        text="{Localizer.string('Units', 'label.incomingRaiders')}"/>
               <s:Button skinClass="components.skins.RightButtonSkin"
                         right="12" top="2"
                         click="addPlanet++"
                         visible="{ML.latestGalaxy.apocalypseHasStarted
                         || (((ML.latestPlanet.inBattleground
                             || ML.latestPlanet.inMiniBattleground)
                                ? Config.getRaidingBattlegroundMaxArg()
                                : Config.getRaidingPlanetsMaxArg())
                             > (ssObject.raidArg + addPlanet))}"/>
            
            <s:Group top="25" left="20" right="30">
               <s:Label fontSize="12" fontWeight="bold" 
                  text="{getPlanetCountLabel(
                     ssObject, ssObject.raidArg,
                     ssObject.nextRaidEvent,
                     ML.latestGalaxy.apocalypseStartEvent,
                     addPlanet)}"
                  left="0" right="0" textAlign="center"/>
            </s:Group>
            
            <s:DataGroup left="7" top="40" bottom="30"
               itemRenderer="components.unit.IRRaidUnitEntry"
               dataProvider="{MPlanet.getRaiders(
                  ssObject.apocalypseWillBeStartedBeforeRaid
                        ? addPlanet
                        : ssObject.raidArg + addPlanet,
                  ssObject.nextRaidEvent,
                  ssObject.inBattleground || ssObject.inMiniBattleground,
                  ML.latestGalaxy.apocalypseStartEvent
               )}">
               <s:layout>
                  <s:TileLayout requestedColumnCount="4"/>
               </s:layout>
            </s:DataGroup>
         </s:Group>
      </s:Group>
      <s:Group id="barGroup"
               rollOver="{shorten.stop(); widen.play([infoPanel])}"
               rollOut="{widen.stop(); shorten.play([infoPanel])}" >
         <battle:DarkBackground width="{raidLabel.width+6}" left="3" height="{raidLabel.height+4}"/>
         <base:ImageAndLabel left="6" bottom="1" type="{ResourceType.RAID_TIME}" userLargeIcon="true"
                             textToDisplay="{ssObject.raidTime}"
                             id="raidLabel"/>
      </s:Group>
      <s:layout>
         <s:VerticalLayout gap="1" paddingBottom="3"/>
      </s:layout>
   </s:Group>
</base:BaseContainer>

