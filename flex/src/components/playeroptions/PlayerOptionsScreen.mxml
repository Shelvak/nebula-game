<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:screens="components.screens.*"
         xmlns:base="components.base.*"
         width="100%" height="100%">
   <fx:Library>
      <fx:Definition name="VerticalSectionLayout">
         <s:VerticalLayout horizontalAlign="justify" gap="10"
                           paddingTop="10" paddingBottom="10" paddingLeft="10"/>
      </fx:Definition>
   </fx:Library>
   <fx:Script>
      <![CDATA[
      import components.popups.ActionConfirmationPopUp;

      import controllers.playeroptions.PlayerOptionsCommand;
      import controllers.ui.NavigationController;

      import models.player.PlayerOptions;

      import models.player.PlayerOptions;

      import mx.collections.ArrayCollection;
      import mx.events.FlexEvent;

      import utils.locale.Localizer;


      private var NC: NavigationController = NavigationController.getInstance();

      private function getString(prop: String): String {
         return Localizer.string('PlayerOptions', prop);
      }

      private function saveClickHandler(e: MouseEvent): void {
         new PlayerOptionsCommand(PlayerOptionsCommand.SET).dispatch();
      }

      private function inpIgnoredPlayer_enterHandler(event: FlexEvent): void {
         if (inpIgnoredPlayer.text.length > 0
                && PlayerOptions.ignoredPlayersDataProvider.getItemIndex(
            inpIgnoredPlayer.text) == -1) {
            addIgnored();
         }
      }

      private function addIgnored(): void {
         PlayerOptions.addIgnoredPlayer(inpIgnoredPlayer.text);
         inpIgnoredPlayer.text = ''
      }

      private function getPopupText(prop: String,
                                    params: Array = null): String {
         return Localizer.string('Popups', prop, params);
      }

      private function screenCloseButton1_clickHandler(event: MouseEvent): void {
         if (!PlayerOptions.hasChanges) {
            NC.showPreviousScreen();
         }
         else {
            var popUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
            popUp.confirmButtonLabel = getPopupText('label.yes');
            popUp.cancelButtonLabel = getPopupText('label.no');
            var lbl: Label = new Label();
            lbl.minWidth = 300;
            lbl.text = getPopupText('message.cancelPlayerOptions');
            popUp.addElement(lbl);
            popUp.title = getPopupText('title.cancelPlayerOptions');
            popUp.confirmButtonClickHandler = function (button: Button = null): void {
               PlayerOptions.cancelChanges();
               NC.showPreviousScreen();
            };
            popUp.show();
         }
      }

      private function enablePlanetAnimations_clickHandler(event: MouseEvent): void {
         PlayerOptions.enablePlanetAnimations = !PlayerOptions.enablePlanetAnimations;
         PlayerOptions.changed();
      }
      ]]>
   </fx:Script>
   <fx:Declarations>
     <s:RadioButtonGroup id="ignoreType" selectedValue="{PlayerOptions.chatIgnoreType}"
       change="PlayerOptions.chatIgnoreType = String(ignoreType.selectedValue);
               PlayerOptions.changed();"/>
   </fx:Declarations>
   <base:Panel skinClass="components.skins.LargePanelSkin"
               title="{getString('title.options')}" width="900" horizontalCenter="0">
      <base:layout>
         <s:VerticalLayout horizontalAlign="justify" paddingLeft="6"/>
      </base:layout>
      <base:Heading1 text="{getString('title.genericOptions')}"/>
      <s:Group>
         <s:layout><fx:VerticalSectionLayout/></s:layout>
         <s:CheckBox id="warnBeforeUnload"
                     label="{getString('label.warnBeforeUnload')}"
                     selected="{PlayerOptions.warnBeforeUnload}"
                     click="PlayerOptions.warnBeforeUnload = !PlayerOptions.warnBeforeUnload;
                     PlayerOptions.changed()"/>
      </s:Group>
      <base:Heading1 text="{getString('title.afterLoginOptions')}"/>
      <s:Group>
         <s:layout><fx:VerticalSectionLayout/></s:layout>
         <s:CheckBox id="showPopups" label="{getString('label.showPopupsAfterLogin')}"
                     selected="{PlayerOptions.showPopupsAfterLogin}"
                     click="PlayerOptions.showPopupsAfterLogin = !PlayerOptions.showPopupsAfterLogin;
                     PlayerOptions.changed()"/>
         <s:CheckBox id="openPlanet" label="{getString('label.openFirstPlanet')}"
                     selected="{PlayerOptions.openFirstPlanetAfterLogin}"
                     click="PlayerOptions.openFirstPlanetAfterLogin = !PlayerOptions.openFirstPlanetAfterLogin;
                     PlayerOptions.changed()"/>
      </s:Group>
      <base:Heading1 text="{getString('title.chatOptions')}"/>
      <s:Group>
         <s:Group width="50%">
            <s:CheckBox id="showJoinLeave" label="{getString('label.showJoinLeave')}"
                        selected="{PlayerOptions.chatShowJoinLeave}"
                        click="PlayerOptions.chatShowJoinLeave = !PlayerOptions.chatShowJoinLeave;
                            PlayerOptions.changed()"/>
            <s:Label text="{getString('label.ignoredList')}" paddingTop="6"/>

            <s:Group>
              <s:TextInput width="200" id="inpIgnoredPlayer"
                enter="inpIgnoredPlayer_enterHandler(event)"/>
              <s:Button label="{getString('label.addIgnoredPlayer')}"
                enabled="{inpIgnoredPlayer.text.length > 0
                &amp;&amp;
                  PlayerOptions.ignoredPlayersDataProvider.getItemIndex(
                    inpIgnoredPlayer.text) == -1}"
                click="{addIgnored()}"/>
              <s:layout>
                <s:HorizontalLayout/>
              </s:layout>
            </s:Group>
            <s:Label text="{getString('label.ignoreType')}" paddingTop="6"/>
            <s:Group>
              <s:RadioButton id="ignoreFull" group="{ignoreType}"
                             label="{getString('label.ignoreComplete')}"
                             value="{PlayerOptions.IGNORE_TYPE_COMPLETE}"
                             skinClass="components.skins.RadioButtonSkin"/>
              <s:RadioButton id="ignoreHalf" group="{ignoreType}"
                             label="{getString('label.ignoreFiltered')}"
                             value="{PlayerOptions.IGNORE_TYPE_FILTERED}"
                             skinClass="components.skins.RadioButtonSkin"/>
              <s:layout>
                <s:HorizontalLayout paddingLeft="15"/>
              </s:layout>
            </s:Group>
            <s:layout>
               <s:VerticalLayout paddingTop="10"
                                 paddingBottom="10"
                                 gap="10" paddingLeft="10"/>
            </s:layout>
         </s:Group>
         <s:Group width="50%" height="160">
            <base:Scroller id="scroller" left="0" right="0" top="6" bottom="9"
                           stepMultiplier="15">
               <s:Group>
                  <s:DataGroup dataProvider="{PlayerOptions.ignoredPlayersDataProvider}"
                          maxWidth="250">
                    <s:itemRenderer><fx:Component>
                      <s:ItemRenderer autoDrawBackground="false" width="100%">
                        <s:Label text="{data}" width="100%" maxDisplayedLines="1"
                                 showTruncationTip="true"/>
                        <s:Button label="{Localizer.string('PlayerOptions', 'label.removeIgnored')}"
                                  click="{PlayerOptions.removeIgnoredPlayer(String(data))}"/>
                        <s:layout><s:HorizontalLayout verticalAlign="middle"/></s:layout>
                        <fx:Script><![CDATA[
                          import models.player.PlayerOptions;

                          import utils.locale.Localizer;
                          ]]></fx:Script>
                      </s:ItemRenderer>
                    </fx:Component></s:itemRenderer>
                    <s:layout>
                      <s:VerticalLayout paddingLeft="15"/>
                    </s:layout>
                  </s:DataGroup>
                  <s:Label color="#eec500" text="{getString('label.ignoredListEmpty')}"
                           visible="{PlayerOptions.ignoredPlayersDataProvider.length == 0}"
                           includeInLayout="{
                                PlayerOptions.ignoredPlayersDataProvider.length == 0}"/>
               </s:Group>
            </base:Scroller>
         </s:Group>
         <s:layout>
            <s:HorizontalLayout/>
         </s:layout>
      </s:Group>
      <base:Heading1 text="{getString('title.graphicsOptions')}"/>
      <s:Group>
         <s:layout><fx:VerticalSectionLayout/></s:layout>
         <s:CheckBox id="enablePlanetAnimations"
                     label="{getString('label.enablePlanetAnimations')}"
                     selected="{PlayerOptions.enablePlanetAnimations}"
                     click="enablePlanetAnimations_clickHandler(event)"/>
      </s:Group>
      <s:Group>
         <s:Button skinClass="components.skins.GreenButtonSkin"
                   label="{getString('label.save')}"
                   enabled="{PlayerOptions.hasChanges}"
                   click="saveClickHandler(event)"
                   horizontalCenter="0"/>
      </s:Group>
   </base:Panel>
   <screens:ScreenCloseButton label="{Localizer.string('Players', 'label.close')}"
                              click="screenCloseButton1_clickHandler(event)"
                              right="0" bottom="0"/>
</s:Group>