<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:screens="components.screens.*"
         xmlns:base="components.base.*"
         xmlns:playeroptions="components.playeroptions.*"
         width="100%" height="100%"
         creationComplete="creationCompleteHandler(event)">
   <fx:Library>
      <fx:Definition name="VerticalSectionLayout">
         <s:VerticalLayout horizontalAlign="justify" gap="10"
                           paddingTop="10" paddingBottom="10" paddingLeft="10"/>
      </fx:Definition>
   </fx:Library>
   <fx:Script>
      <![CDATA[
     import components.popups.ActionConfirmationPopUp;

     import controllers.playeroptions.PlayerOptionsCommand;
     import controllers.sounds.SoundsController;
     import controllers.ui.NavigationController;


     import models.player.PlayerOptions;
     import models.player.PlayerSoundOption;
     import models.sound.MSound;

     import mx.core.LayoutDirection;

     import mx.events.FlexEvent;

     import utils.locale.Localizer;


     private var NC: NavigationController = NavigationController.getInstance();

     private function getString(prop: String): String {
       return Localizer.string('PlayerOptions', prop);
     }

     private function saveClickHandler(e: MouseEvent): void {
       new PlayerOptionsCommand(PlayerOptionsCommand.SET).dispatch();
     }

     private function inpIgnoredPlayer_enterHandler(event: FlexEvent): void {
       if (inpIgnoredPlayer.text.length > 0
         && PlayerOptions.ignoredPlayersDataProvider.getItemIndex(inpIgnoredPlayer.text) == -1) {
         addIgnored();
       }
     }

     private function addIgnored(): void {
       PlayerOptions.addIgnoredPlayer(inpIgnoredPlayer.text);
       inpIgnoredPlayer.text = ''
     }

     private function getPopupText(prop: String, params: Array = null): String {
       return Localizer.string('Popups', prop, params);
     }

     private function screenCloseButton1_clickHandler(event: MouseEvent): void {
       if (!PlayerOptions.hasChanges) {
         NC.showPreviousScreen();
       }
       else {
         var popUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         popUp.confirmButtonLabel = getPopupText('label.yes');
         popUp.cancelButtonLabel = getPopupText('label.no');
         var lbl: Label = new Label();
         lbl.minWidth = 300;
         lbl.text = getPopupText('message.cancelPlayerOptions');
         popUp.addElement(lbl);
         popUp.title = getPopupText('title.cancelPlayerOptions');
         popUp.confirmButtonClickHandler = function (button: Button = null): void {
           PlayerOptions.cancelChanges();
           NC.showPreviousScreen();
         };
         popUp.show();
       }
     }

     private function chkPlanetAnimations_clickHandler(event: MouseEvent): void {
       PlayerOptions.enablePlanetAnimations = !PlayerOptions.enablePlanetAnimations;
       PlayerOptions.changed();
     }

     private function chkWormholeIcons_clickHandler(event: MouseEvent): void {
       PlayerOptions.showWormholeIcons = !PlayerOptions.showWormholeIcons;
       PlayerOptions.changed();
     }

     private function creationCompleteHandler(event: FlexEvent): void {
       actionEventsTime.textDisplay.editable = false;
       notificationEventsTime.textDisplay.editable = false;
     }
     ]]>
   </fx:Script>
   <fx:Declarations>
     <s:RadioButtonGroup id="ignoreType" selectedValue="{PlayerOptions.chatIgnoreType}"
       change="PlayerOptions.chatIgnoreType = String(ignoreType.selectedValue);
               PlayerOptions.changed();"/>
      <s:RadioButtonGroup id="defaultTransporterTab" selectedValue="{PlayerOptions.defaultTransporterTab}"
        change="PlayerOptions.defaultTransporterTab = int(defaultTransporterTab.selectedValue);
                PlayerOptions.changed();"/>
      <s:RadioButtonGroup id="sortTypeGroup" selectedValue="{PlayerOptions.technologiesSortType}"
        change="PlayerOptions.technologiesSortType = int(sortTypeGroup.selectedValue);
                PlayerOptions.changed();"/>
   </fx:Declarations>
   <s:Group left="0" right="0" top="0" bottom="0">
      <base:Scroller id="mainScroller" left="0" right="0" top="0" bottom="0"
            stepMultiplier="5">
         <s:Group left="0" right="0">
            <base:Panel skinClass="components.skins.LargePanelSkin"
                        title="{getString('title.options')}" width="900" horizontalCenter="0">
               <base:layout>
                  <s:VerticalLayout horizontalAlign="justify" paddingLeft="6"/>
               </base:layout>
               <base:Heading1 text="{getString('title.genericOptions')}"/>
               <s:Group>
                  <s:layout><fx:VerticalSectionLayout/></s:layout>
                  <s:CheckBox id="warnBeforeUnload"
                              label="{getString('label.warnBeforeUnload')}"
                              selected="{PlayerOptions.warnBeforeUnload}"
                              click="PlayerOptions.warnBeforeUnload = !PlayerOptions.warnBeforeUnload;
                              PlayerOptions.changed()"/>
                  <s:Label text="{getString('label.eventsOptions')}"/>
                  <s:Group>
                     <s:layout>
                       <s:HorizontalLayout verticalAlign="middle" paddingLeft="15"/>
                     </s:layout>
                     <s:Label text="{getString('label.actionEventTime')}"/>
                     <s:NumericStepper id="actionEventsTime"
                                    value="{PlayerOptions.actionEventTime}"
                                    change="
                                      PlayerOptions.actionEventTime = actionEventsTime.value;
                                      PlayerOptions.changed()
                                    "
                                    minimum="{PlayerOptions.MIN_EVENT_SHOW_TIME}"
                                    focusEnabled="false" snapInterval="1"

                                    maximum="{PlayerOptions.MAX_EVENT_SHOW_TIME}"
                                    width="50" textAlign="right"/>
                     <s:Label text="{Localizer.string('General', 'second.short')}"
                              paddingRight="10"/>


                     <s:Label text="{getString('label.notificationEventTime')}"/>
                     <s:NumericStepper id="notificationEventsTime"
                                   value="{PlayerOptions.notificationEventTime}"
                                   change="
                                     PlayerOptions.notificationEventTime = notificationEventsTime.value;
                                     PlayerOptions.changed()
                                   "
                                   minimum="{PlayerOptions.MIN_EVENT_SHOW_TIME}"
                                   focusEnabled="false" snapInterval="1"
                                   maximum="{PlayerOptions.MAX_EVENT_SHOW_TIME}"
                                   width="50" textAlign="right"/>
                     <s:Label text="{Localizer.string('General', 'second.short')}"
                              paddingRight="10"/>

                     <s:CheckBox id="showInfoEvents"
                                label="{getString('label.showInfoEvents')}"
                                selected="{PlayerOptions.showInfoEvents}"
                                click="PlayerOptions.showInfoEvents = !PlayerOptions.showInfoEvents;
                                PlayerOptions.changed()"
                                layoutDirection="{LayoutDirection.RTL}"/>
                  </s:Group>
                  <s:Label text="{getString('label.defaultTransporterTab')}" paddingTop="6"/>
                  <s:Group>
                    <s:RadioButton id="transporterResources" group="{defaultTransporterTab}"
                                   label="{getString('label.transporterTabResources')}"
                                   value="{PlayerOptions.TRANSPORTER_TAB_RESOURCES}"
                                   skinClass="components.skins.RadioButtonSkin"/>
                    <s:RadioButton id="transporterUnits" group="{defaultTransporterTab}"
                                   label="{getString('label.transporterTabUnits')}"
                                   value="{PlayerOptions.TRANSPORTER_TAB_UNITS}"
                                   skinClass="components.skins.RadioButtonSkin"/>
                    <s:layout>
                      <s:HorizontalLayout paddingLeft="15"/>
                    </s:layout>
                  </s:Group>

                  <s:Label text="{getString('label.technologiesSortType')}" paddingTop="6"/>
                  <s:Group>
                     <s:RadioButton label="{getString('label.techSortScientists')}"
                             value="{PlayerOptions.TECH_SORT_TYPE_SCIENTISTS}"
                             group="{sortTypeGroup}"
                             skinClass="components.skins.RadioButtonSkin"/>
                     <s:RadioButton label="{getString('label.techSortTime')}"
                             value="{PlayerOptions.TECH_SORT_TYPE_TIME}"
                             group="{sortTypeGroup}"
                             skinClass="components.skins.RadioButtonSkin"/>
                     <s:layout>
                       <s:HorizontalLayout paddingLeft="15"/>
                     </s:layout>
                  </s:Group>
               </s:Group>
               <base:Heading1 text="{getString('title.afterLoginOptions')}"/>
               <s:Group>
                  <s:layout><fx:VerticalSectionLayout/></s:layout>
                  <s:CheckBox id="showPopups" label="{getString('label.showPopupsAfterLogin')}"
                              selected="{PlayerOptions.showPopupsAfterLogin}"
                              click="PlayerOptions.showPopupsAfterLogin = !PlayerOptions.showPopupsAfterLogin;
                              PlayerOptions.changed()"/>
                  <s:CheckBox id="openPlanet" label="{getString('label.openFirstPlanet')}"
                              selected="{PlayerOptions.openFirstPlanetAfterLogin}"
                              click="PlayerOptions.openFirstPlanetAfterLogin = !PlayerOptions.openFirstPlanetAfterLogin;
                              PlayerOptions.changed()"/>
               </s:Group>
               <base:Heading1 text="{getString('title.chatOptions')}"/>
               <s:Group>
                  <s:Group width="50%">
                     <s:CheckBox id="showJoinLeave" label="{getString('label.showJoinLeave')}"
                                 selected="{PlayerOptions.chatShowJoinLeave}"
                                 click="PlayerOptions.chatShowJoinLeave = !PlayerOptions.chatShowJoinLeave;
                                     PlayerOptions.changed()"/>
                     <s:Label text="{getString('label.ignoredList')}" paddingTop="6"/>

                     <s:Group>
                       <s:TextInput width="200" id="inpIgnoredPlayer"
                         enter="inpIgnoredPlayer_enterHandler(event)"/>
                       <s:Button label="{getString('label.addIgnoredPlayer')}"
                         enabled="{inpIgnoredPlayer.text.length > 0
                         &amp;&amp;
                           PlayerOptions.ignoredPlayersDataProvider.getItemIndex(
                             inpIgnoredPlayer.text) == -1}"
                         click="{addIgnored()}"/>
                       <s:layout>
                         <s:HorizontalLayout/>
                       </s:layout>
                     </s:Group>
                     <s:Label text="{getString('label.ignoreType')}" paddingTop="6"/>
                     <s:Group>
                       <s:RadioButton id="ignoreFull" group="{ignoreType}"
                                      label="{getString('label.ignoreComplete')}"
                                      value="{PlayerOptions.IGNORE_TYPE_COMPLETE}"
                                      skinClass="components.skins.RadioButtonSkin"/>
                       <s:RadioButton id="ignoreHalf" group="{ignoreType}"
                                      label="{getString('label.ignoreFiltered')}"
                                      value="{PlayerOptions.IGNORE_TYPE_FILTERED}"
                                      skinClass="components.skins.RadioButtonSkin"/>
                       <s:layout>
                         <s:HorizontalLayout paddingLeft="15"/>
                       </s:layout>
                     </s:Group>
                     <s:layout>
                        <s:VerticalLayout paddingTop="10"
                                          paddingBottom="10"
                                          gap="10" paddingLeft="10"/>
                     </s:layout>
                  </s:Group>
                  <s:Group width="50%" height="160">
                     <base:Scroller id="scroller" left="0" right="0" top="6" bottom="9"
                                    stepMultiplier="15">
                        <s:Group>
                           <s:DataGroup dataProvider="{PlayerOptions.ignoredPlayersDataProvider}"
                                   maxWidth="250">
                             <s:itemRenderer><fx:Component>
                               <s:ItemRenderer autoDrawBackground="false" width="100%">
                                 <s:Label text="{data}" width="100%" maxDisplayedLines="1"
                                          showTruncationTip="true"/>
                                 <s:Button label="{Localizer.string('PlayerOptions', 'label.removeIgnored')}"
                                           click="{PlayerOptions.removeIgnoredPlayer(String(data))}"/>
                                 <s:layout><s:HorizontalLayout verticalAlign="middle"/></s:layout>
                                 <fx:Script><![CDATA[
                                   import models.player.PlayerOptions;

                                   import utils.locale.Localizer;
                                   ]]></fx:Script>
                               </s:ItemRenderer>
                             </fx:Component></s:itemRenderer>
                             <s:layout>
                               <s:VerticalLayout paddingLeft="15"/>
                             </s:layout>
                           </s:DataGroup>
                           <s:Label color="#eec500" text="{getString('label.ignoredListEmpty')}"
                                    visible="{PlayerOptions.ignoredPlayersDataProvider.length == 0}"
                                    includeInLayout="{
                                         PlayerOptions.ignoredPlayersDataProvider.length == 0}"/>
                        </s:Group>
                     </base:Scroller>
                  </s:Group>
                  <s:layout>
                     <s:HorizontalLayout/>
                  </s:layout>
               </s:Group>
               <base:Heading1 text="{getString('title.graphicsOptions')}"/>
               <s:Group>
                  <s:layout><fx:VerticalSectionLayout/></s:layout>
                  <s:CheckBox label="{getString('label.enablePlanetAnimations')}"
                              selected="{PlayerOptions.enablePlanetAnimations}"
                              click="chkPlanetAnimations_clickHandler(event)"/>
                  <s:CheckBox label="{getString('label.showWormholeIcons')}"
                              selected="{PlayerOptions.showWormholeIcons}"
                              click="chkWormholeIcons_clickHandler(event)"/>
               </s:Group>
              <base:Heading1 text="{getString('title.soundOptions')}"/>
              <s:Group>
                 <s:layout><fx:VerticalSectionLayout/></s:layout>
                 <s:Group>
                   <s:Label text="{getString('label.soundForNotification')}"
                            minWidth="180"/>
                   <s:DropDownList
                      dataProvider="{PlayerOptions.notificationSounds()}"
                      id="soundForNotification"
                      minWidth="180"
                      selectedIndex="{PlayerOptions.notificationSoundIndex(
                         PlayerOptions.soundForNotification
                      )}"
                      change="PlayerOptions.soundForNotification =
                         PlayerSoundOption(soundForNotification.selectedItem).name;
                         PlayerOptions.changed()"
                      labelField="name"/>
                   <playeroptions:SoundPlayButton
                      dropDown="{soundForNotification}" />
                   <s:layout>
                      <s:HorizontalLayout paddingLeft="15" verticalAlign="middle"/>
                   </s:layout>
                 </s:Group>
                 <s:Group>
                    <s:Label text="{getString('label.soundForAllianceMsg')}"
                             minWidth="180"/>
                   <s:DropDownList
                      dataProvider="{PlayerOptions.notificationSounds()}"
                      id="soundForAllianceMsg"
                      minWidth="180"
                      selectedIndex="{PlayerOptions.notificationSoundIndex(
                         PlayerOptions.soundForAllianceMsg
                      )}"
                      change="PlayerOptions.soundForAllianceMsg =
                         PlayerSoundOption(soundForAllianceMsg.selectedItem).name;
                         PlayerOptions.changed()"
                      labelField="name"/>
                   <playeroptions:SoundPlayButton
                      dropDown="{soundForAllianceMsg}" />
                   <s:layout>
                      <s:HorizontalLayout paddingLeft="15" verticalAlign="middle"/>
                   </s:layout>
                 </s:Group>
                 <s:Group>
                    <s:Label text="{getString('label.soundForPrivateMsg')}"
                       minWidth="180"/>
                   <s:DropDownList
                      dataProvider="{PlayerOptions.notificationSounds()}"
                      id="soundForPrivateMsg"
                      minWidth="180"
                      selectedIndex="{PlayerOptions.notificationSoundIndex(
                         PlayerOptions.soundForPrivateMsg
                      )}"
                      change="PlayerOptions.soundForPrivateMsg =
                         PlayerSoundOption(soundForPrivateMsg.selectedItem).name;
                         PlayerOptions.changed()"
                      labelField="name"/>
                   <playeroptions:SoundPlayButton
                      dropDown="{soundForPrivateMsg}" />
                   <s:layout>
                      <s:HorizontalLayout paddingLeft="15" verticalAlign="middle"/>
                   </s:layout>
                 </s:Group>
              </s:Group>
              <s:Group>
                 <s:Button skinClass="components.skins.GreenButtonSkin"
                           label="{getString('label.save')}"
                           enabled="{PlayerOptions.hasChanges}"
                           click="saveClickHandler(event)"
                           horizontalCenter="0"/>
              </s:Group>
            </base:Panel>
         </s:Group>
      </base:Scroller>
   </s:Group>
   <screens:ScreenCloseButton label="{Localizer.string('Players', 'label.close')}"
                              click="screenCloseButton1_clickHandler(event)"
                              right="0" bottom="0" scroller="{mainScroller}"/>
</s:Group>