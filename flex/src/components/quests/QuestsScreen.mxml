<?xml version="1.0" encoding="utf-8"?>
<screen:ListScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
                       xmlns:s="library://ns.adobe.com/flex/spark" 
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:screen="components.base.screen.*"
                       xmlns:quests="components.quests.*"
                       initialize="this_initializeHandler(event)">
   <fx:Declarations>
      <quests:QuestsList id="_list" scrollRequested="list_scrollRequestedHandler(event)"
                         skinClass="components.skins.ListNonScrollableSkin"
                         borderVisible="false" contentBackgroundAlpha="0"/>
      <s:Group id="_controlButtons">
         <s:ButtonBar id="_barFilterButtons" requireSelection="true" focusEnabled="false"
                      change="barFilterButtons_changeHandler(event)"/>
      </s:Group>
      <s:Group id="_colorLegend">
         <s:Label text="{getString('label.completedColor')}"    color="{IRQuest.TEXT_COLOR_COMPLETED}"/>
         <s:Label text="{getString('label.notCompletedColor')}" color="{IRQuest.TEXT_COLOR_STARTED}"/>
      </s:Group>
   </fx:Declarations>
   <fx:Binding source="_barFilterButtons.selectedIndex == 0" destination="colorLegendVisible"/>
   <fx:Binding source="ML.quests.isEmpty" destination="headerFromListSeparatorVisible"/>
   <fx:Script>
      <![CDATA[
         import components.base.screen.ItemRendererBase;
         
         import models.ModelLocator;
         import models.quest.events.QuestCollectionEvent;
         import models.quest.events.QuestEvent;
         
         import mx.collections.ArrayCollection;
         import mx.collections.IList;
         import mx.core.IVisualElement;
         import mx.events.FlexEvent;
         
         import spark.components.Group;
         import spark.events.IndexChangeEvent;
         
         import utils.locale.Localizer;
         
         
         private static function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Quests", property, parameters);
         }
         
         
         private function barFilterButtons_changeHandler(event:IndexChangeEvent) : void {
            _filterFunctions.getItemAt(event.newIndex).apply();
         }
         
         private function list_scrollRequestedHandler(event:QuestEvent) : void {
            grpListContainer.verticalScrollPosition = event.index * ItemRendererBase.HEIGHT_NORMAL;
         }
         
         private function this_initializeHandler(event:FlexEvent) : void {
            ML.quests.addEventListener(QuestCollectionEvent.FILTER, updateButtonState, false, 0, true);
            ML.quests.addEventListener(QuestCollectionEvent.COUNTERS_UPDATED, refreshCounters, false, 0, true);
            _barFilterButtons.dataProvider = _filterFunctions;
         }
         
         private function updateButtonState(event:QuestCollectionEvent) : void {
            if (_barFilterButtons.selectedIndex != ML.quests.selectedFilter)
               _barFilterButtons.selectedIndex = ML.quests.selectedFilter;
         }
         
         private function refreshCounters(event:QuestCollectionEvent) : void {
            var current:Object = _filterFunctions.getItemAt(0);
            current["label"] = getString("label.current", [ML.quests.currentTotal]);
            _filterFunctions.setItemAt(current, 0);
            var completed:Object = _filterFunctions.getItemAt(1);
            completed["label"] = getString("label.completed", [ML.quests.completedTotal]);
            _filterFunctions.setItemAt(completed, 1);
         }
         
         
         private const _filterFunctions:ArrayCollection = new ArrayCollection([
            {"apply": filterCurrentQuests,   "label": getString("label.current",   [ML.quests.currentTotal])},
            {"apply": filterCompletedQuests, "label": getString("label.completed", [ML.quests.completedTotal])}
         ]);
         
         private function filterCurrentQuests() : void {
            ML.quests.applyCompletedFilter(false);
         }
         
         private function filterCompletedQuests() : void {
            ML.quests.applyCompletedFilter(true);
         }
         
         
         protected override function get screenTitle() : String {
            return getString("label.title");
         }
         
         protected override function get emptyListMessage() : String {
            return getString("label.noQuests");
         }
         
         protected override function get dataProvider() : IList {
            return ML.quests;
         }
         
         protected override function get dataContainer() : IVisualElement {
            return _list;
         }
         
         protected override function get controlButtons():Group {
            return _controlButtons;
         }
         
         protected override function get colorLegend() : Group {
            return _colorLegend;
         }
      ]]>
   </fx:Script>
</screen:ListScreen>
