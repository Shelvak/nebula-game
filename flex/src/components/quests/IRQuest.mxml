<?xml version="1.0" encoding="utf-8"?>
<screen:ItemRendererBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                         xmlns:s="library://ns.adobe.com/flex/spark"
                         xmlns:base="components.base.*"
                         xmlns:screen="components.base.screen.*"
                         xmlns:quests="components.quests.*"
                         addedToStage="this_addedToStageHandler(event)"
                         removedFromStage="this_removedFromStageHandler(event)">
   <fx:Declarations>
      <s:Group id="_headerLeftContent">
         <s:Label id="lblTitle" text="{title}" left="5" top="10" color="{textColor}"/>
      </s:Group>
      <s:Group id="_headerRrightContent">
         <s:Label id="lblProgress" color="{textColor}" right="5" top="10" text="{progress}"/>
      </s:Group>
      <s:Group id="_contentGroup">
         <s:layout>
            <s:VerticalLayout horizontalAlign="justify"/>
         </s:layout>
         <s:Group>
            <s:BitmapImage source="{getImage(AssetNames.UI_IMAGES_FOLDER + 'quest_advisor')}"/>

            <quests:CQuestInfo quest="{quest}" limitSize="false" width="100%"/>
            
            <s:layout>
               <s:HorizontalLayout gap="20" paddingTop="12" paddingLeft="22" paddingRight="18" 
                                   paddingBottom="18"/>
            </s:layout>
         </s:Group>
         <base:AdvancedContainer visible="{ML.player.planetsCount > 0
                  || ML.player.bgPlanetsCount > 0}"
           includeInLayout="{ML.player.planetsCount > 0
                  || ML.player.bgPlanetsCount > 0}">
            <base:layout>
               <s:VerticalLayout horizontalAlign="center"/>
            </base:layout>
            <s:Group visible="{completed}">
               <s:Label text="{getString('label.choosePlanet')}" styleName="h3"/>
               <base:PlanetSelector id="planetSelector" minWidth="180" dataProvider="{ML.player.planets}"
                                    itemRenderer="components.planet.IRPlayerPlanet"
                                    change="planetSelector_changeHandler(event)"/>
               <s:layout>
                  <s:HorizontalLayout/>
               </s:layout>
            </s:Group>
            
            <base:Warning text="{getString('warning.wontFit', [notFitting])}"
                          visible="{notFitting != null &amp;&amp; completed}"/>
            
            <base:Warning text="{getString('warning.cantClaimReward')}"
                          visible="{completed &amp;&amp;
                          ML.player.population >= ML.player.populationMax &amp;&amp;
                          quest.rewards.units.length > 0}"/>
            
            <s:Button label="{getString('label.claimReward')}" 
                      click="btnClaim_clickHandler(event)"
                      visible="{completed &amp;&amp;
                      (ML.player.population &lt; ML.player.populationMax ||
                      quest.rewards.units.length == 0)}"
                      skinClass="components.skins.GreenButtonSkin"/>
            
            <s:Button label="{getString('label.tutorial')}" 
                      click="btnTutorial_clickHandler(event)"
                      visible="{quest.isMainQuest}"
                      skinClass="components.skins.YellowButtonSkin"/>
         </base:AdvancedContainer>
         
      </s:Group>
   </fx:Declarations>
   <fx:Binding source="itemIndex == ML.quests.length - 1" destination="bottomLineVisible"/>
   <fx:Binding source="itemIndex == 0" destination="firstItem"/>
   <fx:Binding source="Quest(data).title" destination="title"/>
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import controllers.Messenger;
      import controllers.quests.QuestsCommand;

      import globalevents.GQuestEvent;
      import globalevents.GlobalEvent;

      import models.ModelLocator;
      import models.quest.MMainQuestLine;
      import models.quest.Quest;
      import models.quest.events.QuestEvent;
      import models.resource.Resource;
      import models.solarsystem.MSSObject;

      import spark.events.IndexChangeEvent;

      import utils.assets.AssetNames;
      import utils.assets.ImagePreloader;
      import utils.locale.Localizer;


      private static function get ML(): ModelLocator {
         return ModelLocator.getInstance();
      }

      private function getImage(name: String): BitmapData {
         return ImagePreloader.getInstance().getImage(name);
      }

      private function getString(property: String,
                                 parameters: Array = null): String {
         return Localizer.string("Quests", property, parameters);
      }


      internal static const TEXT_COLOR_STARTED: uint = 0xFFFFFF;
      internal static const TEXT_COLOR_COMPLETED: uint = 0xEEC500;
      internal static const TEXT_COLOR_REWARD_CLAIMED: uint = 0x11FF11;

      [Bindable]
      private var textColor: uint = TEXT_COLOR_REWARD_CLAIMED;

      protected override function get contentGroup(): Group {
         return _contentGroup;
      }

      protected override function get headerLeftContent(): Group {
         return _headerLeftContent;
      }

      protected override function get headerRightContent(): Group {
         return _headerRrightContent;
      }


      [Bindable (event="questChanged")]
      /**
       * Typed alias of <code>data</code> property.
       */
      public function get quest(): Quest {
         return Quest(data);
      }

      [Bindable]
      private var title: String;

      [Bindable]
      private var progress: String;

      [Bindable]
      private var completed: Boolean;

      protected override function dataCommit(oldValue: Object,
                                             newValue: Object): void {
         var quest: Quest;
         if (oldValue != null) {
            quest = Quest(oldValue);
            quest.removeEventListener(QuestEvent.STATUS_CHANGE,
                                      quest_statusChange);
            quest.removeEventListener(QuestEvent.REFRESH_REQUESTED,
                                      refreshQuest);
         }
         if (newValue != null) {
            quest = Quest(newValue);
            quest.addEventListener(QuestEvent.STATUS_CHANGE,
                                   quest_statusChange);
            quest.addEventListener(QuestEvent.REFRESH_REQUESTED, refreshQuest);
            refreshTitle();
         }
         refreshNotFitting();
         setTextColor();
      }

      private function refreshTitle(event: Event = null): void {
         if (quest) {
            title = quest.title;
            progress = getString('label.progress',
                                 [quest.completed, quest.objectives.length]);
            completed = (quest.status == Quest.STATUS_COMPLETED);
            ML.quests.applyCurrentFilter();
         }
      }

      private function setTextColor(): void {
         if (data != null) {
            if (quest.status == Quest.STATUS_STARTED) {
               textColor = TEXT_COLOR_STARTED;
            }
            else if (quest.status == Quest.STATUS_COMPLETED) {
               textColor = TEXT_COLOR_COMPLETED;
            }
            else {
               textColor = TEXT_COLOR_REWARD_CLAIMED;
            }
         }
      }

      private function quest_statusChange(event: QuestEvent): void {
         setTextColor();
         refreshTitle();
      }


      /* ###################### */
      /* ### EVENT HANDLERS ### */
      /* ###################### */

      protected override function btnClose_clickHandler(event: MouseEvent): void {
         ML.quests.deselect();
      }

      private function refreshQuest(event: QuestEvent): void {
         dispatchEvent(new Event("questChanged"));
      }

      private function btnTutorial_clickHandler(event: MouseEvent): void {
         MMainQuestLine.getInstance().open(quest);
      }

      private function btnClaim_clickHandler(event: MouseEvent): void {
         EventBroker.subscribe(GQuestEvent.CLAIM_APROVED, approveClaim);
         new QuestsCommand(
            QuestsCommand.CLAIM_REWARDS,
            {"planetId": MSSObject(planetSelector.selectedItem).id,
               "id": quest.id}
         ).dispatch();
      }

      private function approveClaim(event: GQuestEvent): void {
         Messenger.show(
            getString('message.rewardClaimed',
                      [MSSObject(planetSelector.selectedItem).name]),
            Messenger.MEDIUM
         );
         EventBroker.unsubscribe(GQuestEvent.CLAIM_APROVED, approveClaim);
         refreshNotFitting();
      }

      [Bindable]
      private var notFitting: String = null;

      private var missingStorages: Array = [];
      private var missingAmounts: Array = [];

      private function refreshNotFitting(event: GlobalEvent = null): void {
         if (quest != null && planetSelector != null) {
            var planet: MSSObject = MSSObject(planetSelector.selectedItem);
            notFitting = Resource.getNotFittingReward(planet, quest.rewards);
         }
         else {
            notFitting = null;
         }
      }

      private function this_addedToStageHandler(event: Event): void {
         EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
      }

      private function this_removedFromStageHandler(event: Event): void {
         EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
      }

      private function planetSelector_changeHandler(event: IndexChangeEvent): void {
         refreshNotFitting();
      }
      ]]>
   </fx:Script>
</screen:ItemRendererBase>
