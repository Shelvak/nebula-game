<?xml version="1.0" encoding="utf-8"?>
<screen:ItemRendererBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
                         xmlns:s="library://ns.adobe.com/flex/spark" 
                         xmlns:mx="library://ns.adobe.com/flex/mx"
                         xmlns:base="components.base.*"
                         xmlns:screen="components.base.screen.*"
                         xmlns:menus="components.menus.*"
                         addedToStage="this_addedToStageHandler(event)"
                         removedFromStage="this_removedFromStageHandler(event)">
   <fx:Declarations>
      <s:Group id="_headerLeftContent">
         <s:Label id="lblTitle" text="{title}" left="5" top="10" color="{textColor}"/>
      </s:Group>
      <s:Group id="_headerRrightContent">
         <s:Label id="lblProgress" color="{textColor}" right="5" top="10" text="{progress}"/>
      </s:Group>
      <s:Group id="_contentGroup">
         <s:layout>
            <s:VerticalLayout horizontalAlign="justify"/>
         </s:layout>
         <s:Group>
            <s:BitmapImage source="{getImage(AssetNames.UI_IMAGES_FOLDER + 'quest_advisor')}"/>
            
            <s:Group width="100%">
               
               <s:layout>
                  <s:VerticalLayout horizontalAlign="justify" gap="5"/>
               </s:layout>
               
               <s:Label text="{quest.about}" color="#D6CA8D" fontSize="15" paddingBottom="20" />
               
               <s:Group>
                  <s:layout>
                     <s:HorizontalLayout paddingTop="6"/>
                  </s:layout>
                  <s:Label text="{getString('label.objectives')}" fontWeight="bold" fontSize="15" width="90"/>
                  <s:Group id="grpObjectives" width="100%">
                     <s:DataGroup dataProvider="{quest.objectives}">
                        <s:itemRenderer>
                           <fx:Component>
                              <s:ItemRenderer>
                                 <fx:Script>
                                    import models.objectives.QuestObjective;
                                 </fx:Script>
                                 <s:Label text="{QuestObjective(data).objectiveText}"/>
                              </s:ItemRenderer>
                           </fx:Component>
                        </s:itemRenderer>
                        <s:layout>
                           <s:VerticalLayout/>
                        </s:layout>
                     </s:DataGroup>
                  </s:Group>
               </s:Group>                  
               
               <s:Group>
                  <s:Label text="{getString('label.rewards')}" fontWeight="bold" paddingTop="6"
                           fontSize="14" width="90"/>
                  <base:AdvancedContainer id="grpRewards" width="100%">
                     <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{quest.rewards.metal}"
                                         visible="{quest.rewards.metal != 0}"
                                         toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
                     <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{quest.rewards.energy}"
                                         visible="{quest.rewards.energy != 0}"
                                         toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
                     <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{quest.rewards.zetium}"
                                         visible="{quest.rewards.zetium != 0}"
                                         toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
                     <s:Group width="100%" visible="{quest.rewards.points != 0}">
                        <s:Label width="{int(getString('rewardsWidth'))}" 
                                 text="{getString('points')}"/>
                        <s:Label text="{quest.rewards.points}"/>
                        <s:layout>
                           <s:HorizontalLayout/>
                        </s:layout>
                     </s:Group>
                     <s:Group width="100%" visible="{quest.rewards.scientists != 0}">
                        <s:Label width="{int(getString('rewardsWidth'))}" 
                                 text="{Localizer.string('Resources', ResourceType.SCIENTISTS)}"/>
                        <s:Label text="{quest.rewards.scientists}"/>
                        <s:layout>
                           <s:HorizontalLayout/>
                        </s:layout>
                     </s:Group>
                     <s:Group width="100%" visible="{quest.rewards.creds != 0}">
                        <s:Label width="{int(getString('rewardsWidth'))}" 
                                 text="{StringUtil.firstToUpperCase(Localizer.string('Credits', 'label.creds'))}"/>
                        <s:Label text="{quest.rewards.creds}"/>
                        <s:layout>
                           <s:HorizontalLayout/>
                        </s:layout>
                     </s:Group>
                     <s:Group width="100%" visible="{quest.rewards.units.length > 0}">
                        <s:Label text="{getString('units')}" fontWeight="bold"/>
                        <s:DataGroup itemRenderer="components.unit.IRUnitBuildingEntrySmall" width="100%" 
                                     dataProvider="{quest.rewards.units}"
                                     height="{85 * unitsLayout.rowCount}">
                           <s:layout>
                              <s:TileLayout id="unitsLayout"/>
                           </s:layout>
                        </s:DataGroup>
                        <s:layout>
                           <s:VerticalLayout/>
                        </s:layout>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout paddingTop="6"/>
                     </base:layout>
                  </base:AdvancedContainer>
                  <s:layout>
                     <s:HorizontalLayout paddingTop="6"/>
                  </s:layout>
               </s:Group>
            </s:Group>
            
            <s:layout>
               <s:HorizontalLayout gap="20" paddingTop="12" paddingLeft="22" paddingRight="18" 
                                   paddingBottom="18"/>
            </s:layout>
         </s:Group>
         <base:AdvancedContainer>
            <base:layout>
               <s:VerticalLayout horizontalAlign="center"/>
            </base:layout>
            <s:Group visible="{completed}">
               <s:Label text="{getString('label.choosePlanet')}" styleName="h3"/>
               <base:PlanetSelector id="planetSelector" minWidth="180" dataProvider="{ML.player.planets}"
                                    itemRenderer="components.gameobjects.planet.IRPlayerPlanet"
                                    change="planetSelector_changeHandler(event)"/>
               <s:layout>
                  <s:HorizontalLayout/>
               </s:layout>
            </s:Group>
            
            <base:Warning text="{getString('warning.wontFit', [notFitting])}"
                          visible="{notFitting != null &amp;&amp; completed}"/>
            
            <base:Warning text="{getString('warning.cantClaimReward')}"
                          visible="{completed &amp;&amp;
                                    ML.player.population >= ML.player.populationMax &amp;&amp;
                                    quest.rewards.units.length > 0}"/>
            
            <s:Button label="{getString('label.claimReward')}" 
                      click="btnClaim_clickHandler(event)"
                      visible="{completed &amp;&amp;
                               (ML.player.population &lt; ML.player.populationMax ||
                                quest.rewards.units.length == 0)}"
                      skinClass="components.skins.GreenButtonSkin"/>
            
            <s:Button label="{getString('label.tutorial')}" 
                      click="btnTutorial_clickHandler(event)"
                      visible="{!completed &amp;&amp; (quest.helpUrlId != null)}" 
                      skinClass="components.skins.YellowButtonSkin"/>
         </base:AdvancedContainer>

      </s:Group>
   </fx:Declarations>
   <fx:Binding source="itemIndex == ML.quests.length - 1" destination="bottomLineVisible"/>
   <fx:Binding source="itemIndex == 0" destination="firstItem"/>
   <fx:Binding source="Quest(data).title" destination="title"/>
   <fx:Script>
      <![CDATA[
         import utils.assets.ImagePreloader;
         import utils.UrlNavigate;
         import models.resource.Resource;
         import utils.StringUtil;
         import spark.events.IndexChangeEvent;
         import utils.MathUtil;
         import globalevents.GlobalEvent;
         import controllers.Messenger;
         import globalevents.GQuestEvent;
         import com.developmentarc.core.utils.EventBroker;
         import utils.assets.AssetNames;
         import controllers.GlobalFlags;
         import utils.locale.Localizer;
         import components.gameobjects.planet.IRPlayerPlanet;
         import components.unit.IRUnitBuildingEntrySmall;
         import controllers.quests.QuestsCommand;
         import models.solarsystem.MSSObject;
         import models.planet.Planet;
         import models.ModelLocator;
         import models.quest.Quest;
         import models.quest.events.QuestEvent;
         import models.resource.ResourceType;
         
         import mx.collections.ArrayCollection;
         import mx.events.FlexEvent;
         
         
         private static function get GF() : GlobalFlags {
            return GlobalFlags.getInstance();
         }
         
         private static function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         private function getImage(name:String) : BitmapData {
            return ImagePreloader.getInstance().getImage(name);
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Quests", property, parameters);
         }
         
         
         internal static const TEXT_COLOR_STARTED:uint = 0xFFFFFF;
         internal static const TEXT_COLOR_COMPLETED:uint = 0xEEC500;
         internal static const TEXT_COLOR_REWARD_CLAIMED:uint = 0x11FF11;
         
         [Bindable]
         private var textColor:uint = TEXT_COLOR_REWARD_CLAIMED;
         
         protected override function get contentGroup() : Group {
            return _contentGroup;
         }
         
         protected override function get headerLeftContent() : Group {
            return _headerLeftContent;
         }
         
         protected override function get headerRightContent() : Group {
            return _headerRrightContent;
         }
         
         
         [Bindable (event="questChanged")]
         /**
          * Typed alias of <code>data</code> property.
          */ 
         public function get quest() : Quest {
            return Quest(data);
         }
         
         [Bindable]
         private var title:String;
         
         [Bindable]
         private var progress:String;
         
         [Bindable]
         private var completed:Boolean;
         
         protected override function dataCommit(oldValue:Object, newValue:Object) : void {
            var quest:Quest;
            if (oldValue != null) {
               quest = Quest(oldValue);
               quest.removeEventListener(QuestEvent.STATUS_CHANGE, quest_statusChange);
               quest.removeEventListener(QuestEvent.REFRESH_REQUESTED, refreshQuest);
            }
            if (newValue != null) {
               quest = Quest(newValue);
               quest.addEventListener(QuestEvent.STATUS_CHANGE, quest_statusChange);
               quest.addEventListener(QuestEvent.REFRESH_REQUESTED, refreshQuest);
               refreshTitle();
            }
            refreshNotFitting();
            setTextColor();
         }
         
         private function refreshTitle(event:Event = null) : void {
            title = quest.title;
            progress = getString('label.progress', [quest.completed, quest.objectives.length]);
            completed = (quest.status == Quest.STATUS_COMPLETED);
            ML.quests.applyCurrentFilter();
         }
         
         private function setTextColor() : void {
            if (data != null) {
               if      (quest.status == Quest.STATUS_STARTED)   textColor = TEXT_COLOR_STARTED;
               else if (quest.status == Quest.STATUS_COMPLETED) textColor = TEXT_COLOR_COMPLETED;
               else                                             textColor = TEXT_COLOR_REWARD_CLAIMED;
            }
         }
         
         private function quest_statusChange(event:QuestEvent) : void {
            setTextColor();
            refreshTitle();
         }
         
         
         /* ###################### */
         /* ### EVENT HANDLERS ### */
         /* ###################### */
         
         protected override function btnClose_clickHandler(event:MouseEvent) : void {
            ML.quests.deselect();
         }
         
         private function refreshQuest(event:QuestEvent) : void {
            dispatchEvent(new Event("questChanged"));
         }
         
         private function btnTutorial_clickHandler(event:MouseEvent) : void {
            UrlNavigate.getInstance().showTutorial(quest.helpUrlId);
         }
         
         private function btnClaim_clickHandler(event:MouseEvent) : void {
            GF.lockApplication = true;
            EventBroker.subscribe(GQuestEvent.CLAIM_APROVED, approveClaim);
            new QuestsCommand(
               QuestsCommand.CLAIM_REWARDS,
               {"planetId": MSSObject(planetSelector.selectedItem).id, "id": quest.id}
            ).dispatch ();
         }
         
         private function approveClaim(event:GQuestEvent) : void {
            Messenger.show(
               getString('message.rewardClaimed', [MSSObject(planetSelector.selectedItem).name]),
               Messenger.MEDIUM
            );
            EventBroker.unsubscribe(GQuestEvent.CLAIM_APROVED, approveClaim);
            refreshNotFitting();
         }
         
         [Bindable]
         private var notFitting: String = null;
         
         private var missingStorages: Array = [];
         private var missingAmounts: Array = [];
         
         private function refreshNotFitting(event:GlobalEvent = null) : void {
            if (quest != null && planetSelector != null) {
               var planet:MSSObject = MSSObject(planetSelector.selectedItem);
               notFitting = Resource.getNotFittingReward(planet, quest.rewards);
            }
            else
               notFitting = null;
         }
         
         private function this_addedToStageHandler(event:Event) : void {
            EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
         }
         
         private function this_removedFromStageHandler(event:Event) : void {
            EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
         }
         
         private function planetSelector_changeHandler(event:IndexChangeEvent) : void {
            refreshNotFitting();
         }
      ]]>
   </fx:Script>
</screen:ItemRendererBase>
