<?xml version="1.0" encoding="utf-8"?>
<base:AdvancedContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                        xmlns:s="library://ns.adobe.com/flex/spark" 
                        xmlns:mx="library://ns.adobe.com/flex/mx" 
                        xmlns:market="components.market.*" 
                        xmlns:base="components.base.*"
                        creationComplete="advancedcontainer1_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import components.market.events.MarketEvent;
         import components.skins.GreenButtonSkin;
         
         import models.building.Building;
         import models.resource.ResourceType;
         
         import mx.events.FlexEvent;
         
         import utils.MathUtil;
         
         protected function what_selectedResourceChangeHandler(event:MarketEvent):void
         {
            if (forWhat.selected == what.selected)
            {
               forWhat.deselect();
            }
            updateRate();
         }
         

         protected function forWhat_selectedResourceChangeHandler(event:MarketEvent):void
         {
            updateRate();
         }


         protected function advancedcontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            mScreen.addEventListener(MarketEvent.AVG_RATE_CHANGE, dispatchAvgRateChangeEvent);
         }
         
         private function dispatchAvgRateChangeEvent(e: MarketEvent): void
         {
            if (hasEventListener(MarketEvent.AVG_RATE_CHANGE))
            {
               dispatchEvent(new MarketEvent(MarketEvent.AVG_RATE_CHANGE));
            }
         }

         protected function confirm_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            new MarketCommand(MarketCommand.NEW, {
            'marketId': mScreen.market.id,
            'fromAmount': sellSelector.selectedVal,
            'fromKind': OfferResourceKind[what.selected],
            'toRate': forSelector.selectedVal/sellSelector.selectedVal,
            'toKind': OfferResourceKind[forWhat.selected]
            }).dispatch();
         }

      ]]>
   </fx:Script>
   <base:layout>
      <s:VerticalLayout horizontalAlign="justify"/>
   </base:layout>
   <fx:Script>
      <![CDATA[
         import models.market.MCMarketScreen;
         import models.market.OfferResourceKind;
         import controllers.market.MarketCommand;
         import controllers.GlobalFlags;
         import config.Config;
         import models.resource.Resource;
         import utils.locale.Localizer;
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Market', prop, params);
         }
         
         [Bindable]
         public var taxRate: Number;
         
         [Bindable]
         public var metal: Resource;
         [Bindable]
         public var energy: Resource;
         [Bindable]
         public var zetium: Resource;
         
         private function getResource(res: String): Resource
         {
            return Resource(this[res]);
         }
         
         private function updateRate(): void
         {
            if (what.selected != null && forWhat.selected != null)
            {
               GlobalFlags.getInstance().lockApplication = true;
               new MarketCommand(MarketCommand.AVG_RATE, {
                  'fromKind': int(OfferResourceKind[what.selected]),
                  'toKind': int(OfferResourceKind[forWhat.selected])
               }).dispatch();
            }
         }
         
         [Bindable (event="avgRateChange")]
         private function getMarketRate(currentRate: Number): int
         {
            var rate: Number = (currentRate/mScreen.avgRate);
            return Math.abs(Math.round(100 - (rate * 100)));
         }
         
         private var mScreen: MCMarketScreen = MCMarketScreen.getInstance();
         
         [Bindable (event="avgRateChange")]
         private function getCheaper(currentRate: Number): Boolean
         {
            return currentRate < mScreen.avgRate;
         }
         
         [Bindable (event="avgRateChange")]
         private function getMaxOffer(amount: int): int
         {
            return Math.round((mScreen.avgRate * (1 + Config.getMarketRange())) * amount);
         }
         
         [Bindable (event="avgRateChange")]
         private function getMinOffer(amount: int): int
         {
            return Math.round((mScreen.avgRate * (1 - Config.getMarketRange())) * amount);
         }
      ]]>
   </fx:Script>
   <s:Label text="{getText('label.wantToSell')}"/>
   <market:CMarketResourceSelector id="what" selectedResourceChange="what_selectedResourceChangeHandler(event)"
                                   hidenType="{ResourceType.CREDS}"/>
   <base:AdvancedContainer visible="{what.selected != null 
                           &amp;&amp; getResource(what.selected).getWithoutTaxes(taxRate)
                           >= Config.getMinMarketOffer()}">
      <s:Label text="{getText('label.howMuch')}"/>
      <market:CMarketResourceSlider maxAmmount="{getResource(what.selected).getWithoutTaxes(taxRate)}"
                                    minAmmount="{Config.getMinMarketOffer()}" id="sellSelector"/>
      <market:CMarketFee type="{what.selected}" taxRate="{taxRate}"
                         selectedAmmount="{sellSelector.selectedVal}"/>
      <s:Label text="{getText('label.sellFor')}"/>
      <market:CMarketResourceSelector id="forWhat" disabledType="{what.selected}"
                                      selectedResourceChange="forWhat_selectedResourceChangeHandler(event)"/>
      <market:CMarketResourceSlider maxAmmount="{getMaxOffer(sellSelector.selectedVal)}" 
                                    minAmmount="{getMinOffer(sellSelector.selectedVal)}"
                                    visible="{forWhat.selected != null}" id="forSelector"/>
      <s:Label text="{getText('label.marketValue', 
               [getMarketRate(forSelector.selectedVal/sellSelector.selectedVal),
               getCheaper(forSelector.selectedVal/sellSelector.selectedVal)
               ?'cheaper':'more'])}" 
               visible="{forWhat.selected != null}"/>
      <market:CMarketCompare typeFrom="{what.selected}" typeTo="{forWhat.selected}"
                             amountTo="{forSelector.selectedVal/sellSelector.selectedVal}" 
                             visible="{forWhat.selected != null}"/>
      <s:Group visible="{forWhat.selected != null}">
         <s:Button skinClass="components.skins.GreenButtonSkin" 
                   label="{getText('label.submit')}" horizontalCenter="0"
                   click="confirm_clickHandler(event)"/>
      </s:Group>
      <base:layout>
         <s:VerticalLayout horizontalAlign="justify"/>
      </base:layout>
   </base:AdvancedContainer>
   <base:Warning text="{getText('warning.noMinResource', [what.selected])}" 
                 visible="{what.selected != null 
                 &amp;&amp; getResource(what.selected).getWithoutTaxes(taxRate)
                 &lt; Config.getMinMarketOffer()}"/>
</base:AdvancedContainer>
