<?xml version="1.0" encoding="utf-8"?>
<base:AdvancedContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                        xmlns:s="library://ns.adobe.com/flex/spark" 
                        xmlns:mx="library://ns.adobe.com/flex/mx" 
                        xmlns:market="components.market.*" 
                        xmlns:base="components.base.*"
                        creationComplete="advancedcontainer1_creationCompleteHandler(event)"
                        xmlns:credits="components.credits.*">
   <fx:Script>
      <![CDATA[
      import components.market.events.MarketEvent;
      import components.popups.ActionConfirmationPopup;
      import components.skins.GreenButtonSkin;

      import models.building.Building;
      import models.resource.ResourceType;

      import mx.collections.ArrayCollection;
      import mx.events.FlexEvent;

      import utils.ApplicationLocker;

      import utils.MathUtil;

      protected function what_selectedResourceChangeHandler(event: Event): void {
         if (sellSelector.selectedVal < Config.getMinMarketOffer()) {
            sellSelector.selectedVal = Config.getMinMarketOffer();
         }
         if (forWhat.selectedItem == what.selectedItem) {
            forWhat.selectedIndex = -1;
            buildForWhat();
         }
         else {
            var oldSel: String = forWhat.selectedItem;
            buildForWhat();
            if (oldSel != null) {
               forWhat.selectedIndex = availableResList.getItemIndex(oldSel);
            }
         }
         updateRate();
      }

      [Bindable]
      private var availableResList: ArrayCollection = new ArrayCollection();

      private function buildForWhat(): void {
         availableResList.removeAll();
         function addResource(res: String): void {
            if (what.selectedItem != res) {
               availableResList.addItem(res);
            }
         }

         addResource(ResourceType.METAL);
         addResource(ResourceType.ENERGY);
         addResource(ResourceType.ZETIUM);
         addResource(ResourceType.CREDS);
      }

      protected function forWhat_selectedResourceChangeHandler(event: Event): void {
         updateRate();
      }


      protected function advancedcontainer1_creationCompleteHandler(event: FlexEvent): void {
         mScreen.addEventListener(MarketEvent.AVG_RATE_CHANGE, dispatchAvgRateChangeEvent);
         mScreen.addEventListener(MarketEvent.RATE_UPDATE_NEEDED, updateRate);
      }

      private function dispatchAvgRateChangeEvent(e: MarketEvent): void {
         if (hasEventListener(MarketEvent.AVG_RATE_CHANGE)) {
            dispatchEvent(new MarketEvent(MarketEvent.AVG_RATE_CHANGE));
         }
      }

      protected function confirm_clickHandler(event: MouseEvent): void {
         var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
         popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
         popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
         var lbl: Label = new Label();
         lbl.minWidth = 300;
         lbl.text = Localizer.string('Popups', 'message.createOffer');
         popUp.addElement(lbl);
         popUp.title = Localizer.string('Popups', 'title.createOffer');
         popUp.confirmButtonClickHandler = function (button: Button = null): void {
            new MarketCommand(MarketCommand.NEW, {
               'marketId': mScreen.market.id,
               'fromAmount': sellSelector.selectedVal,
               'fromKind': OfferResourceKind[what.selectedItem],
               'toRate': forSelector.selectedVal / sellSelector.selectedVal,
               'toKind': OfferResourceKind[forWhat.selectedItem]
            }).dispatch();
            reset();
         };
         popUp.show();
      }

      public function reset(): void {
         forWhat.selectedIndex = -1;
         what.selectedIndex = -1;
      }
      ]]>
   </fx:Script>
   <base:layout>
      <s:VerticalLayout horizontalAlign="justify"/>
   </base:layout>
   <fx:Script>
      <![CDATA[
      import models.market.MCMarketScreen;
      import models.market.MarketOffer;
      import models.market.OfferResourceKind;

      import controllers.market.MarketCommand;

      import utils.ApplicationLocker;

      import config.Config;

      import models.resource.Resource;

      import utils.locale.Localizer;

      private function getText(prop: String, params: Array = null): String {
         return Localizer.string('Market', prop, params);
      }

      [Bindable]
      public var taxRate: Number;

      private function getResource(res: String): Resource {
         return Resource(ML.latestPlanet.ssObject[res]);
      }

      private function updateRate(e: MarketEvent = null): void {
         if (what.selectedItem != null && forWhat.selectedItem != null) {
            new MarketCommand(MarketCommand.AVG_RATE, {
               'fromKind': int(OfferResourceKind[what.selectedItem]),
               'toKind': int(OfferResourceKind[forWhat.selectedItem])
            }).dispatch();
         }
      }

      [Bindable (event="avgRateChange")]
      private function getMarketRate(currentRate: Number): int {
         var rate: Number = (currentRate / mScreen.avgRate);
         return Math.abs(Math.round(100 - (rate * 100)));
      }

      private var mScreen: MCMarketScreen = MCMarketScreen.getInstance();

      [Bindable (event="avgRateChange")]
      private function getCheaper(currentRate: Number): Boolean {
         return currentRate <= mScreen.avgRate;
      }

      [Bindable (event="avgRateChange")]
      private function getMaxOffer(amount: int): int {
         return Math.round((mScreen.avgRate * (1 + Config.getMarketRange())) * amount);
      }
      
      private function get lowestMarketRate(): Number
      {
        var minRate: Number = -1;
        for each (var offer: MarketOffer in mScreen.publicOffers.source)
        {
           if (offer.fromResource == what.selectedItem &&
             offer.toResource == forWhat.selectedItem &&
             (minRate == -1 || offer.toRate < minRate))
           {
              minRate = offer.toRate;
           }
        }
        return minRate;
      }

      [Bindable (event="avgRateChange")]
      private function getMinOffer(amount: int): int {
        var lowestRate: Number = lowestMarketRate;
        var lowestOffset: Number = Config.getMinOfferOffset();
        var normalOffset: Number = Config.getMarketRange();

        var avgRateLowBound: Number = mScreen.avgRate * (1 - normalOffset);
        return Math.floor((lowestRate == -1
          ? avgRateLowBound
          : Math.min(avgRateLowBound, lowestRate - lowestOffset)) * amount);
      }

      private function getResourceWithoutTaxes(resource: String, taxes: Number): Number {
         if (resource == ResourceType.CREDS) {
            return Resource.getGivenResourceWithoutTaxes(
                    ML.player.creds - ML.player.vipCreds - ML.player.freeCreds,
                    taxes);
         }
         else {
            return getResource(resource).getWithoutTaxes(taxes);
         }
      }
      ]]>
   </fx:Script>
   <s:Label text="{getText('label.wantToSell')}" styleName="h3" paddingBottom="3"
            color="#eec500"/>
   <s:Group>
      <s:DropDownList dataProvider="{new ArrayCollection([
                      ResourceType.METAL,
                      ResourceType.ENERGY,
                      ResourceType.ZETIUM,
                      ResourceType.CREDS])}" 
                      labelFunction="{ResourceType.resourceLabelFunction}"
                      id="what"
                      horizontalCenter="0"
                      minWidth="152"
                      change="what_selectedResourceChangeHandler(event)"
                      itemRenderer="components.base.IRResource"/>
   </s:Group>
   <credits:FreeCredsWarning visible="{what.selectedItem == ResourceType.CREDS
                             &amp;&amp; getResourceWithoutTaxes(what.selectedItem, taxRate)
                             &lt; Config.getMinMarketOffer()
                             &amp;&amp; ML.player.freeCreds > 0}"
                             paddingBottom="6"
                             paddingTop="6"
                             useVerticalLayout="true"/>
   <credits:VipCredsWarning visible="{what.selectedItem == ResourceType.CREDS
                            &amp;&amp; ML.player.vipLevel > 0}"
                            paddingBottom="6"
                            paddingTop="6"
                            useVerticalLayout="true"/>
   <base:AdvancedContainer visible="{what.selectedItem != null 
                           &amp;&amp; getResourceWithoutTaxes(what.selectedItem, taxRate)
                           >= Config.getMinMarketOffer()}">
      <s:Label text="{getText('label.selected',[sellSelector.selectedVal.toString()])}"
               paddingTop="6" textAlign="center"/>
      <market:CMarketResourceSlider maxAmount="{getResourceWithoutTaxes(what.selectedItem, taxRate)}"
                                    minAmount="{Config.getMinMarketOffer()}" id="sellSelector"/>
      <market:CMarketFee type="{what.selectedItem}" taxRate="{taxRate}"
                         selectedAmmount="{sellSelector.selectedVal}"/>
      <s:Label text="{getText('label.sellFor')}" styleName="h3" paddingBottom="3" paddingTop="12"
               color="#eec500"/>
      <s:Group>
         <s:DropDownList dataProvider="{availableResList}" 
                         id="forWhat"
                         minWidth="152"
                         horizontalCenter="0"
                         labelFunction="{ResourceType.resourceLabelFunction}"
                         change="forWhat_selectedResourceChangeHandler(event)"
                         itemRenderer="components.base.IRResource"/>
      </s:Group>
      <s:Label text="{getText('label.selected',[forSelector.selectedVal.toString()])}"
               visible="{forWhat.selectedItem != null}" paddingTop="6"
               textAlign="center"/>
      <market:CMarketResourceSlider maxAmount="{getMaxOffer(sellSelector.selectedVal)}"
                                    minAmount="{getMinOffer(sellSelector.selectedVal)}"
                                    visible="{forWhat.selectedItem != null}" id="forSelector"/>
      <s:Label text="{getText('label.marketValue', 
               [getMarketRate(forSelector.selectedVal/sellSelector.selectedVal),
               getCheaper(forSelector.selectedVal/sellSelector.selectedVal)
               ?'cheaper':'more'])}"
               color="{getCheaper(forSelector.selectedVal/sellSelector.selectedVal)
               ?0x00ff00
               :0xff0000}"
               visible="{forWhat.selectedItem != null}"
               paddingBottom="2"/>
      <market:CMarketCompare typeFrom="{what.selectedItem}" typeTo="{forWhat.selectedItem}"
                             amountTo="{forSelector.selectedVal/sellSelector.selectedVal}" 
                             visible="{forWhat.selectedItem != null}"/>
      <s:Group visible="{forWhat.selectedItem != null}">
         <s:Button skinClass="components.skins.GreenButtonSkin" top="6" 
                   label="{getText('label.submit')}" horizontalCenter="0"
                   click="confirm_clickHandler(event)"/>
      </s:Group>
      <base:layout>
         <s:VerticalLayout horizontalAlign="justify"/>
      </base:layout>
   </base:AdvancedContainer>
   <base:Warning text="{what.selectedItem == null?''
                 :getText('warning.noMinResource', [what.selectedItem, Config.getMinMarketOffer()])}" 
                 visible="{what.selectedItem != null 
                 &amp;&amp; (getResourceWithoutTaxes(what.selectedItem, taxRate)
                 &lt; Config.getMinMarketOffer())}"
                 showSign="false"/>
</base:AdvancedContainer>
