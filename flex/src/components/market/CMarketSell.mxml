<?xml version="1.0" encoding="utf-8"?>
<base:AdvancedContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                        xmlns:s="library://ns.adobe.com/flex/spark" 
                        xmlns:mx="library://ns.adobe.com/flex/mx" 
                        xmlns:market="components.market.*" 
                        xmlns:base="components.base.*">
   <fx:Script>
      <![CDATA[
         import components.market.events.MarketEvent;
         import components.skins.GreenButtonSkin;
         
         import models.building.Building;
         import models.resource.ResourceType;
         
         import utils.MathUtil;

         protected function what_selectedResourceChangeHandler(event:MarketEvent):void
         {
            if (forWhat.selected == what.selected)
            {
               forWhat.deselect();
            }
         }

      ]]>
   </fx:Script>
   <base:layout>
      <s:VerticalLayout horizontalAlign="justify"/>
   </base:layout>
   <fx:Script>
      <![CDATA[
         import config.Config;
         import models.resource.Resource;
         import utils.locale.Localizer;
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Market', prop, params);
         }
         
         [Bindable]
         public var taxRate: Number;
         
         [Bindable]
         public var metal: Resource;
         [Bindable]
         public var energy: Resource;
         [Bindable]
         public var zetium: Resource;
         [Bindable]
         public var creds: int;
         
         public var marketRates: Object = {'metal-energy': 1.1,
            'metal-zetium': 1.1,
            'metal-creds': 1.3,
            'energy-metal': 1.0,
            'energy-zetium': 0.7,
            'energy-creds': 0.9,
            'zetium-metal': 1.2,
            'zetium-energy': 1.1,
            'zetium-creds': 1.5,
            'creds-metal': 1.2,
            'creds-energy': 1.7,
            'creds-zetium': 1.9};
         
         private function getResource(res: String): Resource
         {
            return Resource(this[res]);
         }
         
         private function getMarketValue(fromRes: String, toRes: String): Number
         {
            return marketRates[fromRes + '-' + toRes];
         }
         
         private function getMarketRate(fromRes: String, toRes: String, 
                                                         currentRate: Number): int
         {
            var rate: Number = (currentRate/getMarketValue(fromRes, toRes));
            return Math.abs(Math.round(100 - (rate * 100)));
         }
         
         private function getCheaper(fromRes: String, toRes: String, 
                                                      currentRate: Number): Boolean
         {
            return currentRate < getMarketValue(fromRes, toRes);
         }
         
         private function getMaxOffer(fromRes: String, toRes: String, amount: int): int
         {
            return Math.round((getMarketValue(fromRes, toRes) * (1 + Config.getMarketRange())) * amount);
         }
         
         private function getMinOffer(fromRes: String, toRes: String, amount: int): int
         {
            return Math.round((getMarketValue(fromRes, toRes) * (1 - Config.getMarketRange())) * amount);
         }
      ]]>
   </fx:Script>
   <s:Label text="{getText('label.wantToSell')}"/>
   <market:CMarketResourceSelector id="what" selectedResourceChange="what_selectedResourceChangeHandler(event)"
                                   hidenType="{ResourceType.CREDS}"/>
   <s:Label text="{getText('label.howMuch')}" visible="{what.selected != null}"/>
   <market:CMarketResourceSlider maxAmmount="{what.selected==ResourceType.CREDS
                                 ?creds - (creds/(1+taxRate))
                                 :getResource(what.selected).getWithoutTaxes(taxRate)}" 
                              visible="{what.selected != null}" id="sellSelector"/>
   <market:CMarketFee type="{what.selected}" taxRate="{taxRate}"
                      selectedAmmount="{sellSelector.selectedVal}"
                      visible="{what.selected != null}"/>
   <s:Label text="{getText('label.sellFor')}" visible="{what.selected != null 
            &amp;&amp; sellSelector.selectedVal > 0}"/>
   <market:CMarketResourceSelector id="forWhat" visible="{what.selected != null
                                   &amp;&amp; sellSelector.selectedVal > 0}"
                                   disabledType="{what.selected}"/>
   <market:CMarketResourceSlider maxAmmount="{getMaxOffer(what.selected, forWhat.selected,
                                 sellSelector.selectedVal)}" 
                                 minAmmount="{getMinOffer(what.selected, forWhat.selected,
                                 sellSelector.selectedVal)}"
                              visible="{forWhat.selected != null
                              &amp;&amp; sellSelector.selectedVal > 0}" id="forSelector"/>
   <s:Label text="{getText('label.marketValue', 
            [getMarketRate(what.selected, forWhat.selected,
            forSelector.selectedVal/sellSelector.selectedVal),
            getCheaper(what.selected, forWhat.selected,
            forSelector.selectedVal/sellSelector.selectedVal)?'cheaper':'more'])}" 
            visible="{forWhat.selected != null
            &amp;&amp; sellSelector.selectedVal > 0}"/>
   <market:CMarketCompare typeFrom="{what.selected}" typeTo="{forWhat.selected}"
                          amountTo="{forSelector.selectedVal/sellSelector.selectedVal}" 
                          visible="{forWhat.selected != null
                          &amp;&amp; sellSelector.selectedVal > 0}"/>
   <s:Group visible="{forWhat.selected != null
            &amp;&amp; sellSelector.selectedVal > 0}">
      <s:Button skinClass="components.skins.GreenButtonSkin" 
                label="{getText('label.submit')}" horizontalCenter="0"/>
   </s:Group>
</base:AdvancedContainer>
