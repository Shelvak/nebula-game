<?xml version="1.0" encoding="utf-8"?>
<base:AdvancedContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                        xmlns:s="library://ns.adobe.com/flex/spark" 
                        xmlns:mx="library://ns.adobe.com/flex/mx" 
                        xmlns:market="components.market.*" 
                        xmlns:base="components.base.*"
                        creationComplete="advancedcontainer1_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import components.market.events.MarketEvent;
         import components.popups.ActionConfirmationPopup;
         import components.skins.GreenButtonSkin;
         
         import models.building.Building;
         import models.resource.ResourceType;
         
         import mx.collections.ArrayCollection;
         import mx.events.FlexEvent;
         
         import utils.MathUtil;
         
         protected function what_selectedResourceChangeHandler(event:Event):void
         {
            if (sellSelector.selectedVal < Config.getMinMarketOffer())
            {
               sellSelector.selectedVal = Config.getMinMarketOffer();
            }
            if (forWhat.selectedItem == what.selectedItem)
            {
               forWhat.selectedIndex = -1;
               buildForWhat();
            }
            else
            {
               var oldSel: String = forWhat.selectedItem;
               buildForWhat();
               if (oldSel != null)
               {
                  forWhat.selectedIndex = availableResList.getItemIndex(oldSel);
               }
            }
            updateRate();
         }
         
         [Bindable]
         private var availableResList: ArrayCollection = new ArrayCollection();
         
         private function buildForWhat(): void
         {
            availableResList.removeAll();
            function addResource(res: String): void
            {
               if (what.selectedItem != res)
               {
                  availableResList.addItem(res);
               }
            }
            addResource(ResourceType.METAL);
            addResource(ResourceType.ENERGY);
            addResource(ResourceType.ZETIUM);
            addResource(ResourceType.CREDS);
         }
         
         protected function forWhat_selectedResourceChangeHandler(event:Event):void
         {
            updateRate();
         }
         
         
         protected function advancedcontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            mScreen.addEventListener(MarketEvent.AVG_RATE_CHANGE, dispatchAvgRateChangeEvent);
         }
         
         private function dispatchAvgRateChangeEvent(e: MarketEvent): void
         {
            if (hasEventListener(MarketEvent.AVG_RATE_CHANGE))
            {
               dispatchEvent(new MarketEvent(MarketEvent.AVG_RATE_CHANGE));
            }
         }
         
         protected function confirm_clickHandler(event:MouseEvent):void
         {
            var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
            popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
            popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
            var lbl: Label = new Label();
            lbl.minWidth = 300;
            lbl.text = Localizer.string('Popups', 'message.createOffer');
            popUp.addElement(lbl);
            popUp.title = Localizer.string('Popups', 'title.createOffer');
            popUp.confirmButtonClickHandler = function (button: Button = null): void
            {
               GlobalFlags.getInstance().lockApplication = true;
               new MarketCommand(MarketCommand.NEW, {
                  'marketId': mScreen.market.id,
                  'fromAmount': sellSelector.selectedVal,
                  'fromKind': OfferResourceKind[what.selectedItem],
                  'toRate': forSelector.selectedVal/sellSelector.selectedVal,
                  'toKind': OfferResourceKind[forWhat.selectedItem]
               }).dispatch();
               forWhat.selectedIndex = -1;
               what.selectedIndex = -1;
            };
            popUp.show();
         }
         
      ]]>
   </fx:Script>
   <base:layout>
      <s:VerticalLayout horizontalAlign="justify"/>
   </base:layout>
   <fx:Script>
      <![CDATA[
         import models.market.MCMarketScreen;
         import models.market.OfferResourceKind;
         import controllers.market.MarketCommand;
         import controllers.GlobalFlags;
         import config.Config;
         import models.resource.Resource;
         import utils.locale.Localizer;
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Market', prop, params);
         }
         
         [Bindable]
         public var taxRate: Number;
         
         private function getResource(res: String): Resource
         {
            return Resource(ML.latestPlanet.ssObject[res]);
         }
         
         private function updateRate(): void
         {
            if (what.selectedItem != null && forWhat.selectedItem != null)
            {
               GlobalFlags.getInstance().lockApplication = true;
               new MarketCommand(MarketCommand.AVG_RATE, {
                  'fromKind': int(OfferResourceKind[what.selectedItem]),
                  'toKind': int(OfferResourceKind[forWhat.selectedItem])
               }).dispatch();
            }
         }
         
         [Bindable (event="avgRateChange")]
         private function getMarketRate(currentRate: Number): int
         {
            var rate: Number = (currentRate/mScreen.avgRate);
            return Math.abs(Math.round(100 - (rate * 100)));
         }
         
         private var mScreen: MCMarketScreen = MCMarketScreen.getInstance();
         
         [Bindable (event="avgRateChange")]
         private function getCheaper(currentRate: Number): Boolean
         {
            return currentRate <= mScreen.avgRate;
         }
         
         [Bindable (event="avgRateChange")]
         private function getMaxOffer(amount: int): int
         {
            return Math.round((mScreen.avgRate * (1 + Config.getMarketRange())) * amount);
         }
         
         [Bindable (event="avgRateChange")]
         private function getMinOffer(amount: int): int
         {
            return Math.round((mScreen.avgRate * (1 - Config.getMarketRange())) * amount);
         }
      ]]>
   </fx:Script>
   <s:Label text="{getText('label.wantToSell')}" styleName="h3" paddingBottom="3"
            color="#eec500"/>
   <s:Group>
      <s:DropDownList dataProvider="{new ArrayCollection([
                      ResourceType.METAL,
                      ResourceType.ENERGY,
                      ResourceType.ZETIUM])}" 
                      labelFunction="{ResourceType.resourceLabelFunction}"
                      id="what"
                      horizontalCenter="0"
                      width="152"
                      change="what_selectedResourceChangeHandler(event)"
                      itemRenderer="components.base.IRResource"/>
   </s:Group>
   <base:AdvancedContainer visible="{what.selectedItem != null 
                           &amp;&amp; getResource(what.selectedItem).getWithoutTaxes(taxRate)
                           >= Config.getMinMarketOffer()}">
      <s:Label text="{getText('label.selected',[sellSelector.selectedVal.toString()])}"
               paddingTop="6" textAlign="center"/>
      <market:CMarketResourceSlider maxAmmount="{getResource(what.selectedItem).getWithoutTaxes(taxRate)}"
                                    minAmmount="{Config.getMinMarketOffer()}" id="sellSelector"/>
      <market:CMarketFee type="{what.selectedItem}" taxRate="{taxRate}"
                         selectedAmmount="{sellSelector.selectedVal}"/>
      <s:Label text="{getText('label.sellFor')}" styleName="h3" paddingBottom="3" paddingTop="12"
               color="#eec500"/>
      <s:Group>
         <s:DropDownList dataProvider="{availableResList}" 
                         id="forWhat"
                         width="152"
                         horizontalCenter="0"
                         labelFunction="{ResourceType.resourceLabelFunction}"
                         change="forWhat_selectedResourceChangeHandler(event)"
                         itemRenderer="components.base.IRResource"/>
      </s:Group>
      <s:Label text="{getText('label.selected',[forSelector.selectedVal.toString()])}"
               visible="{forWhat.selectedItem != null}" paddingTop="6"
               textAlign="center"/>
      <market:CMarketResourceSlider maxAmmount="{getMaxOffer(sellSelector.selectedVal)}" 
                                    minAmmount="{getMinOffer(sellSelector.selectedVal)}"
                                    visible="{forWhat.selectedItem != null}" id="forSelector"/>
      <s:Label text="{getText('label.marketValue', 
               [getMarketRate(forSelector.selectedVal/sellSelector.selectedVal),
               getCheaper(forSelector.selectedVal/sellSelector.selectedVal)
               ?'cheaper':'more'])}"
               color="{getCheaper(forSelector.selectedVal/sellSelector.selectedVal)
               ?0x00ff00
               :0xff0000}"
               visible="{forWhat.selectedItem != null}"
               paddingBottom="2"/>
      <market:CMarketCompare typeFrom="{what.selectedItem}" typeTo="{forWhat.selectedItem}"
                             amountTo="{forSelector.selectedVal/sellSelector.selectedVal}" 
                             visible="{forWhat.selectedItem != null}"/>
      <s:Group visible="{forWhat.selectedItem != null}">
         <s:Button skinClass="components.skins.GreenButtonSkin" top="6" 
                   label="{getText('label.submit')}" horizontalCenter="0"
                   click="confirm_clickHandler(event)"/>
      </s:Group>
      <base:layout>
         <s:VerticalLayout horizontalAlign="justify"/>
      </base:layout>
   </base:AdvancedContainer>
   <base:Warning text="{what.selectedItem == null?''
                 :getText('warning.noMinResource', [what.selectedItem, Config.getMinMarketOffer()])}" 
                 visible="{what.selectedItem != null 
                 &amp;&amp; (getResource(what.selectedItem).getWithoutTaxes(taxRate)
                 &lt; Config.getMinMarketOffer())}"
                 showSign="false"/>
</base:AdvancedContainer>
