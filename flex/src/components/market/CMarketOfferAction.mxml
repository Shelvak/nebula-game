<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" 
         xmlns:base="components.base.*">   
   <fx:Metadata>
      /**
      * Dispatched when selected resource in radio group changes
      * 
      * @eventType components.market.events.MarketEvent.DESELECT_OFFER
      */
      [Event(name="deselectOffer", type="components.market.events.MarketEvent")]
   </fx:Metadata>
   <fx:Script>
      <![CDATA[
         import components.market.events.MarketEvent;
         import components.popups.ActionConfirmationPopup;
         import components.skins.GreenButtonSkin;
         import components.skins.LargePanelSkin;
         
         import controllers.GlobalFlags;
         import controllers.market.MarketCommand;
         
         import models.ModelLocator;
         import models.market.MCMarketScreen;
         import models.market.MarketOffer;
         import models.market.OfferResourceKind;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         [Bindable]
         private var IMG: ImagePreloader = ImagePreloader.getInstance();
         
         [Bindable]
         private var ML: ModelLocator = ModelLocator.getInstance();
         
         [Bindable]
         public var selectedOffer: MarketOffer;
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Market', prop, params);
         }
         
         [Bindable]
         private var cost: int = 0;
         
         protected function selector_changeHandler(event:Event):void
         {
            var selVal: int = selector.value;
            cost = Math.ceil(selVal * selectedOffer.toRate);
            var cPlanet: MSSObject = ML.latestPlanet.ssObject;
            var storString: String = Resource.getMissingStoragesString(
               cPlanet, 
               selectedOffer.fromResource == ResourceType.METAL?
               cPlanet.metal.currentStock + selVal:0,
               selectedOffer.fromResource == ResourceType.ENERGY?
               cPlanet.energy.currentStock + selVal:0,
               selectedOffer.fromResource == ResourceType.ZETIUM?
               cPlanet.zetium.currentStock + selVal:0);
            if (storString == '')
            {
               missingString = null;
            }
            else
            {
               missingString = getText('tooltip.notEnoughStorage', [storString]);
            }
         }
         
         private var mScreen: MCMarketScreen = MCMarketScreen.getInstance();
         
         private function confirm(e: MouseEvent): void
         {
            var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
            popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
            popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
            var lbl: Label = new Label();
            lbl.minWidth = 300;
            lbl.text = Localizer.string('Popups', 'message.'+
               (selectedOffer.fromId == ML.player.id?'cancelOffer':'buyOffer'));
            popUp.addElement(lbl);
            popUp.title = Localizer.string('Popups', 'title.'+
               (selectedOffer.fromId == ML.player.id?'cancelOffer':'buyOffer'));
            popUp.confirmButtonClickHandler = function (button: Button = null): void
            {
               GlobalFlags.getInstance().lockApplication = true;
               if (selectedOffer.fromId == ML.player.id)
               {
                  new MarketCommand(MarketCommand.CANCEL, selectedOffer.id).dispatch();
                  cancel();
               }
               else
               {
                  new MarketCommand(MarketCommand.BUY, {
                     'offer': selectedOffer,
                     'planetId': mScreen.planetId,
                     'amount': Math.round(selector.value)
                  }).dispatch();
                  selector.value = 0;
                  cancel();
               }
            };
            popUp.show();
         }
         
         private function cancel(e: MouseEvent = null): void
         {
            dispatchEvent(new MarketEvent(MarketEvent.DESELECT_OFFER));
         }
         
         private function getImage(name:String) : BitmapData
         {
            return IMG.getImage(AssetNames.MARKET_SCREEN_IMAGE_FOLDER + name);
         }

         [Bindable]
         private var missingString: String = null;
         
         private function planetResource(res: String): Resource
         {
            return Resource(ML.latestPlanet.ssObject[res]);
         }
         
      ]]>
   </fx:Script>
   <!-- background -->
   <s:Group left="0" right="0">
      <s:BitmapImage width="{(width - 500)/2}" id="leftRepeat"
                     source="{getImage('buy_repeat')}" fillMode="repeat"/>
      <s:BitmapImage source="{getImage('buy_left')}"/>
      <s:BitmapImage width="100%" fillMode="repeat"
                     source="{getImage('buy_center')}"/>
      <s:BitmapImage source="{getImage('buy_right')}"/>
      <s:BitmapImage width="{leftRepeat.width}"
                     source="{getImage('buy_repeat')}" fillMode="repeat"/>
      <s:layout>
         <s:HorizontalLayout gap="0"/>
      </s:layout>
   </s:Group>
   <base:AdvancedContainer horizontalCenter="0" bottom="8">
      <s:Group visible="{(ML.player.id != selectedOffer.fromId)
               &amp;&amp; !(selectedOffer.toResource == ResourceType.CREDS
               ? ML.player.creds &lt; Math.ceil(1 * selectedOffer.toRate)
               : planetResource(selectedOffer.toResource).currentStock
               &lt; Math.ceil(1 * selectedOffer.toRate))}">
         <s:Group width="100%">
            <s:Label text="0"/>
            <s:HSlider minimum="0" maximum="{Math.min(selectedOffer.fromAmount, 
                       Math.floor(selectedOffer.toResource == ResourceType.CREDS
                       ? ML.player.creds/selectedOffer.toRate
                       : planetResource(selectedOffer.toResource).currentStock
                       / selectedOffer.toRate))}" 
                       stepSize="1"
                       id="selector" change="selector_changeHandler(event)"
                       width="100%"/>
            <s:Label text="{selectedOffer.fromAmount.toString()}"/>
            <s:layout>
               <s:HorizontalLayout verticalAlign="middle"/>
            </s:layout>
         </s:Group>
         <s:Group>
            <s:layout>
               <s:HorizontalLayout verticalAlign="middle" gap="20"/>
            </s:layout>
            <base:AdvancedContainer toolTip="{missingString == null?'':missingString}">
               <s:BitmapImage source="{IMG.getImage(AssetNames.UI_IMAGES_FOLDER + 'warning_sign')}" 
                              width="16" height="16" smooth="true"
                              visible="{missingString != null}"/>
               <s:Label text="{getText('label.willBuy', [selector.value])}"/>
               <s:BitmapImage source="{IMG.getImage(AssetNames.ICONS_IMAGE_FOLDER + 
                              selectedOffer.fromResource)}"/>
               <base:layout>
                  <s:HorizontalLayout verticalAlign="middle"/>
               </base:layout>
            </base:AdvancedContainer>
            <s:Group>
               <s:Label text="{getText('label.willPay', [cost])}"/>
               <s:BitmapImage source="{IMG.getImage(AssetNames.ICONS_IMAGE_FOLDER + 
                              selectedOffer.toResource)}"/>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle"/>
               </s:layout>
            </s:Group>
         </s:Group>
         <s:layout>
            <s:VerticalLayout horizontalAlign="center"/>
         </s:layout>
      </s:Group>
      <base:Warning text="{getText('warning.doNotAfford')}"
                    visible="{(selectedOffer.toResource == ResourceType.CREDS
                    ? ML.player.creds &lt; Math.ceil(1 * selectedOffer.toRate)
                    : planetResource(selectedOffer.toResource).currentStock
                    &lt; Math.ceil(1 * selectedOffer.toRate))}"/>
      <s:Button label="{ML.player.id != selectedOffer.fromId
                ?getText('label.buy')
                :getText('label.cancel')}" 
                right="6"
                enabled="{ML.player.id == selectedOffer.fromId?true
                :selector.value > 0}"
                visible="{!(selectedOffer.toResource == ResourceType.CREDS
                ? ML.player.creds &lt; Math.ceil(1 * selectedOffer.toRate)
                : planetResource(selectedOffer.toResource).currentStock
                &lt; Math.ceil(1 * selectedOffer.toRate))}"
                skinClass="components.skins.GreenButtonSkin"
                click="confirm(event)"/>
      <s:Button label="{getText('label.close')}" 
                right="6"
                skinClass="components.skins.RedButtonSkin"
                click="cancel(event)"/>
      <base:layout>
         <s:HorizontalLayout verticalAlign="middle" gap="30"/>
      </base:layout>
   </base:AdvancedContainer>
</s:Group>
