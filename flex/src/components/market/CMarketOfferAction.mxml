<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" 
         xmlns:base="components.base.*"
         xmlns:credits="components.credits.*">
   <fx:Metadata>
      /**
      * Dispatched when selected resource in radio group changes
      * 
      * @eventType components.market.events.MarketEvent.DESELECT_OFFER
      */
      [Event(name="deselectOffer", type="components.market.events.MarketEvent")]
   </fx:Metadata>
   <fx:Script>
      <![CDATA[
      import components.market.events.MarketEvent;
      import components.popups.ActionConfirmationPopUp;
      import components.skins.GreenButtonSkin;
      import components.skins.LargePanelSkin;
      import components.skins.LinkButtonSkin;

      import globalevents.GlobalEvent;

      import models.notification.MTimedEvent;

      import utils.ApplicationLocker;

      import controllers.market.MarketCommand;
      import controllers.ui.NavigationController;

      import models.ModelLocator;
      import models.market.MCMarketScreen;
      import models.market.MarketOffer;
      import models.market.OfferResourceKind;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.solarsystem.MSSObject;

      import utils.DateUtil;

      import utils.UrlNavigate;
      import utils.assets.AssetNames;
      import utils.assets.ImagePreloader;
      import utils.locale.Localizer;


      [Bindable]
      private var IMG: ImagePreloader = ImagePreloader.getInstance();

      [Bindable]
      private var ML: ModelLocator = ModelLocator.getInstance();

      [Bindable]
      private var _selectedOffer: MarketOffer;

      public function set selectedOffer(value: MarketOffer): void {
         _selectedOffer = value;
         selector.value = 0;
         cost = 0;
         missingString = null;
        if (_selectedOffer != null && ML.player != null
          && _selectedOffer.fromId == ML.player.id)
        {
           GlobalEvent.subscribe_TIMED_UPDATE(cancelCooldownUpdate);
        }
        else
        {
          GlobalEvent.unsubscribe_TIMED_UPDATE(cancelCooldownUpdate);
          cancelCooldown = null;
        }
      }

      private var cancelCooldown: String;

      private function cancelCooldownUpdate(e: GlobalEvent): void
      {
        if (ML.player.marketOfferCancelCooldown == 0)
        {
          GlobalEvent.unsubscribe_TIMED_UPDATE(cancelCooldownUpdate);
          cancelCooldown = null;
        }
        else
        {
          cancelCooldown = DateUtil.secondsToHumanString(ML.player.marketOfferCancelCooldown);
        }
      }

      public function get selectedOffer(): MarketOffer {
         return _selectedOffer;
      }

      private function getText(prop: String, params: Array = null): String {
         return Localizer.string('Market', prop, params);
      }

      [Bindable]
      private var cost: int = 0;

      protected function selector_changeHandler(event: Event): void {
         var selVal: int = selector.value;
         cost = Math.ceil(selVal * _selectedOffer.toRate);
         var cPlanet: MSSObject = ML.latestPlanet.ssObject;
         var storString: String = Resource.getNotFittingResourcesString(
            cPlanet,
            _selectedOffer.fromResource == ResourceType.METAL ? selVal : 0,
            _selectedOffer.fromResource == ResourceType.ENERGY ? selVal : 0,
            _selectedOffer.fromResource == ResourceType.ZETIUM ? selVal : 0);
         if (storString == null) {
            missingString = null;
         }
         else {
            missingString = getText('tooltip.notEnoughStorage', [storString]);
         }
      }

      [Bindable]
      private var mScreen: MCMarketScreen = MCMarketScreen.getInstance();

      private function confirm(e: MouseEvent): void {
         var popUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
         popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
         var lbl: Label = new Label();
         lbl.minWidth = 300;
         lbl.text = Localizer.string('Popups', 'message.' +
                                                  (_selectedOffer.fromId == ML.player.id
                                                      ? 'cancelOffer'
                                                      : 'buyOffer'));
         popUp.addElement(lbl);
         popUp.title = Localizer.string('Popups', 'title.' +
                                                     (_selectedOffer.fromId == ML.player.id
                                                         ? 'cancelOffer'
                                                         : 'buyOffer'));
         popUp.confirmButtonClickHandler = function (button: Button = null): void {
            if (_selectedOffer.fromId == ML.player.id) {
               new MarketCommand(MarketCommand.CANCEL,
                                 _selectedOffer.id).dispatch();
               cancel();
            }
            else {
               new MarketCommand(MarketCommand.BUY, {
                  'offer':    selectedOffer,
                  'planetId': mScreen.planetId,
                  'amount':   Math.round(selector.value)
               }).dispatch();
               selector.value = 0;
               cancel();
            }
         };
         popUp.show();
      }

      private function cancel(e: MouseEvent = null): void {
         dispatchEvent(new MarketEvent(MarketEvent.DESELECT_OFFER));
      }

      private function getImage(name: String): BitmapData {
         return IMG.getImage(AssetNames.MARKET_SCREEN_IMAGE_FOLDER + name);
      }

      [Bindable]
      private var missingString: String = null;

      private function planetResource(res: String): Resource {
         return Resource(ML.latestPlanet.ssObject[res]);
      }
      ]]>
   </fx:Script>
   <!-- background -->
   <s:Group left="0" right="0">
      <s:BitmapImage width="{Math.ceil((width - 500)/2)}" id="leftRepeat"
                     source="{getImage('buy_repeat')}" fillMode="repeat"/>
      <s:BitmapImage source="{getImage('buy_left')}"/>
      <s:BitmapImage width="100%" fillMode="repeat"
                     source="{getImage('buy_center')}"/>
      <s:BitmapImage source="{getImage('buy_right')}"/>
      <s:BitmapImage width="{leftRepeat.width}"
                     source="{getImage('buy_repeat')}" fillMode="repeat"/>
      <s:layout>
         <s:HorizontalLayout gap="0"/>
      </s:layout>
   </s:Group>
   <base:AdvancedContainer horizontalCenter="0" bottom="14">
      <base:AdvancedContainer visible="{ML.player.id != _selectedOffer.fromId}">
         <base:Warning text="{getText('warning.doNotAfford')}" paddingTop="3"
                       showSign="false" minWidth="250"
                       verticalPaddings="6" defMinHeight="50"
                       visible="{(_selectedOffer.toResource == ResourceType.CREDS
                       ? ML.player.pureCreds &lt; Math.ceil(1 * _selectedOffer.toRate)
                       : planetResource(_selectedOffer.toResource).currentStock
                       &lt; Math.ceil(1 * _selectedOffer.toRate))}"/>
         <s:Group width="100%" visible="{!(_selectedOffer.toResource == ResourceType.CREDS
                  ? ML.player.pureCreds &lt; Math.ceil(1 * _selectedOffer.toRate)
                  : planetResource(_selectedOffer.toResource).currentStock
                  &lt; Math.ceil(1 * _selectedOffer.toRate))}">
            <s:Label text="0"/>
            <s:HSlider minimum="0" maximum="{Math.min(_selectedOffer.fromAmount, 
                       Math.floor(_selectedOffer.toResource == ResourceType.CREDS
                       ? ML.player.pureCreds/_selectedOffer.toRate
                       : planetResource(_selectedOffer.toResource).currentStock
                       / _selectedOffer.toRate))}" 
                       stepSize="1"
                       id="selector" change="selector_changeHandler(event)"
                       width="250"/>
            <s:Label text="{Math.min(_selectedOffer.fromAmount, 
                     Math.floor(_selectedOffer.toResource == ResourceType.CREDS
                     ? ML.player.pureCreds/_selectedOffer.toRate
                     : planetResource(_selectedOffer.toResource).currentStock
                     / _selectedOffer.toRate))}"/>
            <s:layout>
               <s:HorizontalLayout verticalAlign="middle"/>
            </s:layout>
         </s:Group>
         <s:Group visible="{!(_selectedOffer.toResource == ResourceType.CREDS
                  ? ML.player.pureCreds &lt; Math.ceil(1 * _selectedOffer.toRate)
                  : planetResource(_selectedOffer.toResource).currentStock
                  &lt; Math.ceil(1 * _selectedOffer.toRate))}">
            <s:layout>
               <s:HorizontalLayout verticalAlign="middle" gap="20"/>
            </s:layout>
            <s:Group toolTip="{missingString == null?'':missingString}">
               <s:Label text="{getText('label.willBuy', [selector.value])}"
                        styleName="{missingString==null?null:'unsatisfied'}"/>
               <s:BitmapImage source="{IMG.getImage(AssetNames.ICONS_IMAGE_FOLDER + 
                              _selectedOffer.fromResource)}"/>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle" gap="3"/>
               </s:layout>
            </s:Group>
            <s:Group>
               <s:Label text="{getText('label.willPay', [cost])}"/>
               <s:BitmapImage source="{IMG.getImage(AssetNames.ICONS_IMAGE_FOLDER + 
                              _selectedOffer.toResource)}"/>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle" gap="3"/>
               </s:layout>
            </s:Group>
         </s:Group>
         <credits:FreeCredsWarning visible="{_selectedOffer.toResource == ResourceType.CREDS
                  &amp;&amp; ML.player.creds - ML.player.vipCreds == ML.player.freeCreds
                  &amp;&amp; ML.player.freeCreds > 0}"/>
         <credits:VipCredsWarning visible="{_selectedOffer.toResource == ResourceType.CREDS
                  &amp;&amp; ML.player.vipLevel > 0}"/>
         <base:layout>
            <s:VerticalLayout horizontalAlign="center"/>
         </base:layout>
      </base:AdvancedContainer>
      <base:Warning text="{getText('warning.notFromPlanet')}"
                    paddingTop="6"
                    visible="{ML.player.id == _selectedOffer.fromId
                    &amp;&amp; mScreen.privateOffers.find(_selectedOffer.id) == null}"/>
      <s:Group right="6" toolTip="{cancelCooldown == null
                ? ''
                : getText('toolTip.cancelCooldown')}"
               visible="{ML.player.id == _selectedOffer.fromId
                                 ?(mScreen.privateOffers.find(_selectedOffer.id) != null)
                                 :(!(_selectedOffer.toResource == ResourceType.CREDS
                                 ? ML.player.pureCreds &lt; Math.ceil(1 * _selectedOffer.toRate)
                                 : planetResource(_selectedOffer.toResource).currentStock
                                 &lt; Math.ceil(1 * _selectedOffer.toRate)))}">
        <s:Button label="{ML.player.id != _selectedOffer.fromId
                  ? getText('label.buy')
                  : (cancelCooldown != null
                    ? cancelCooldown
                    : getText('label.cancel'))}"
                  enabled="{ML.player.id == _selectedOffer.fromId
                  ? (cancelCooldown == null ? true : false)
                  :selector.value > 0}"
                  skinClass="components.skins.GreenButtonSkin"
                  click="confirm(event)"/>
      </s:Group>
      <s:Button label="{getText('label.close')}" 
                right="6"
                skinClass="components.skins.RedButtonSkin"
                click="cancel(event)"/>
      <base:layout>
         <s:HorizontalLayout verticalAlign="middle" gap="30"/>
      </base:layout>
   </base:AdvancedContainer>
</s:Group>
