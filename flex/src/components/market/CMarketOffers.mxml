<?xml version="1.0" encoding="utf-8"?>
<base:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" 
         xmlns:base="components.base.*" 
         xmlns:market="components.market.*"
         skinClass="components.skins.LargePanelSkin"
         creationComplete="panel1_creationCompleteHandler(event)"
         title="{getText('title.offers')}">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.market.events.MarketEvent;
         import components.skins.LargePanelSkin;
         
         import globalevents.GMarketEvent;
         
         import models.ModelsCollection;
         import models.events.HeaderEvent;
         import models.market.MarketOffer;
         
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.FlexEvent;
         
         import utils.locale.Localizer;
         
         [Bindable]
         public var offers: ModelsCollection;
         
         
         private function getText(prop: String, params: Array = null): String
         {
            return Localizer.string('Market', prop, params);
         }
         
         private var sortKey: String;
         
         private static const idField: SortField = new SortField('id', false, false, true);
         private static const fromField: SortField = new SortField('from', true);
         private static const whatField: SortField = new SortField('what', false, true, true);
         private static const forWhatField: SortField = new SortField('forWhat', false, true, true);
         private static const rateField: SortField = new SortField('rate', false, false, true);
         private static const createdAtField: SortField = new SortField('createdAt', false, true);
         
         
         private static const sortFields: Object = 
            {
               'from':[fromField, createdAtField, idField],
               'what':[whatField, fromField, createdAtField, idField],
               'forWhat':[forWhatField, fromField, createdAtField, idField],
               'rate':[rateField, fromField, createdAtField, idField],
               'createdAt':[createdAtField, fromField, idField]
            }

         protected function header_listSortHandler(event:HeaderEvent):void
         {
            offers.sort = new Sort();
            offers.sort.fields = sortFields[event.key];
            offers.refresh();
         }
         
         [Bindable]
         public var selected: MarketOffer;

         private function selectedChange(e: GMarketEvent): void
         {
            selected = e.offer;
            selected.selected = true;
            for each (var offer: MarketOffer in offers)
            {
               if (offer.selected && offer != selected)
               {
                  offer.selected = false;
               }
            }
         }

         protected function panel1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GMarketEvent.OFFER_SELECTED, selectedChange);
         }

      ]]>
   </fx:Script>
      <market:CMarketOffersHeader id="header" 
                                  listSort="header_listSortHandler(event)"/>
      <base:Scroller id="contScroller" left="0" right="0" 
                     top="{header.height}" bottom="0" stepMultiplier="10">
         <s:Group width="100%">
            <s:DataGroup dataProvider="{offers}"
                         itemRenderer="components.market.IRMarketOffer">
               <s:layout>
                  <s:VerticalLayout gap="0"/>
               </s:layout>
            </s:DataGroup>
         </s:Group>
      </base:Scroller>
</base:Panel>
