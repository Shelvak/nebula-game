<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:layouts="ext.flex.spark.layouts.*"
        xmlns:base="components.base.*"
        xmlns:ui="components.ui.*" xmlns:movement="components.movement.*"
        mouseEnabled="false"
        minWidth="20" minHeight="20">
   
   <s:states>
      <s:State name="normal"/>
      <s:State name="disabled"/>
   </s:states>
   
   <fx:Metadata>
      [HostComponent("components.movement.CSquadronPopup")]
   </fx:Metadata>
   
   <fx:Script>
      <![CDATA[
         import mx.events.PropertyChangeEvent;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;


         private function getImg(key:String) : BitmapData
         {
            return ImagePreloader.getInstance().getImage(AssetNames.MOVEMENT_IMAGES_FOLDER + "squad_popup_" + key);
         }
         
         
         protected override function initializationComplete() : void
         {
            super.initializationComplete();
            hostComponent.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, host_propertyChangeHandler);
            updateLocButtonsImage();
         }
         
         
         private function host_propertyChangeHandler(event:PropertyChangeEvent) : void
         {
            if (event.property == "showDestLoc")
            {
               updateLocButtonsImage();
            }
         }
         
         
         private function updateLocButtonsImage() : void
         {
            if (hostComponent.showDestLoc)
            {
               imgLocButtons.height = 100;
            }
            else
            {
               imgLocButtons.height = 47;
            }
         }

         private function getText(resourceName:String, parameters:Array = null) : String {
           return Localizer.string("Movement", resourceName, parameters);
         }
      ]]>
   </fx:Script>


   <base:SpinnerContainer busy="{hostComponent.squadron.pending}" left="-7" right="0" top="-33" bottom="0"
                          mouseEnabled="false">
      <!-- squad owner -->
      <s:Group left="36" top="0" width="287" mouseEnabled="false">
         <s:Group left="0" right="0" top="0" bottom="0" mouseEnabled="false">
            <s:layout>
               <s:HorizontalLayout gap="0"/>
            </s:layout>
            <s:BitmapImage source="{getImg('owner_left')}"/>
            <s:BitmapImage source="{getImg('owner_center')}" fillMode="repeat" width="100%"/>
            <s:BitmapImage source="{getImg('owner_right')}"/>
         </s:Group>
         <s:Group left="30" right="0" top="4" bottom="0" mouseEnabled="false">
            <s:layout>
               <s:HorizontalLayout verticalAlign="middle" gap="5"/>
            </s:layout>
            <s:Label id="lblOwner" styleName="ownerTitle"/>
            <ui:PlayerProfileButton id="btnOwner"/>
         </s:Group>
         <s:Group right="40" top="8" bottom="0">
           <s:Button id="btnRewardInfo" label="{getText('label.showKillReward')}"
                     skinClass="components.skins.LinkButtonSkin"/>
         </s:Group>
      </s:Group>
      
      
      <!-- units list background -->
      <s:Group left="0" right="0" top="20" mouseEnabled="false" mouseChildren="false">
         <s:layout>
            <s:HorizontalLayout gap="0"/>
         </s:layout>
         <s:BitmapImage source="{getImg('left')}"/>
         <s:BitmapImage source="{getImg('center')}" fillMode="repeat" width="100%"/>
         <s:BitmapImage source="{getImg('right')}"/>
      </s:Group>
      
      <!-- units list -->
      <s:List id="lstUnits" left="35" top="30" right="25" height="156" useVirtualLayout="true"
              skinClass="components.movement.skins.CSquadronUnitsListSkin"
              visible="{lstUnits.dataProvider.length &lt; 11}"/>
      <!-- units list -->
      <s:List id="lstCachedUnits" left="35" top="30" right="25" height="156"
              skinClass="components.movement.skins.CSquadronCachedUnitsListSkin"
              visible="{lstUnits.dataProvider.length > 10}"/>



      <!-- squadron management buttons -->
      <s:Group left="210" right="16" top="193" mouseEnabled="false">
         <s:layout><s:HorizontalLayout horizontalAlign="right"/></s:layout>
         <s:Button id="btnStop"/>
         <s:Button id="btnMove"/>
         <s:Button id="btnUnitsManagement"/>
      </s:Group>
      
      <!-- source and destination locations -->
      <s:Group left="35" top="209" mouseEnabled="false" visible="{hostComponent.showSourceLoc || hostComponent.showDestLoc}">
         <s:BitmapImage id="imgLocBackground" source="{getImg('loc_background')}"/>
         <s:Group left="20" right="12" top="7" mouseEnabled="false">
            <s:BitmapImage id="imgLocButtons" right="0" source="{getImg('loc_buttons')}" fillMode="clip"/>
            
            <s:Button id="btnOpenSourceLoc" right="5" width="78" top="22" visible="{hostComponent.showSourceLoc}"/>
            <s:Label id="lblSourceLocTitle" left="0" top="14" fontWeight="bold" visible="{hostComponent.showSourceLoc}"/>
            <s:Label id="lblSourceLoc" left="0" top="29" visible="{hostComponent.showSourceLoc}"/>
            
            <s:Button id="btnOpenDestLoc" right="5" width="78" top="75" visible="{hostComponent.showDestLoc}"/>
            <s:Label id="lblDestLocTitle" left="0" top="63" fontWeight="bold" visible="{hostComponent.showDestLoc}"/>
            <s:Label id="lblDestLoc" left="0" top="78" visible="{hostComponent.showDestLoc}"/>
            <s:Label id="lblArrivesIn" left="0" lineBreak="explicit"
                     textAlign="center" top="105" fontWeight="bold"
                     visible="{hostComponent.showDestLoc}"/>
         </s:Group>
      </s:Group>

      <s:Group left="150" top="-95"
                 height="90" mouseEnabled="false"
                 visible="{killRewardContainer.visible ||
                           noRewardContainer.visible}">
      <!--    <s:Rect top="4" bottom="4" right="2" left="2">
            <s:fill>
              <s:SolidColor color="#0f0f0f"/>
            </s:fill>
          </s:Rect>-->
        <movement:RewardGroupBackground left="0" right="0" top="0" bottom="0"
                                        mouseEnabled="false"/>
        <s:Button right="8" top="8" skinClass="components.skins.DeleteButtonSkin"
                  click="killRewardContainer.visible = false;
                        noRewardContainer.visible = false"/>
        <s:Group id="noRewardContainer" top="0" bottom="0" right="0" left="0"
          visible="false" mouseEnabled="false">
          <s:Group left="6" right="6" bottom="4" top="8" mouseEnabled="false">
            <s:Label text="{getText('title.noKillBonus')}" left="3" right="3"
                     mouseEnabled="false" textAlign="center" verticalCenter="0"/>
          </s:Group>
        </s:Group>
        <s:Group id="killRewardContainer" top="0" bottom="0" right="0" left="0"
          visible="false" mouseEnabled="false">
          <s:Group left="6" right="2" verticalCenter="-5" mouseEnabled="false">
            <s:Label id="lblKillBonusTitle" fontWeight="bold"
                     text="{getText('title.killBonus')}" left="3" right="3"
                     mouseEnabled="false"/>
            <s:Group top="{lblKillBonusTitle.height + 6}" left="6" right="6"
                     mouseEnabled="false" >
              <s:Group id="credsGroup">
                <s:Label text="{getText('label.credsKillBonus')}" width="100"/>
                <s:Label id="lblKillCreds"/>
                <s:layout><s:HorizontalLayout/></s:layout>
              </s:Group>
              <s:Group id="vpsGroup">
                <s:Label text="{getText('label.vpsKillBonus')}" width="100"/>
                <s:Label id="lblKillVps"/>
                <s:layout><s:HorizontalLayout/></s:layout>
              </s:Group>
              <s:Group width="100%" id="honorGroup">
                <s:Line width="100%" id="honorLine">
                  <s:stroke>
                    <s:SolidColorStroke color="#afafaf"/>
                  </s:stroke>
                </s:Line>
                <s:Group top="{honorLine.height + 6}"
                         toolTip="{getText('tooltip.honorCoef')}">
                  <s:Label text="{getText('label.honorCoef')}" width="100"
                           color="#afafaf"/>
                  <s:Label id="lblHonorCoef" color="#afafaf"/>
                  <s:layout>
                    <s:HorizontalLayout/>
                  </s:layout>
                </s:Group>
              </s:Group>
              <s:layout><s:VerticalLayout/></s:layout>
            </s:Group>
         </s:Group>
       </s:Group>
     </s:Group>
      
   </base:SpinnerContainer>
   
</s:Skin>
