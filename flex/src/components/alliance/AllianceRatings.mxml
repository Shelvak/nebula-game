<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx" 
                    xmlns:base="components.base.*"
                    xmlns:alliance="components.alliance.*"
                    xmlns:screens="components.screens.*"
                    xmlns:ratings="components.ratings.*"
                    width="100%" height="100%" 
                    creationComplete="basecontainer1_creationCompleteHandler(event)" >
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.ratings.events.RatingsEvent;
         
         import config.Config;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GRatingsEvent;
         
         import models.player.MRatingPlayer;
         
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.FlexEvent;
         
         import spark.components.TextInput;
         import spark.events.TextOperationEvent;
         
         import utils.assets.AssetNames;
         import utils.locale.Localizer;
         
         
         private var _searchText:String;
         private function setSearchText(value:String) : void
         {
            if (_searchText != value)
            {
               _searchText = value;
               if (searchHeader != null && searchHeader.txtSearch != null)
               {
                  searchHeader.txtSearch.text = value;
               }
            }
         }
         
         
         protected function textinput1_changeHandler(event:TextOperationEvent):void
         {
            setSearchText(TextInput(event.target).text);
            ML.allyRatings.filterFunction = function (item: MRatingPlayer): Boolean
            {
               return item.name.toLowerCase().indexOf(_searchText.toLowerCase()) != -1;
            };
            ML.allyRatings.refresh();
         }
         
         private function filterAlly(e: GRatingsEvent): void
         {
            setSearchText(e.filterName);
            ML.allyRatings.filterFunction = function (item: MRatingPlayer): Boolean
            {
               return item.name.toLowerCase().indexOf(_searchText.toLowerCase()) != -1;
            };
            ML.allyRatings.refresh();
         }
         
         private function refreshAll(e: GRatingsEvent): void
         {
            setSearchText("");
            header.reset();
         }
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GRatingsEvent.ALLIANCE_RATINGS_REFRESH, refreshAll);
            EventBroker.subscribe(GRatingsEvent.FILTER_ALLIANCE, filterAlly);
            NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
         }
         
         private var sortKey: String;
         
         private static const nameField: SortField = new SortField('name', true);
         private static const rankField: SortField = new SortField('rank', false, false, true);
         private static const playersCountField: SortField = new SortField('playersCount', false, true, true);
         private static const victoryPtsField: SortField = new SortField('victoryPoints', false, true, true);
         private static const pointsField: SortField = new SortField('points', false, true, true);
         private static const planetsCountField: SortField = new SortField('planetsCount', false, true, true);
         private static const economyPtsField: SortField = new SortField('economyPoints', false, true, true);
         private static const sciencePtsField: SortField = new SortField('sciencePoints', false, true, true);
         private static const armyPtsField: SortField = new SortField('armyPoints', false, true, true);
         private static const warPtsField: SortField = new SortField('warPoints', false, true, true);
         
         
         private static const sortFields: Object = 
            {
               'rank':[rankField],
               'name':[nameField],
               'playersCount':[playersCountField, victoryPtsField, pointsField, planetsCountField, nameField],
               'planetsCount':[planetsCountField, victoryPtsField, pointsField, nameField],
               'economyPoints':[economyPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'sciencePoints':[sciencePtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'armyPoints':[armyPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'warPoints':[warPtsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'victoryPoints':[victoryPtsField, pointsField, planetsCountField, nameField],
               'points':[pointsField, victoryPtsField, planetsCountField, nameField]
            }
         
         protected function header_ratingsSortHandler(event:RatingsEvent):void
         {
            ML.allyRatings.sort = new Sort();
            ML.allyRatings.sort.fields = sortFields[event.key];
            ML.allyRatings.refresh();
         }
         
      ]]>
   </fx:Script>
   <screens:GradientBackground gradientWidth="{(width - searchHeader.width) / 2}"/>
   <base:AdvancedContainer left="0" right="0" top="0" bottom="0">
      
      <ratings:RatingsSearchHeader id="searchHeader"
                                   searchTextInputChangeHandler="{textinput1_changeHandler}"
                                   filterOnlineCheckBoxVisible="false"/>
      
      <base:Panel height="100%" horizontalCenter="0" 
                  skinClass="components.skins.LargePanelSkin"
                  title="{Localizer.string('Ratings', 'label.allyRatings')}">
         <s:Label fontSize="24" text="{Localizer.string('Ratings', 'label.noAlliances')}"
                  horizontalCenter="0" verticalCenter="0" visible="{ML.allyRatings.length == 0}"/>
         <alliance:AllianceRatingsHeader id="header" ratingsSort="header_ratingsSortHandler(event)" 
                                         visible="{ML.allyRatings.length > 0}" horizontalCenter="0"/>
         <base:Scroller left="0" right="0" top="{header.height}" bottom="0" stepMultiplier="10"
                        id="contScroller">
            <s:Group width="100%">
               <s:DataGroup dataProvider="{ML.allyRatings}" horizontalCenter="0"
                            itemRenderer="components.alliance.IRAllianceRatingsRow">
                  <s:layout>
                     <s:VerticalLayout gap="0"/>
                  </s:layout>
               </s:DataGroup>
            </s:Group>
         </base:Scroller>
      </base:Panel>
      <base:layout>
         <s:VerticalLayout horizontalAlign="center" gap="10" paddingTop="10"/>
      </base:layout>
   </base:AdvancedContainer>
   <screens:ScreenCloseButton label="{Localizer.string('Ratings', 'label.close')}"
                              right="0" bottom="0"
                              click="NavigationController.getInstance().showPreviousScreen()"/>
</base:BaseContainer>
