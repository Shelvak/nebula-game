<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:ratings="components.ratings.*"
         xmlns:alliance="components.alliance.*"
         xmlns:base="components.base.*"
         xmlns:screens="components.screens.*"
         creationComplete="this_creationCompleteHandler(event)"
         width="100%" height="100%">
   <fx:Binding source="ML.player.allianceCooldown.occuresIn" destination="leftTime"/>
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.popups.ActionConfirmationPopup;
         import components.skins.LinkButtonSkin;
         
         import config.Config;
         
         import controllers.GlobalFlags;
         import controllers.alliances.AlliancesCommand;
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import globalevents.GAllianceEvent;
         
         import models.ModelLocator;
         import models.technology.Technology;
         
         import mx.events.FlexEvent;
         
         import utils.DateUtil;
         import utils.UrlNavigate;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         [Bindable(event="willNotChange")]
         private function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         
         [Bindable(event="willNotChange")]
         private function get model() : AllianceScreenM {
            return AllianceScreenM.getInstance();
         }
         
         [Bindable (event="willNotChange")]
         private function get allianceTech(): Technology
         {
            return ML.technologies.getTechnologyByType('alliances');
         }
         
         private function createAlliance(e: Event): void
         {
            if (allyName.text.length >= Config.getMinAllyNameLength())
            {
               GlobalFlags.getInstance().lockApplication = true;
               allianceExists = false;
               EventBroker.subscribe(GAllianceEvent.ALLIANCE_CONFIRMED, removeAlliancePending);
               EventBroker.subscribe(GAllianceEvent.ALLIANCE_FAILED, removeAlliancePending);
               new AlliancesCommand(AlliancesCommand.NEW, 
                  {'name': allyName.text}).dispatch();
            }
         }
         
         private function removeAlliancePending(e: GAllianceEvent): void
         {
            EventBroker.unsubscribe(GAllianceEvent.ALLIANCE_CONFIRMED, removeAlliancePending);
            EventBroker.unsubscribe(GAllianceEvent.ALLIANCE_FAILED, removeAlliancePending);
            if (e.type == GAllianceEvent.ALLIANCE_FAILED)
            {
               allianceExists = true;
            }
            GlobalFlags.getInstance().lockApplication = false;
         }
         
         [Bindable]
         private var allianceExists: Boolean = false;
         
         protected function this_creationCompleteHandler(event:FlexEvent):void
         {
            NavigationController.getInstance().creationCompleteFunction(MainAreaScreens.ALLIANCE, this);
            
            tabDescription.width =
               tabManagement.width = Math.max(tabDescription.width, tabManagement.width);
         }
         
         [Bindable]
         private var leftTime: Number = 0;
         
         private function renameAlliance(e: MouseEvent): void
         {
            if (ML.player.creds < Config.getEditAllianceCredits())
            {
               UrlNavigate.getInstance().showBuyCreds();
            }
            else if (allyNewName.text.length >= Config.getMinAllyNameLength())
            {
               
               var popUp: ActionConfirmationPopup = new ActionConfirmationPopup();
               popUp.confirmButtonLabel = Localizer.string('Popups', 'label.yes');
               popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
               var lbl: Label = new Label();
               lbl.minWidth = 300;
               lbl.text = Localizer.string('Popups', 'message.renameAlliance',
                  [allyNewName.text, Config.getEditAllianceCredits()]);
               popUp.addElement(lbl);
               popUp.title = Localizer.string('Popups', 'title.renameAlliance');
               popUp.confirmButtonClickHandler = function (button: Button = null): void
               {
                  GlobalFlags.getInstance().lockApplication = true;
                  new AlliancesCommand(AlliancesCommand.EDIT, 
                     {'name': allyNewName.text}).dispatch();
                  allyNewName.text = '';
               };
               popUp.show();
            }
         }
         
         [Bindable]
         private var editing: Boolean = false;
         
         protected function save_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            model.alliance.newDescription = desc.text;
            new AlliancesCommand(AlliancesCommand.EDIT_DESCRIPTION, 
               model.alliance).dispatch();
            editing = false;
         }
         
         
         private function getString(property:String, parameters:Array = null) : String
         {
            return Localizer.string("Alliances", property, parameters);
         }
         
         
         private function getImage(name:String) : BitmapData
         {
            return ImagePreloader.getInstance().getImage(AssetNames.ALLIANCE_SCREEN_IMAGE_FOLDER + name);
         }
      ]]>
   </fx:Script>
   <screens:GradientBackground gradientWidth="{(width - 400) / 2}" />
   
   <s:Group top="0" horizontalCenter="0" depth="2">
      <s:layout>
         <s:HorizontalLayout gap="-45"/>
      </s:layout>
      <!-- "name" is used by skin -->
      <s:ToggleButton id="tabDescription" name="descr" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.description')}" minWidth="210" fontSize="15"
                      enabled="{model.descriptionTabEnabled}"
                      selected="{model.descriptionTabSelected}"
                      click="model.selectDescriptionTab()"/>
      <s:ToggleButton id="tabPlayers" name="players" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.players')}" 
                      minWidth="276" depth="10" fontSize="18"
                      enabled="{model.playersTabEnabled}"
                      selected="{model.playersTabSelected}"
                      click="model.selectPlayersTab()"/>  
      <s:ToggleButton id="tabManagement"  name="manage" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.management')}" minWidth="210" fontSize="15"
                      enabled="{model.managementTabEnabled}"
                      selected="{model.managementTabSelected}"
                      click="model.selectManagementTab()"/>
   </s:Group>
   
   <base:Scroller id="contentScroller" top="35" bottom="10" width="100%" horizontalScrollPolicy="off"
                  stepMultiplier="15" depth="1">
      
      <s:Group left="0" right="0">
         
         <base:AdvancedContainer horizontalCenter="{
                                 contentScroller.verticalScrollBar.visible
                                 ? 8 : 0}" 
                                 minWidth="{pnlPlayers.width}">
            
            <base:layout>
               <s:VerticalLayout horizontalAlign="contentJustify" paddingBottom="90"/>
            </base:layout>
            <s:Group width="100%" clipAndEnableScrolling="true">
               <!-- Alliance logo -->
               <s:BitmapImage source="{getImage('logo')}" horizontalCenter="0" top="-35"/>
            </s:Group>
            <!-- Description -->
            <base:Panel title="{model.alliance.name}" skinClass="components.skins.LargePanelSkin"
                        visible="{model.descriptionPanelVisible}">
               <base:layout>
                  <s:VerticalLayout/>
               </base:layout>
               <s:Group>
                  <s:layout>
                     <s:HorizontalLayout verticalAlign="middle" paddingBottom="3"/>
                  </s:layout>
                  <s:Label text="{getString('label.allianceOwner')}" 
                           fontSize="14" width="150"/>
                  <s:Button label="{model.alliance.getPlayerName(model.alliance.ownerId)}"
                            click="NavigationController.getInstance().showPlayer(
                            model.alliance.ownerId)"
                            skinClass="components.skins.LinkButtonSkin"/>
               </s:Group>
               <s:Group>
                  <s:layout>
                     <s:HorizontalLayout verticalAlign="middle" paddingBottom="3"/>
                  </s:layout>
                  <s:Label text="{getString('label.totalAllianceVps')}"
                           fontSize="14" width="150"/>
                  <s:Label text="{model.alliance.totalAllianceVps}" fontSize="14"/>
               </s:Group>
               
               <s:Label text="{getString('label.allianceDescription')}" fontSize="14"
                        paddingTop="6" fontWeight="bold"/>
               <s:TextArea id="desc" paddingBottom="6" width="100%" height="150" 
                           editable="{editing}"
                           fontSize="12" color="#eec500" fontWeight="bold"
                           verticalScrollPolicy="off" horizontalScrollPolicy="off"
                           maxChars="{Config.getMaxAllyDescriptionLength()}"
                           text="{model.alliance.newDescription}"/>
               <base:AdvancedContainer width="100%"
                                       visible="{model.alliance != null 
                                       &amp;&amp; model.alliance.ownerId == ML.player.id}">
                  <base:layout>
                     <s:HorizontalLayout horizontalAlign="right"/>
                  </base:layout>
                  <s:Button label="{getString('label.editDescription')}"
                            visible="{!editing}">
                     <s:click>
                        editing = true;
                        desc.setFocus();
                     </s:click>
                  </s:Button>
                  <s:Button label="{getString('label.save')}" click="save_clickHandler(event)" 
                            visible="{editing}"/>
                  <s:Button label="{getString('label.cancel')}" visible="{editing}">
                     <s:click>
                        editing = false;
                        model.alliance.newDescription = model.alliance.description;
                     </s:click>
                  </s:Button>
               </base:AdvancedContainer>
            </base:Panel>
            
            <!-- Players -->
            <base:Panel id="pnlPlayers" title="{model.alliance.name}"
                        visible="{model.playersPanelVisible}"
                        skinClass="components.skins.LargePanelSkin">
               <base:layout>
                  <s:VerticalLayout horizontalAlign="right"/>
               </base:layout>
               <s:Group>
                  <s:layout>
                     <s:VerticalLayout gap="0" horizontalAlign="contentJustify"/>
                  </s:layout>
                  <alliance:MembersRatingsHeader id="header"
                                                 listSort="model.header_ratingsSortHandler(event)"/>
                  <s:DataGroup dataProvider="{model.alliance.players}"
                               itemRenderer="components.alliance.IRMembersRatingsRow">
                     <s:layout>
                        <s:VerticalLayout gap="0"/>
                     </s:layout>
                  </s:DataGroup>
                  <alliance:TotalAliancePointsComp bottom="0" id="total" alliance="{model.alliance}"/>
               </s:Group>
               <s:Button label="{getString('label.refresh')}" 
                         click="model.refresh_clickHandler(event)"/>
            </base:Panel>
            
            <!-- Management -->
            <base:Panel title="{model.alliance.name}" minHeight="200"
                        visible="{model.managementPanelVisible}"
                        skinClass="components.skins.LargePanelSkin">
               
               <base:AdvancedContainer left="0" right="0" bottom="0" top="0">
                  
                  <base:layout>
                     <s:VerticalLayout horizontalAlign="center" gap="20"/>
                  </base:layout>
                  
                  <s:Group visible="{model.alliance.ownerId == ML.player.id}" width="60%">
                     <s:layout>
                        <s:VerticalLayout horizontalAlign="center" gap="6"/>
                     </s:layout>
                     <s:Label text="{getString('label.renameAlliance')}" fontSize="16"/>
                     <s:Group width="100%">
                        <s:layout>
                           <s:HorizontalLayout verticalAlign="middle"/>
                        </s:layout>
                        <base:BaseTextInput width="100%" id="allyNewName" enter="createAlliance(event)"
                                            maxChars="{Config.getMaxAllyNameLength()}"/>
                        <s:Button enabled="{ML.player.creds &lt; Config.getEditAllianceCredits() ||
                                  allyNewName.text.length >= Config.getMinAllyNameLength()}"
                                  skinClass="components.skins.CreditButtonSkin"
                                  click="renameAlliance(event)" 
                                  label="{ML.player.creds &lt; Config.getEditAllianceCredits() ?
                                  Localizer.string('Credits', 'label.buy') :
                                  getString('label.rename')}"/>
                     </s:Group>
                     <s:Label text="{getString('label.renameCost', [Config.getEditAllianceCredits()])}" fontSize="14"/>
                  </s:Group>
                  
                  <alliance:CLeaveAlly/>
                  
                  <base:AdvancedContainer width="100%" 
                                          visible="{model.alliance.invPlayers 
                                          != null}">
                     <base:layout>
                        <s:VerticalLayout gap="10" paddingTop="3"
                                          horizontalAlign="center"/>
                     </base:layout>
                     <base:Heading text="{getString('label.invitablePlayers')}"
                                   width="100%"/>
                     
                     <base:Warning maxWidth="450"
                              text="{getString('label.explanationInvite')}"
                              paddingTop="6" paddingBottom="6"/>
                     
                     <s:Label fontSize="18" visible="{
                              model.alliance.invPlayers.length == 0}"
                              text="{getString('label.nothingToInvite')}"
                              textAlign="center"
                              width="100%"/>
                              
                     <s:Group visible="{model.alliance.invPlayers.length > 0}">
                        <s:layout>
                           <s:VerticalLayout gap="0" horizontalAlign="contentJustify"/>
                        </s:layout>
                        <alliance:MembersRatingsHeader avpVisible="false" 
                           listSort="model.header_inviteSortHandler(event)"/>
                        <s:DataGroup 
                           dataProvider="{model.alliance.invPlayers}"
                           itemRenderer="components.alliance.IRInvitableRatingsRow">
                           <s:layout>
                              <s:VerticalLayout gap="0"/>
                           </s:layout>
                        </s:DataGroup>
                     </s:Group>
                  </base:AdvancedContainer>
                  
               </base:AdvancedContainer>
               
            </base:Panel>
            
            <!-- New alliance creation -->
            <base:Panel title="{getString('title.section.newAlliance')}"
                        skinClass="components.skins.LargePanelSkin"
                        visible="{model.alliance == null &amp;&amp; allianceTech.upgradePart.level > 0 &amp;&amp;
                        ML.player.allianceId == 0 &amp;&amp; leftTime == 0}">
               <base:layout>
                  <s:VerticalLayout gap="5" horizontalAlign="justify"/>
               </base:layout>
               <s:Label fontSize="18" text="{getString('label.noAlly')}"/>
               <s:Label fontSize="18" text="{getString('label.allyExists')}" color="#ff0000" visible="{allianceExists}"/>
               <s:Group>
                  <s:layout>
                     <s:HorizontalLayout gap="10" verticalAlign="middle"/>
                  </s:layout>
                  <s:Label text="{getString('label.name')}" fontSize="14"/>
                  <base:BaseTextInput width="100%" id="allyName" enter="createAlliance(event)"
                                      maxChars="{Config.getMaxAllyNameLength()}"/>
                  <s:Button enabled="{allyName.text.length >= Config.getMinAllyNameLength()}"
                            click="createAlliance(event)" label="{getString('label.create')}"/>
                  
               </s:Group>
            </base:Panel>
            
            
         </base:AdvancedContainer>
         
         <base:AdvancedContainer top="300" width="100%">
            
            <base:layout>
               <s:VerticalLayout horizontalAlign="center"/>
            </base:layout>
            
            <!-- Error message when palyer does not have required technology -->
            <base:Warning text="{getString('label.noTech')}" width="60%"
                          visible="{allianceTech.upgradePart.level &lt; 1 
                          &amp;&amp; ML.player.allianceId == 0
                          &amp;&amp; model.alliance == null}"/>
            
            <!-- Cooldown warning -->
            <base:Warning text="{getString('label.cooldown', [DateUtil.secondsToHumanString(leftTime, 2)])}" 
                          width="60%" visible="{model.alliance == null &amp;&amp; leftTime > 0}"/>
            
         </base:AdvancedContainer>
         
      </s:Group>
   </base:Scroller>
   
   <screens:ScreenCloseButton scroller="{contentScroller}" depth="3"
                              label="{getString('label.close')}" right="0" bottom="0"
                              click="NavigationController.getInstance().showPreviousScreen()"/>
</s:Group>
