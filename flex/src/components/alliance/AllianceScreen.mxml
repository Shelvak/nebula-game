<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:ratings="components.ratings.*"
         xmlns:alliance="components.alliance.*"
         xmlns:base="components.base.*"
         xmlns:screens="components.screens.*"
         creationComplete="this_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.popups.ErrorPopup;
         import components.ratings.events.RatingsEvent;
         import components.skins.LinkButtonSkin;
         
         import config.Config;
         
         import controllers.GlobalFlags;
         import controllers.alliances.AlliancesCommand;
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import globalevents.GAllianceEvent;
         import globalevents.GlobalEvent;
         
         import models.ModelLocator;
         import models.alliance.MAlliance;
         import models.technology.Technology;
         
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         
         import utils.DateUtil;
         import utils.UrlNavigate;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.components.ToggleButtonsGroup;
         import utils.locale.Localizer;
         
         [Bindable]
         public var alliance: MAlliance;
         
         [Bindable (event="willNotChange")]
         private function get allianceTech(): Technology
         {
            return ML.technologies.getTechnologyByType('alliances');
         }
         
         private function createAlliance(e: Event): void
         {
            if (allyName.text.length >= Config.getMinAllyNameLength())
            {
               allyPending = true;
               allianceExists = false;
               EventBroker.subscribe(GAllianceEvent.ALLIANCE_CONFIRMED, removeAlliancePending);
               EventBroker.subscribe(GAllianceEvent.ALLIANCE_FAILED, removeAlliancePending);
               new AlliancesCommand(AlliancesCommand.NEW, 
                  {'name': allyName.text}).dispatch();
            }
         }
         
         private function removeAlliancePending(e: GAllianceEvent): void
         {
            EventBroker.unsubscribe(GAllianceEvent.ALLIANCE_CONFIRMED, removeAlliancePending);
            EventBroker.unsubscribe(GAllianceEvent.ALLIANCE_FAILED, removeAlliancePending);
            if (e.type == GAllianceEvent.ALLIANCE_FAILED)
            {
               allianceExists = true;
            }
            allyPending = false;
         }
         
         [Bindable]
         private var allianceExists: Boolean = false;
         
         [Bindable]
         private var allyPending: Boolean = false;
         
         [Bindable]
         private var ML: ModelLocator = ModelLocator.getInstance();
         
         private var tabGroup:ToggleButtonsGroup;
         
         protected function this_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshCurrentTime);
            NavigationController.getInstance().creationCompleteFunction(MainAreaScreens.ALLIANCE, this);
            
            tabDescription.width =
            tabManagement.width = Math.max(tabDescription.width, tabManagement.width);
            tabGroup = new ToggleButtonsGroup();
            tabGroup.registerButton(tabDescription);
            tabGroup.registerButton(tabPlayers);
            tabGroup.registerButton(tabManagement);
            tabGroup.select(tabDescription);
         }
         
         [Bindable]
         private var leftTime: Number = 0;
         
         private function refreshCurrentTime(e: GlobalEvent): void
         {
            var cTime: Number = new Date().time;
            if (ML.player.allianceCooldownEndsAt && ML.player.allianceCooldownEndsAt.time > cTime)
            {
               leftTime = ML.player.allianceCooldownEndsAt.time - cTime;
            }
            else
            {
               leftTime = 0;
            }
         }        
         
         private var sortKey: String;
         
         private static const nameField: SortField = new SortField('name', true);
         private static const rankField: SortField = new SortField('rank', false, false, true);
         private static const allianceField: SortField = new SortField('alliance', true);
         private static const victoryPtsField: SortField = new SortField('victoryPoints', false, true, true);
         private static const allianceVpsField: SortField = new SortField('allianceVps', false, true, true);
         private static const pointsField: SortField = new SortField('points', false, true, true);
         private static const planetsCountField: SortField = new SortField('planetsCount', false, true, true);
         private static const economyPtsField: SortField = new SortField('economyPoints', false, true, true);
         private static const sciencePtsField: SortField = new SortField('sciencePoints', false, true, true);
         private static const armyPtsField: SortField = new SortField('armyPoints', false, true, true);
         private static const warPtsField: SortField = new SortField('warPoints', false, true, true);
         
         
         private static const sortFields: Object = 
            {
               'rank':[rankField],
               'name':[nameField],
               'alliance':[allianceField, allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'planetsCount':[planetsCountField, allianceVpsField, victoryPtsField, pointsField, nameField],
               'economyPoints':[economyPtsField, allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'sciencePoints':[sciencePtsField, allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'armyPoints':[armyPtsField, allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'warPoints':[warPtsField, allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'victoryPoints':[victoryPtsField, allianceVpsField, pointsField, planetsCountField, nameField],
               'allianceVps':[allianceVpsField, victoryPtsField, pointsField, planetsCountField, nameField],
               'points':[pointsField, allianceVpsField, victoryPtsField, planetsCountField, nameField]
            }
         
         protected function header_ratingsSortHandler(event:RatingsEvent):void
         {
            alliance.players.sort = new Sort();
            alliance.players.sort.fields = sortFields[event.key];
            alliance.players.refresh();
         }
         
         protected function refresh_clickHandler(event:MouseEvent):void
         {
            new AlliancesCommand(AlliancesCommand.SHOW, {'id': ML.player.allianceId}).dispatch();
         }
         
         protected function leave_clickHandler(event:MouseEvent):void
         {
            var popUp: ErrorPopup = new ErrorPopup();
            popUp.retryButtonLabel = Localizer.string('Popups', 'label.yes');
            popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
            popUp.showCancelButton = true;
            popUp.showRetryButton = true;
            popUp.message = alliance.ownerId == ML.player.id
               ? Localizer.string('Popups', 'message.leaveSelfAlly')
               : Localizer.string('Popups', 'message.leaveAlly', 
                  [DateUtil.secondsToHumanString(Config.getAllianceLeaveCooldown())]);
            popUp.title = Localizer.string('Popups', 'title.leaveAlly');
            popUp.retryButtonClickHandler = function (button: Button = null): void
            {
               GlobalFlags.getInstance().lockApplication = true;
               new AlliancesCommand(AlliancesCommand.LEAVE).dispatch();
               alliance = null;
            };
            popUp.show();
         }
         
         private function renameAlliance(e: MouseEvent): void
         {
            if (ML.player.creds < Config.getEditAllianceCredits())
            {
               UrlNavigate.getInstance().showBuyCreds();
            }
            else if (allyNewName.text.length >= Config.getMinAllyNameLength())
            {
               var popUp: ErrorPopup = new ErrorPopup();
               popUp.retryButtonLabel = Localizer.string('Popups', 'label.yes');
               popUp.cancelButtonLabel = Localizer.string('Popups', 'label.no');
               popUp.showCancelButton = true;
               popUp.showRetryButton = true;
               popUp.message = Localizer.string('Popups', 'message.renameAlliance',
                  [allyNewName.text, Config.getEditAllianceCredits()]);
               popUp.title = Localizer.string('Popups', 'title.renameAlliance');
               popUp.retryButtonClickHandler = function (button: Button = null): void
               {
                  GlobalFlags.getInstance().lockApplication = true;
                  new AlliancesCommand(AlliancesCommand.EDIT, 
                     {'name': allyNewName.text}).dispatch();
                  alliance.name = allyNewName.text;
                  allyNewName.text = '';
               };
               popUp.show();
            }
         }
         
         [Bindable]
         private var editing: Boolean = false;
         
         protected function save_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            alliance.newDescription = desc.text;
            new AlliancesCommand(AlliancesCommand.EDIT_DESCRIPTION, 
               alliance).dispatch();
            editing = false;
         }
         
         
         private function getString(property:String, parameters:Array = null) : String
         {
            return Localizer.string("Alliances", property, parameters);
         }
         
         
         private function getImage(name:String) : BitmapData
         {
            return ImagePreloader.getInstance().getImage(AssetNames.ALLIANCE_SCREEN_IMAGE_FOLDER + name);
         }
      ]]>
   </fx:Script>
   <screens:GradientBackground gradientWidth="{(width - 400) / 2}" />
   
   <!-- Alliance logo and tabs -->
   <s:BitmapImage source="{getImage('logo')}" horizontalCenter="0" top="0"/>
   <s:Group top="0" horizontalCenter="0">
      <s:layout>
         <s:HorizontalLayout gap="-45"/>
      </s:layout>
      <!-- "name" is used by skin -->
      <s:ToggleButton id="tabDescription" name="descr" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.description')}" minWidth="210"
                      fontSize="15" enabled="{alliance != null}"/>
      <s:ToggleButton id="tabPlayers"     name="players" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.players')}"     minWidth="276" depth="10"
                      fontSize="18" enabled="{alliance != null}"/>  
      <s:ToggleButton id="tabManagement"  name="manage" skinClass="components.alliance.SectionTabSkin"
                      label="{getString('title.section.management')}"  minWidth="210"
                      fontSize="15" enabled="{alliance != null}"/>
   </s:Group>
   
   <s:Group top="230" horizontalCenter="0">
      
      <s:Group horizontalCenter="0">
         
         <!-- Description -->
         <base:Panel title="{alliance.name}" skinClass="components.skins.LargePanelSkin"
                     visible="{tabDescription.selected &amp;&amp; alliance != null}" width="100%">
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            <s:Group>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle" paddingBottom="3"/>
               </s:layout>
               <s:Label text="{getString('label.allianceOwner')}" 
                        fontSize="14" width="150"/>
               <s:Button label="{alliance.getPlayerName(alliance.ownerId)}"
                         click="NavigationController.getInstance().showPlayer(
                         alliance.ownerId)"
                         skinClass="components.skins.LinkButtonSkin"/>
            </s:Group>
            <s:Group>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle" paddingBottom="3"/>
               </s:layout>
               <s:Label text="{getString('label.totalAllianceVps')}"
                        fontSize="14" width="150"/>
               <s:Label text="{alliance.totalAllianceVps}" fontSize="14"/>
            </s:Group>
               
            <s:Label text="{getString('label.allianceDescription')}" fontSize="14"
                     paddingTop="6" fontWeight="bold"/>
            <s:TextArea id="desc" paddingBottom="6" width="100%" height="150" editable="{editing}"
                        fontSize="12" color="#eec500" fontWeight="bold"
                        maxChars="{Config.getMaxAllyDescriptionLength()}"
                        text="{alliance.newDescription}"/>
            <base:AdvancedContainer width="100%"
                                    visible="{alliance != null &amp;&amp; alliance.ownerId == ML.player.id}">
               <base:layout>
                  <s:HorizontalLayout horizontalAlign="right"/>
               </base:layout>
               <s:Button label="{getString('label.editDescription')}"
                         visible="{!editing}">
                  <s:click>
                     editing = true;
                     desc.setFocus();
                  </s:click>
               </s:Button>
               <s:Button label="{getString('label.save')}" click="save_clickHandler(event)" visible="{editing}"/>
               <s:Button label="{getString('label.cancel')}" visible="{editing}">
                  <s:click>
                     editing = false;
                     alliance.newDescription = alliance.description;
                  </s:click>
               </s:Button>
            </base:AdvancedContainer>
         </base:Panel>
         
         <!-- Players -->
         <base:Panel title="{alliance.name}" width="100%"
                     visible="{tabPlayers.selected &amp;&amp; alliance != null}"
                     skinClass="components.skins.LargePanelSkin">
            <base:layout>
               <s:VerticalLayout horizontalAlign="right"/>
            </base:layout>
            <s:Group maxHeight="200">
               <alliance:MembersRatingsHeader id="header" ratingsSort="header_ratingsSortHandler(event)"/>
               <alliance:TotalAliancePointsComp bottom="0" id="total" alliance="{alliance}"/>
               <base:Scroller left="0" right="0" top="{header.height}" bottom="{total.height}" stepMultiplier="10">
                  <s:Group left="0" right="0">
                     <s:DataGroup dataProvider="{alliance.players}" horizontalCenter="0"
                                  itemRenderer="components.alliance.IRMembersRatingsRow">
                        <s:layout>
                           <s:VerticalLayout gap="0"/>
                        </s:layout>
                     </s:DataGroup>
                  </s:Group>
               </base:Scroller>
            </s:Group>
            <s:Button label="{getString('label.refresh')}" click="refresh_clickHandler(event)"/>
         </base:Panel>
         
         <!-- Management -->
         <base:Panel title="{alliance.name}" width="100%"
                     visible="{tabManagement.selected &amp;&amp; alliance != null}"
                     skinClass="components.skins.LargePanelSkin">
            <base:layout>
               <s:VerticalLayout horizontalAlign="center" gap="20"/>
            </base:layout>
            
            <s:Group visible="{alliance.ownerId == ML.player.id}" width="60%">
               <s:layout>
                  <s:VerticalLayout horizontalAlign="center" gap="6"/>
               </s:layout>
               <s:Label text="{getString('label.renameAlliance')}" fontSize="16"/>
               <s:Group width="100%">
                  <s:layout>
                     <s:HorizontalLayout verticalAlign="middle"/>
                  </s:layout>
                  <base:BaseTextInput width="100%" id="allyNewName" enter="createAlliance(event)"
                                      maxChars="{Config.getMaxAllyNameLength()}"/>
                  <s:Button enabled="{ML.player.creds &lt; Config.getEditAllianceCredits() ||
                                      allyNewName.text.length >= Config.getMinAllyNameLength()
                                      &amp;&amp; !allyPending}"
                            skinClass="components.skins.CreditButtonSkin"
                            click="renameAlliance(event)" 
                            label="{ML.player.creds &lt; Config.getEditAllianceCredits() ?
                                       Localizer.string('Credits', 'label.buy') :
                                       getString('label.rename')}"/>
               </s:Group>
               <s:Label text="{getString('label.renameCost', [Config.getEditAllianceCredits()])}" fontSize="14"/>
            </s:Group>
            
            <s:Group>
               <s:layout>
                  <s:HorizontalLayout verticalAlign="middle"/>
               </s:layout>
               <s:Label text="{getString('label.leaveAlliance')}" fontSize="16"/>
               <s:Button label="{getString('label.leave')}"
                         click="leave_clickHandler(event)"/>
            </s:Group>
            
         </base:Panel>
         
         <!-- New alliance creation -->
         <base:Panel title="{getString('title.section.newAlliance')}"
                     skinClass="components.skins.LargePanelSkin" width="100%"
                     visible="{allianceTech.upgradePart.level > 0 &amp;&amp;
                               ML.player.allianceId == 0 &amp;&amp; leftTime == 0}">
            <base:layout>
               <s:VerticalLayout gap="5" horizontalAlign="justify"/>
            </base:layout>
            <s:Label fontSize="18" text="{getString('label.noAlly')}"/>
            <s:Label fontSize="18" text="{getString('label.allyExists')}" color="#ff0000" visible="{allianceExists}"/>
            <s:Group>
               <s:layout>
                  <s:HorizontalLayout gap="10" verticalAlign="middle"/>
               </s:layout>
               <s:Label text="{getString('label.name')}" fontSize="14"/>
               <base:BaseTextInput width="100%" id="allyName" enter="createAlliance(event)"
                                   maxChars="{Config.getMaxAllyNameLength()}"/>
               <s:Button enabled="{allyName.text.length >= Config.getMinAllyNameLength() &amp;&amp; !allyPending}"
                         click="createAlliance(event)" label="{getString('label.create')}"/>
               
            </s:Group>
         </base:Panel>
         
      </s:Group>
      
      <!-- Error message when palyer does not have required technology -->
      <base:Warning text="{getString('label.noTech')}" width="60%" top="100" horizontalCenter="0"
                    visible="{allianceTech.upgradePart.level &lt; 1 &amp;&amp; ML.player.allianceId == 0}"/>
      
      <!-- Cooldown warning -->
      <base:Warning text="{getString('label.cooldown', [DateUtil.secondsToHumanString(leftTime / 1000, 2)])}" 
                    top="100" horizontalCenter="0" width="60%" visible="{leftTime > 0}"/>
      
   </s:Group>

   <screens:ScreenCloseButton label="{getString('label.close')}" right="0" bottom="0"
                              click="NavigationController.getInstance().showPreviousScreen()"/>
</s:Group>
