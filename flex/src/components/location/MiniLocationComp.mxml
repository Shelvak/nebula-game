<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:components="utils.components.*"
                    xmlns:location="components.location.*"
                    minWidth="245" maxWidth="330" width="100%" height="71">
   <fx:Script>
      <![CDATA[
         import models.building.Building;
         import models.location.Location;
         import models.location.LocationType;
         import models.tile.TerrainType;
         import models.unit.Unit;
         
         import utils.assets.AssetNames;
         import utils.locale.Localizer;
         
         [Bindable]
         private var _location:Location = null;
         
         [Bindable]
         private var _target: * = null
         
         //Building or Location   
         public function set location(value: *): void
         {
            if (value is Building)
            {
               _target = value;
               _location = ML.latestPlanet.toLocation();
            }
            else if (value is Unit)
            {
               _target = value;
               var tUnit: Unit = Unit(value);
               if (tUnit.location.type == LocationType.SS_OBJECT
               && ML.latestPlanet.id == tUnit.location.id)
               {
                  _location = ML.latestPlanet.toLocation();
               }
               else if (tUnit.location.type == LocationType.SOLAR_SYSTEM
                  && ML.latestSolarSystem.id == tUnit.location.id)
               {
                  _location = ML.latestSolarSystem.getLocation(
                     tUnit.location.x, tUnit.location.y);
               }
               else
               {
                  _location = ML.latestGalaxy.getLocation(
                     tUnit.location.x, tUnit.location.y);
               }
            }
            else
            {
               _target = null;
               _location = value;
            }
         }
         
      ]]>
   </fx:Script>
   
   <!-- space background -->
   <s:BitmapImage left="0" right="0" top="0" bottom="0"
                  source="{IMG.getImage('images/ui/notifications/mini_location_background')}"/>
   <!-- terrain background -->
   <s:BitmapImage left="0" right="0" top="0" bottom="0" visible="{_target is Building}"
                  source="{IMG.getImage('images/ui/notifications/mini_location_' + 
                  TerrainType.getName(ML.latestPlanet.ssObject.terrain))}"/>
   
   <!-- planet, solar system or galaxy image -->
   <s:Group maskType="clip">
      <s:mask>
         <s:Group>
            <s:Rect width="170" height="69" x="1" y="1">
               <s:fill>
                  <s:SolidColor color="0xffffff"/>
               </s:fill>
            </s:Rect>
         </s:Group>
      </s:mask>
      <components:CenteredBitmapImage width="100" height="100" source="{_location.bitmapData}"
                                      visible="{_target == null}" left="-24" top="7"/>
      <components:CenteredBitmapImage width="75" height="69" visible="{_target != null}" source="{
                                      _target is Building
                                      ? IMG.getImage(AssetNames.getBuildingImageName(_target.type))
                                      : IMG.getImage(AssetNames.getLocationUnitImageName(_target.type))}"
                                      left="1" top="1"/>
   </s:Group>
   
   
   <!-- a button to navigate to this location -->
   <location:CLocationButton id="btnOpen" right="12" bottom="9"
                             label="{_target is Unit
                             ? Localizer.string('Location', 'label.openLocation')
                             : Localizer.string('Location', 'label.open')}"
                             location="{_location}"
                             zoomObject="{_target is Building ? _target : null}"/>
   
   <!-- information text -->   
   <base:AdvancedContainer left="82" top="7" right="{btnOpen.width + 16}">
      
      <!-- galaxy sector -->
      <s:Group visible="{_location.isGalaxy}">
         <s:Label styleName="locationHeader"
                  text="{Localizer.string('Location', 'header.galaxy')}"/>
         <s:Group>
            <s:layout>
               <s:HorizontalLayout gap="6"/>
            </s:layout>
            <s:Label styleName="locationHeader"
                     text="{Localizer.string('Location', 'sector')}"/>
            <s:Label text="{_location.sectorName}"/>
         </s:Group>
         <s:layout>
            <s:VerticalLayout/>
         </s:layout>
      </s:Group>
      
      <!-- planet -->
      <s:Group visible="{_location.isSSObject}">
         <s:Label styleName="locationHeader"
                  text="{Localizer.string('Location', 'header.planet')}:"/>
         <s:Label text="{_location.planetName}"/>
         <s:layout>
            <s:HorizontalLayout/>
         </s:layout>
      </s:Group>
      
      <!-- solar system -->
      <base:AdvancedContainer visible="{!(_target != null || _location.isGalaxy)}">
         <s:Group>
            <s:Label styleName="locationHeader"
                     text="{Localizer.string('Location', 'header.solarSystem')}:"/>
            <s:Label text="{_location.solarSystemName}"/>
            <s:layout>
               <s:HorizontalLayout/>
            </s:layout>
         </s:Group>
         <s:Group visible="{!_location.isSSObject &amp;&amp; !_location.isBattleground}">
            <s:layout>
               <s:HorizontalLayout gap="6"/>
            </s:layout>
            <s:Label styleName="locationHeader"
                     text="{Localizer.string('Location', 'sector')}"/>
            <s:Label text="{_location.sectorName}"/>
         </s:Group>
         <base:layout>
            <s:VerticalLayout/>
         </base:layout>
      </base:AdvancedContainer>
      
      <!-- building || unit -->
      <s:Group visible="{_target != null}">
         <s:Label styleName="locationHeader"
                  text="{_target is Building ?
                     Localizer.string('Location', 'header.building') :
                     Localizer.string('Location', 'header.unit')}:"/>
         <s:Label text="{_target.name}"/>
         <s:layout>
            <s:HorizontalLayout/>
         </s:layout>
      </s:Group>
      
      <base:layout>
         <s:VerticalLayout/>
      </base:layout>
      
   </base:AdvancedContainer>
   
</base:BaseContainer>
