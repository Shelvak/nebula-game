<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:screens="components.screens.*"
         xmlns:base="components.base.*"
         creationComplete="group1_creationCompleteHandler(event)"
         width="100%" height="100%">
   <fx:Script>
      <![CDATA[
         import components.skins.InfoButtonSkin;
         
         import controllers.GlobalFlags;
         import controllers.objects.ObjectClass;
         import controllers.players.PlayersCommand;
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import models.ModelLocator;
         import models.player.Player;
         import models.unit.UnitBuildingEntry;
         
         import mx.collections.ArrayCollection;
         import mx.collections.ListCollectionView;
         import mx.events.FlexEvent;
         
         import utils.ModelUtil;
         import utils.UrlNavigate;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         private static function buildUnitsFromArray(source: Array): ArrayCollection
         {
            var newList: Array = [];
            for each (var unit: Array in source)
            {
               newList.push(new UnitBuildingEntry(ModelUtil.getModelType(
                  ObjectClass.UNIT, unit[0]), unit[1]));
            }
            return new ArrayCollection(newList);
         }
         
         private function createCachedUnits(source:Object) : ArrayCollection
         {
            var result:Array = []
            for each (var unit: UnitBuildingEntry in source)
            {
               result.push(unit);
            }
            return new ArrayCollection(result);
         }
         
         private function findPossibleUnits(): void
         {
            if (data != null && _maxVolume != 0)
            {
               var volumeLeft: int = _maxVolume;
               function findPossible(source: Array): ArrayCollection
               {
                  if (source == null || source.length == 0)
                  {
                     return null;
                  }
                  var tempObject: Object = {};
                  var finished: Boolean = false;
                  var tempList: ListCollectionView = buildUnitsFromArray(source);
                  while (!finished)
                  {
                     var i: int = Math.round((Math.random() * (tempList.length - 1)));
                     var possibleUnit: UnitBuildingEntry = 
                        UnitBuildingEntry(tempList.getItemAt(i));
                     if (possibleUnit.singleUnitVolume <= volumeLeft)
                     {
                        if (tempObject[possibleUnit.type] == null)
                        {
                           tempObject[possibleUnit.type] = 
                              new UnitBuildingEntry(possibleUnit.type, 1);
                        }
                        else
                        {
                           UnitBuildingEntry(tempObject[possibleUnit.type]).count++; 
                        }
                        if (possibleUnit.count > 1)
                        {
                           possibleUnit.count--;
                        }
                        else
                        {
                           tempList.removeItemAt(i);
                        }
                        volumeLeft -= possibleUnit.singleUnitVolume;
                     }
                     else
                     {
                        tempList.filterFunction = 
                           function (item: UnitBuildingEntry): Boolean
                           {
                              return item.singleUnitVolume <= volumeLeft;
                           };
                        tempList.refresh();
                     }
                     finished = (tempList.length == 0);
                  }
                  return createCachedUnits(tempObject);
               }
               yourPossibleUnits = findPossible(data.your);
               allyPossibleUnits = findPossible(data.alliance);
            }
            else
            {
               yourPossibleUnits = null;
               allyPossibleUnits = null;
            }
         }
         
         private function getVolume(list: ArrayCollection): int
         {
            var totalVolume: int = 0;
            if (list)
            {
               for each (var unit: UnitBuildingEntry in list)
               {
                  totalVolume += (unit.count * unit.singleUnitVolume);
               }
            }
            return totalVolume;
         }
         
         [Bindable]
         private var _maxVolume: int;
         public function set maxVolume(value: int): void
         {
            _maxVolume = value;
            findPossibleUnits();
         }
         
         public function get maxVolume(): int
         {
            return _maxVolume;
         }
         private var data: Object;
         public function set allUnits(value: Object): void
         {
            data = value;
            if (data != null)
            {
               playerUnits = buildUnitsFromArray(data.your);
               allyUnits = buildUnitsFromArray(data.alliance);
            }
            findPossibleUnits();
         }
         
         public function get allUnits(): Object
         {
            return data;
         }
         
         [Bindable]
         private var playerUnits: ArrayCollection = new ArrayCollection();
         [Bindable]
         private var allyUnits: ArrayCollection = new ArrayCollection();
         
         
         [Bindable]
         public var yourPossibleUnits: ArrayCollection;
         [Bindable]
         public var allyPossibleUnits: ArrayCollection;
         
         protected function group1_creationCompleteHandler(event:FlexEvent):void
         {
            NavigationController.getInstance().creationCompleteFunction(
               MainAreaScreens.DEFENSIVE_PORTAL, this);
         }
         
         
         private function getImage(name:String) : BitmapData
         {
            return ImagePreloader.getInstance()
               .getImage(AssetNames.DEFENSIVE_PORTAL_IMAGES_FOLDER + "table_" + name);
         }
         
         
         private function getString(property:String, params: Array = null) : String
         {
            return Localizer.string("Units", "defensivePool." + property, params);
         }
         
         protected function checkbox1_clickHandler(event:MouseEvent):void
         {
            GlobalFlags.getInstance().lockApplication = true;
            new PlayersCommand(PlayersCommand.EDIT,
               {
                  'portalWithoutAllies': !ML.player.portalWithoutAllies
               }
            ).dispatch();
            NavigationController.getInstance().showDefensivePortal(ML.latestPlanet.id);
         }
         
         [Bindable]
         private var ML: ModelLocator = ModelLocator.getInstance();
         
      ]]>
   </fx:Script>
   <fx:Style>
      .panelTitle
      {
         color:#EFC700;
         fontWeight:bold;
         fontSize:14;
      }
      
      .volumeLabel
      {
         fontWeight:bold;
         fontSize:14;
      }
      
      .volumeNumber
      {
         fontWeight:bold;
         fontSize:16;
      }
   </fx:Style>
   <screens:GradientBackground gradientWidth="{(width - grpContent.width) / 2}"/>
   <s:Group top="0" bottom="0" left="0" right="0">
      <base:Scroller stepMultiplier="10" top="0" bottom="0" left="0" right="0" id="scroll">
         <s:Group left="0" right="0" top="0">
            <s:Group top="10" horizontalCenter="0" id="grpContent">
               <s:layout>
                  <s:VerticalLayout gap="20" horizontalAlign="center"/>
               </s:layout>
               <s:Group minHeight="190">
                  <s:Group left="0" right="0" top="0" bottom="0">
                     <s:layout>
                        <s:VerticalLayout gap="0"/>
                     </s:layout>
                     <s:BitmapImage source="{getImage('top')}"/>
                     <s:BitmapImage source="{getImage('middle')}" height="100%"/>
                     <s:BitmapImage source="{getImage('bottom_own')}"/>
                  </s:Group>
                  <s:Label left="40" top="15" styleName="panelTitle"
                           text="{Localizer.string('Units', 'title.defensivePool')}"/>
                  <s:Button top="13" left="295" skinClass="components.skins.InfoButtonSkin"
                            click="UrlNavigate.getInstance().showInfo('defensive-portal')"/>
                  <base:AdvancedContainer left="40" right="40" top="42" bottom="75">
                     <s:CheckBox label="{getString('dontIncludeAlliance')}"
                                 click="checkbox1_clickHandler(event)"
                                 selected="{ML.player.portalWithoutAllies}"
                                 visible="{ML.player.hasAllianceTechnology}"/>
                     <!-- Player units -->
                     <base:Heading3 text="{getString('title.yourPool')}"
                                    visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" 
                              styleName="volumeNumber" 
                              text="{getString('volume', 
                              [getVolume(playerUnits)])}"
                              visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" text="{getString('poolEmpty')}"
                              visible="{playerUnits == null 
                              || playerUnits.length == 0}"
                              fontSize="36" fontWeight="bold"
                              color="#1c1c1c"/>
                     <s:DataGroup dataProvider="{playerUnits}" 
                                  itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                        <s:layout>
                           <s:TileLayout requestedColumnCount="10"/>
                        </s:layout>
                     </s:DataGroup>
                     
                     
                     <!-- Alliance units -->
                     <base:Heading3 text="{getString('title.allyPool')}"
                                   visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" 
                              text="{getString('volume', 
                              [getVolume(allyUnits)])}"
                              styleName="volumeNumber" 
                              visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" text="{getString('poolEmpty')}"
                              visible="{(allyUnits == null
                              || allyUnits.length == 0)
                              &amp;&amp; !ML.player.portalWithoutAllies}"
                              fontSize="36" fontWeight="bold"
                              color="#1c1c1c"/>
                     <s:DataGroup dataProvider="{allyUnits}"
                                  visible="{!ML.player.portalWithoutAllies}" 
                                  itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                        <s:layout>
                           <s:TileLayout requestedColumnCount="10"/>
                        </s:layout>
                     </s:DataGroup>
                     
                     <base:layout>
                        <s:VerticalLayout gap="10" horizontalAlign="justify"/>
                     </base:layout>
                  </base:AdvancedContainer>
                  
                  <s:Group horizontalCenter="0" bottom="24">
                     <s:layout>
                        <s:HorizontalLayout gap="6" 
                                            horizontalAlign="center" 
                                            verticalAlign="middle"/>
                     </s:layout>
                     <s:Label styleName="volumeLabel" 
                              text="{getString('totalVolume')}"/>
                     <s:Label styleName="volumeNumber" 
                              text="{getVolume(playerUnits) + 
                              getVolume(allyUnits)}"/>
                  </s:Group>
               </s:Group>
               <s:Group minHeight="255">
                  <s:Group left="0" right="0" top="0" bottom="0">
                     <s:layout>
                        <s:VerticalLayout gap="0"/>
                     </s:layout>
                     <s:BitmapImage source="{getImage('top_full')}"/>
                     <s:BitmapImage source="{getImage('middle')}" height="100%"/>
                     <s:BitmapImage source="{getImage('bottom_ally')}"/>
                  </s:Group>
                  <s:Label left="40" top="15" styleName="panelTitle"
                           text="{Localizer.string('Units', 'title.possiblePool')}"/>
                  <base:AdvancedContainer left="40" right="40" top="50" bottom="140">
                     <!-- Player units -->
                     <base:Heading3 text="{getString('title.yourPool')}"
                                   visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" 
                              text="{getString('volume', 
                              [getVolume(yourPossibleUnits)])}"
                              visible="{!ML.player.portalWithoutAllies}"
                              styleName="volumeNumber"/>
                     <s:Label textAlign="center" text="{getString('poolEmpty')}"
                              visible="{yourPossibleUnits == null}"
                              fontSize="36" fontWeight="bold"
                              color="#1c1c1c"/>
                     <s:DataGroup dataProvider="{yourPossibleUnits}" 
                                  itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                        <s:layout>
                           <s:TileLayout requestedColumnCount="10"/>
                        </s:layout>
                     </s:DataGroup>
                     
                     <!-- Alliance units -->
                     <base:Heading3 text="{getString('title.allyPool')}"
                                   visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" 
                              text="{getString('volume', 
                              [getVolume(allyPossibleUnits)])}"
                              styleName="volumeNumber" 
                              visible="{!ML.player.portalWithoutAllies}"/>
                     <s:Label textAlign="center" text="{getString('poolEmpty')}"
                              visible="{allyPossibleUnits == null
                              &amp;&amp; !ML.player.portalWithoutAllies}"
                              fontSize="36" fontWeight="bold"
                              color="#1c1c1c"/>
                     <s:DataGroup dataProvider="{allyPossibleUnits}" 
                                  itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                        <s:layout>
                           <s:TileLayout requestedColumnCount="10"/>
                        </s:layout>
                     </s:DataGroup>
                     
                     <base:layout>
                        <s:VerticalLayout gap="10" horizontalAlign="justify"/>
                     </base:layout>
                     
                  </base:AdvancedContainer>
                  <s:Group horizontalCenter="0" bottom="90">
                     <s:layout>
                        <s:HorizontalLayout gap="6" 
                                            horizontalAlign="center" 
                                            verticalAlign="middle"/>
                     </s:layout>
                     <s:Label styleName="volumeLabel" 
                              text="{getString('teleportedVolume')}"/>
                     <s:Label styleName="volumeNumber" 
                              text="{getVolume(yourPossibleUnits) +
                              getVolume(allyPossibleUnits)}"/>
                     <s:Label styleName="volumeLabel" 
                              text="{getString('maxVolume')}"/>
                     <s:Label styleName="volumeNumber" 
                              text="{_maxVolume}"/>
                  </s:Group>
                  <s:Button label="{getString('pickUnits')}" 
                            click="findPossibleUnits()"
                            skinClass="components.skins.YellowButtonSkin" 
                            bottom="7" horizontalCenter="0"/>
               </s:Group>
            </s:Group>
            
         </s:Group>
      </base:Scroller>
   </s:Group>
   <screens:ScreenCloseButton label="{Localizer.string('Players', 'label.close')}" 
                              bottom="0" right="0"
                              click="NavigationController.getInstance().showPreviousScreen()"
                              scroller="{scroll}"/>
</s:Group>
