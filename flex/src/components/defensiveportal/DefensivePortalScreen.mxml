<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:screens="components.screens.*"
         xmlns:base="components.base.*"
         creationComplete="group1_creationCompleteHandler(event)"
         width="100%" height="100%">
   <fx:Script>
      <![CDATA[
         import components.skins.InfoButtonSkin;
         
         import controllers.objects.ObjectClass;
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import models.unit.UnitBuildingEntry;
         
         import mx.collections.ArrayCollection;
         import mx.collections.ListCollectionView;
         import mx.events.FlexEvent;
         
         import utils.ModelUtil;
         import utils.UrlNavigate;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         private static function buildUnitsFromArray(source: Array): ArrayCollection
         {
            var newList: Array = [];
            for each (var unit: Array in source)
            {
               newList.push(new UnitBuildingEntry(ModelUtil.getModelType(
                  ObjectClass.UNIT, unit[0]), unit[1]));
            }
            return new ArrayCollection(newList);
         }
         
         private function createCachedUnits(source:Object) : ArrayCollection
         {
            var result:Array = []
            for each (var unit: UnitBuildingEntry in source)
            {
               result.push(unit);
            }
            return new ArrayCollection(result);
         }
         
         private function findPossibleUnits(): void
         {
            if (data != null && data.length > 0 && _maxVolume != 0)
            {
               var volumeLeft: int = _maxVolume;
               var tempObject: Object = {};
               var finished: Boolean = false;
               var tempList: ListCollectionView = buildUnitsFromArray(data);
               while (!finished)
               {
                  var i: int = Math.round((Math.random() * (tempList.length - 1)));
                  var possibleUnit: UnitBuildingEntry = 
                     UnitBuildingEntry(tempList.getItemAt(i));
                  if (possibleUnit.singleUnitVolume <= volumeLeft)
                  {
                     if (tempObject[possibleUnit.type] == null)
                     {
                        tempObject[possibleUnit.type] = 
                           new UnitBuildingEntry(possibleUnit.type, 1);
                     }
                     else
                     {
                        UnitBuildingEntry(tempObject[possibleUnit.type]).count++; 
                     }
                     if (possibleUnit.count > 1)
                     {
                        possibleUnit.count--;
                     }
                     else
                     {
                        tempList.removeItemAt(i);
                     }
                     volumeLeft -= possibleUnit.singleUnitVolume;
                  }
                  else
                  {
                     tempList.filterFunction = 
                        function (item: UnitBuildingEntry): Boolean
                        {
                           return item.singleUnitVolume <= volumeLeft;
                        };
                     tempList.refresh();
                  }
                  finished = (tempList.length == 0);
               }
               possibleUnits = createCachedUnits(tempObject);
            }
            else
            {
               possibleUnits = null;
            }
         }
         
         private function getVolume(list: ArrayCollection): int
         {
            var totalVolume: int = 0;
            if (list)
            {
               for each (var unit: UnitBuildingEntry in list)
               {
                  totalVolume += (unit.count * unit.singleUnitVolume);
               }
            }
            return totalVolume;
         }
         
         [Bindable]
         private var _maxVolume: int;
         public function set maxVolume(value: int): void
         {
            _maxVolume = value;
            findPossibleUnits();
         }
         
         public function get maxVolume(): int
         {
            return _maxVolume;
         }
         private var data: Array;
         [Bindable]
         private var _allUnits: ArrayCollection = new ArrayCollection();
         public function set allUnits(value: Array): void
         {
            data = value;
            _allUnits = buildUnitsFromArray(data);
            findPossibleUnits();
         }
         
         public function get allUnits(): Array
         {
            return data;
         }
         [Bindable]
         public var possibleUnits: ArrayCollection;
         
         protected function group1_creationCompleteHandler(event:FlexEvent):void
         {
            NavigationController.getInstance().creationCompleteFunction(
               MainAreaScreens.DEFENSIVE_PORTAL, this);
         }
         
         
         private function getImage(name:String) : BitmapData
         {
            return ImagePreloader.getInstance()
               .getImage(AssetNames.DEFENSIVE_PORTAL_IMAGES_FOLDER + "table_" + name);
         }
         
         
         private function getString(property:String, parameters:Array = null) : String
         {
            return Localizer.string("Units", "defensivePool." + property, [getVolume(_allUnits)]);
         }
         
      ]]>
   </fx:Script>
   <fx:Style>
      .panelTitle
      {
         color:#EFC700;
         fontWeight:bold;
         fontSize:14;
      }
      
      .volumeLabel
      {
         fontWeight:bold;
         fontSize:14;
      }
      
      .volumeNumber
      {
         fontWeight:bold;
         fontSize:16;
      }
   </fx:Style>
   <screens:GradientBackground gradientWidth="{(width - grpContent.width) / 2}"/>
   <s:Group left="0" right="0" top="0" bottom="0">
      <base:Scroller stepMultiplier="10" top="0" bottom="0" left="0" right="0" id="scroll">
         <s:Group top="10" horizontalCenter="0" id="grpContent">
            <s:layout>
               <s:VerticalLayout gap="20"/>
            </s:layout>
            <s:Group minHeight="190">
               <s:Group left="0" right="0" top="0" bottom="0">
                  <s:layout>
                     <s:VerticalLayout gap="0"/>
                  </s:layout>
                  <s:BitmapImage source="{getImage('top')}"/>
                  <s:BitmapImage source="{getImage('middle')}" height="100%"/>
                  <s:BitmapImage source="{getImage('bottom_own')}"/>
               </s:Group>
               <s:Label left="40" top="15" styleName="panelTitle"
                        text="{Localizer.string('Units', 'title.defensivePool')}"/>
               <s:Button top="13" left="295" skinClass="components.skins.InfoButtonSkin"
                         click="UrlNavigate.getInstance().showUrl(
                         'info/defensive-portal')"/>
               <s:DataGroup dataProvider="{_allUnits}" left="40" right="40" top="50" bottom="75" 
                            itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                  <s:layout>
                     <s:TileLayout requestedColumnCount="10"/>
                  </s:layout>
               </s:DataGroup>
               <s:Group horizontalCenter="0" bottom="24">
                  <s:layout>
                     <s:HorizontalLayout gap="6" horizontalAlign="center" verticalAlign="middle"/>
                  </s:layout>
                  <s:Label styleName="volumeLabel" text="{getString('totalVolume')}"/>
                  <s:Label styleName="volumeNumber" text="{getVolume(_allUnits)}"/>
               </s:Group>
            </s:Group>
            <s:Group minHeight="255">
               <s:Group left="0" right="0" top="0" bottom="0">
                  <s:layout>
                     <s:VerticalLayout gap="0"/>
                  </s:layout>
                  <s:BitmapImage source="{getImage('top')}"/>
                  <s:BitmapImage source="{getImage('middle')}" height="100%"/>
                  <s:BitmapImage source="{getImage('bottom_ally')}"/>
               </s:Group>
               <s:Label left="40" top="15" styleName="panelTitle"
                        text="{Localizer.string('Units', 'title.possiblePool')}"/>
               <s:DataGroup dataProvider="{possibleUnits}" left="40" right="40" top="50" bottom="140" 
                            itemRenderer="components.unit.IRUnitBuildingEntrySmall">
                  <s:layout>
                     <s:TileLayout requestedColumnCount="10"/>
                  </s:layout>
               </s:DataGroup>
               <s:Group horizontalCenter="0" bottom="90">
                  <s:layout>
                     <s:HorizontalLayout gap="6" horizontalAlign="center" verticalAlign="middle"/>
                  </s:layout>
                  <s:Label styleName="volumeLabel" text="{getString('teleportedVolume')}"/>
                  <s:Label styleName="volumeNumber" text="{getVolume(possibleUnits)}"/>
                  <s:Label styleName="volumeLabel" text="{getString('maxVolume')}"/>
                  <s:Label styleName="volumeNumber" text="{_maxVolume}"/>
               </s:Group>
               <s:Button label="{getString('pickUnits')}" click="findPossibleUnits()"
                         skinClass="components.skins.YellowButtonSkin" bottom="7" horizontalCenter="0"/>
            </s:Group>
         </s:Group>
      </base:Scroller>
   </s:Group>
   <screens:ScreenCloseButton label="{Localizer.string('Players', 'label.close')}" bottom="0" right="0"
                              click="NavigationController.getInstance().showPreviousScreen()"
                              scroller="{scroll}"/>
</s:Group>
