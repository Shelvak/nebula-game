<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*" 
                    xmlns:location="components.location.*"
                    width="100%" height="100%"
                    xmlns:unitsscreen="components.unitsscreen.*">
   <fx:Script>
      <![CDATA[
         import models.healing.MCHealingScreen;
         
         import utils.locale.Localizer;
         
         [Bindable]
         private var HS: MCHealingScreen = MCHealingScreen.getInstance();
      ]]>
   </fx:Script>
  <base:layout>
    <s:VerticalLayout gap="0" horizontalAlign="justify"/>
  </base:layout>
  <unitsscreen:ScreenLocations location="{HS.location}"/>
  <unitsscreen:ScreenContent height="100%">
    <unitsscreen:leftControls>
      <base:AdvancedContainer width="100%">
        <s:ToggleButton name="self" click="HS.unitsButton_clickHandler(event)"
                        selected="{HS.selfSelected}"
                        label="{Localizer.string('Units', 'kind.self',[HS.getUnitCount(HS.selfFlanks)])}"/>
        <s:ToggleButton name="ally" click="HS.unitsButton_clickHandler(event)"
                        selected="{HS.allySelected}"
                        label="{Localizer.string('Units', 'kind.ally',[HS.getUnitCount(HS.allyFlanks)])}"/>
        <s:ToggleButton name="nap" click="HS.unitsButton_clickHandler(event)"
                        selected="{HS.napSelected}"
                        label="{Localizer.string('Units', 'kind.nap', [HS.getUnitCount(HS.napFlanks)])}"/>
        <base:layout>
          <s:HorizontalLayout gap="1"/>
        </base:layout>
      </base:AdvancedContainer>
    </unitsscreen:leftControls>
    <unitsscreen:content>
      <s:DataGroup id="selfUnitsList" dataProvider="{HS.selfFlanks}" visible="{HS.selfSelected}" width="100%" height="100%">
        <s:itemRenderer>
          <fx:Component>
            <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
              <fx:Script>
                     <![CDATA[
                import models.unit.Unit;
                ]]>
                  </fx:Script>
              <unitsscreen:SelectableFlank flankModel="{data}" height="100%" width="100%"/>
            </s:ItemRenderer>
          </fx:Component>
        </s:itemRenderer>
        <s:layout>
          <s:VerticalLayout rowHeight="120"/>
        </s:layout>
      </s:DataGroup>

      <s:DataGroup id="napUnitsList" dataProvider="{HS.napFlanks}" visible="{HS.napSelected}" width="100%" height="100%">
        <s:itemRenderer>
          <fx:Component>
            <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
              <fx:Script>
                     <![CDATA[
                import models.unit.Unit;
                ]]>
                  </fx:Script>
              <unitsscreen:SelectableFlank flankModel="{data}" height="100%" width="100%"/>
            </s:ItemRenderer>
          </fx:Component>
        </s:itemRenderer>
        <s:layout>
          <s:VerticalLayout rowHeight="120"/>
        </s:layout>
      </s:DataGroup>

      <s:DataGroup id="allyUnitsList" dataProvider="{HS.allyFlanks}" visible="{HS.allySelected}" width="100%" height="100%">
        <s:itemRenderer>
          <fx:Component>
            <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
              <fx:Script>
                     <![CDATA[
                import models.unit.Unit;
                ]]>
                  </fx:Script>
              <unitsscreen:SelectableFlank flankModel="{data}" height="100%" width="100%"/>
            </s:ItemRenderer>
          </fx:Component>
        </s:itemRenderer>
        <s:layout>
          <s:VerticalLayout rowHeight="120"/>
        </s:layout>
      </s:DataGroup>
    </unitsscreen:content>
  </unitsscreen:ScreenContent>
</base:BaseContainer>
