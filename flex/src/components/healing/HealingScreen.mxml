<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*" 
                    xmlns:location="components.location.*"
                    creationComplete="basecontainer1_creationCompleteHandler(event)" 
                    xmlns:unitsscreen="components.unitsscreen.*">
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import controllers.ui.NavigationController;
         import controllers.units.UnitsCommand;
         
         import globalevents.GHealingScreenEvent;
         import globalevents.GResourcesEvent;
         import globalevents.GUnitsScreenEvent;
         
         import models.ModelsCollection;
         import models.building.Building;
         import models.location.Location;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         import models.unit.HealPrice;
         import models.unit.Unit;
         import models.unit.UnitsFlank;
         import models.unit.events.UnitEvent;
         
         import mx.collections.ArrayCollection;
         import mx.collections.ListCollectionView;
         import mx.collections.Sort;
         import mx.collections.SortField;
         import mx.events.CollectionEvent;
         import mx.events.CollectionEventKind;
         import mx.events.FlexEvent;
         
         import spark.events.IndexChangeEvent;
         
         import utils.Localizer;
         import utils.ObjectStringsResolver;
         import utils.assets.AssetNames;
         import utils.datastructures.Collections;
         
         [Bindable]
         public var location: Building = null;
         
         [Bindable]
         private var flanks: ArrayCollection = new ArrayCollection();
         
         private var oldProvider: ListCollectionView;
         
         private static const MAX_FLANKS: int = 2;
         
         private function get selectionIds(): Array
         {
            var _selection: Array = [];
            for each (var flank: UnitsFlank in flanks)
            {
               for each (var unit: Unit in flank.selection)
               {
                  _selection.push(unit.id);
               }
            }
            return _selection;
         }
         
         private function setData(e: GHealingScreenEvent): void
         {
            location = e.location;
            
            if (oldProvider != null)
            {
               oldProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
            }
            oldProvider = Collections.filter(e.unitsCollection, function (item: Unit): Boolean
            {
               return item.hp < item.hpMax;
            });
            sortByHp(oldProvider);
            
            oldProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, refreshList);
            
            buildFlanks();
         }
         
         
         
         private function confirmHeal(e: GHealingScreenEvent): void
         {
            var _selectionIds: Array = selectionIds;
            if (_selectionIds.length > 0)
            {
               new UnitsCommand(
                  UnitsCommand.HEAL,
                  {
                     buildingId: location.id,
                     unitIds: _selectionIds
                  }).dispatch();
            }
            new GHealingScreenEvent(GHealingScreenEvent.DESELECT_UNITS);
            refreshSidebarState();
         }
         
         private function buildFlanks(): void
         {
            flanks.removeAll();
            var tempObj: Object = {};
            ML.units.disableAutoUpdate();
            for each (var unit: Unit in oldProvider)
            {
               unit.newStance = unit.stance;
               if (tempObj[unit.flank] == null)
               {
                  tempObj[unit.flank] = new Array();
               }
               tempObj[unit.flank].push(unit);
            }
            ML.units.enableAutoUpdate();
            for (var key: int = 0; key < MAX_FLANKS; key++)
            {
               flanks.addItem(new UnitsFlank(new ModelsCollection(tempObj[key]), key+1));
            }
            refreshSidebarState ();
         }
         
         private function sortByHp(list: ListCollectionView): void
         {
            list.sort = new Sort();
            list.sort.fields = [new SortField('type'), 
               new SortField('hp', false, true, true), 
               new SortField('id', false, false, true)];
            list.refresh();
         }
         
         private function refreshList(e: CollectionEvent): void
         {
            if (e.kind == CollectionEventKind.ADD)
            {
               if (e.items.length != 0)
               {
                  for each (var unitToAdd: Unit in e.items)
                  {
                     for each (var flank: UnitsFlank in flanks)
                     {
                        if (flank.nr == (unitToAdd.flank+1))
                        {
                           flank.flank.addItem(unitToAdd);
                        }
                     }
                  }
                  refreshSidebarState();
               }
            }
            else if (e.kind == CollectionEventKind.REMOVE)
            {
               if (e.items.length != 0)
               {
                  new GUnitsScreenEvent(GUnitsScreenEvent.DESTROY_UNIT, e.items);
                  refreshSidebarState();
               }
            }
         }
         
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GHealingScreenEvent.OPEN_SCREEN, setData);
            EventBroker.subscribe(GUnitsScreenEvent.SELECTION_PRECHANGE, refreshSidebarState);
            EventBroker.subscribe(GHealingScreenEvent.HEALING_CONFIRMED, confirmHeal);
            NavigationController.getInstance().dispatchMainAreaScreenSwitchEvent();
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshMaxHealing);
         }
         
         private function refreshMaxHealing(e: GResourcesEvent): void
         {
            
         }
         
         /**
         * returns HealPrice object with price for all selected units
         * or null if there is no selection
         **/
         private function get price(): HealPrice
         {
            var _selection: Array = selection;
            if (_selection.length == 0)
            {
               return null;
            }
            return HealPrice.calculateHealingPrice(_selection, location.upgradePart.level, location.type);
         }
         
         private function get selection(): Array
         {
               var _selection: Array = [];
               for each (var flank: UnitsFlank in flanks)
               {
                  for each (var unit: Unit in flank.selection)
                  {
                     _selection.push(unit);
                  }
               }
               return _selection;
         }
         
         private function refreshSidebarState(e: GUnitsScreenEvent = null): void
         {
            new GHealingScreenEvent(GHealingScreenEvent.REFRESH_SIDEBAR, {
               'location': location,
               'price': price
            });
         }
         
         
      ]]>
   </fx:Script>
   <base:layout>
      <s:VerticalLayout paddingLeft="6" paddingTop="6" gap="6" paddingRight="6"/>
   </base:layout>
   <!--s:Label text="{Localizer.string('Units', 'label.currentUnits')}" fontSize="26" color="#3bc133"/-->
   <s:Group width="100%">
      <s:Label text="{Localizer.string('Units', 'label.location')}" styleName="h3"/>
      <location:MiniLocationComp id="locComp" location="{location}"/>
      <s:layout>
         <s:VerticalLayout/>
      </s:layout>
   </s:Group>
   
   <s:DataGroup id="unitsLandList" dataProvider="{flanks}" width="100%" height="100%"> 
      <s:itemRenderer>
         <fx:Component>
            <s:ItemRenderer height="100%" width="100%" autoDrawBackground="false">
               <fx:Script>
                  <![CDATA[
                     import models.unit.Unit;
                  ]]>
               </fx:Script>
               <unitsscreen:FlankComp transfer="false" flankModel="{data}" height="100%" width="100%"/>
            </s:ItemRenderer>
         </fx:Component>
      </s:itemRenderer>
      <s:layout>
         <s:VerticalLayout rowHeight="120"/>
      </s:layout>
   </s:DataGroup>

</base:BaseContainer>
