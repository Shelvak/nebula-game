<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/halo"
                    xmlns:base="components.base.*"
                    width="100%" height="100%"
                    addedToStage="basecontainer1_addedToStageHandler(event)"
                    removedFromStage="basecontainer1_removedFromStageHandler(event)" xmlns:unitsscreen="components.unitsscreen.*">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.GreenButtonSkin;
         import components.skins.RedButtonSkin;
         import components.unitsscreen.events.UnitsScreenEvent;
         
         import controllers.GlobalFlags;
         import controllers.ui.NavigationController;
         
         import globalevents.GResourcesEvent;
         import globalevents.GlobalEvent;
         
         import models.building.Building;
         import models.healing.HealPrice;
         import models.healing.MCHealingScreen;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         
         import mx.events.FlexEvent;
         
         import utils.DateUtil;
         import utils.assets.AssetNames;
         import utils.locale.Localizer;
         
         protected function button1_clickHandler(event:MouseEvent):void
         {
            NavigationController.getInstance().showPreviousScreen();
         }
         
         [Bindable]
         private var HS: MCHealingScreen = MCHealingScreen.getInstance();
         
         private function heal_clickHandler(e: Event): void
         {
            HS.confirmHeal();
         }
         
         [Bindable]
         private var currentTime: Number;
         
         private function calcCurrentTime(e: GlobalEvent = null): void
         {
            currentTime = new Date().time;
         }
         
         protected function basecontainer1_addedToStageHandler(event:Event):void
         {
            calcCurrentTime();
            EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, calcCurrentTime);
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshResources);
            HS.addEventListener(UnitsScreenEvent.HEALING_PRICE_CHANGE, refreshResources);
            refreshResources();
         }
         
         
         protected function basecontainer1_removedFromStageHandler(event:Event):void
         {
            EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, calcCurrentTime);
            EventBroker.unsubscribe(GResourcesEvent.RESOURCES_CHANGE, refreshResources);
            HS.removeEventListener(UnitsScreenEvent.HEALING_PRICE_CHANGE, refreshResources);
         }
         
         private function refreshResources(e: Event = null): void
         {
            if (ML.latestPlanet == null || HS.price == null)
            {
               hasEnoughResources = true;
               enoughStorage = true;
               resLeft = 0;
               return;
            }
            var ssObj: MSSObject = ML.latestPlanet.ssObject;
            hasEnoughResources = !(
               HS.price.metal > ssObj.metal.currentStock
               || HS.price.energy > ssObj.energy.currentStock
               || HS.price.zetium > ssObj.zetium.currentStock);
            
            missingStorageString = Resource.getMissingStoragesString(ssObj,
               HS.price.metal, HS.price.energy, HS.price.zetium);
            enoughStorage = (missingStorageString == ''?true:false);
            resLeft = Resource.getTimeToReachResources
               (ssObj.metal, ssObj.energy, ssObj.zetium, 
                  HS.price.metal, HS.price.energy, HS.price.zetium);
         }
         
         /**
          * how many seconds are left to fulfill resources needs for building
          **/
         [Bindable]
         private var resLeft: int = 0;
         
         [Bindable]
         private var enoughStorage: Boolean = true;
         
         [Bindable]
         private var missingStorageString: String = '';
         
         [Bindable]
         private var hasEnoughResources: Boolean = true;
         
         private function getStringFromSeconds(seconds: int): String
         {
            return DateUtil.secondsToHumanString(seconds);
         }
         
         private function getTime(from: Date): Number
         {
            return from.time;
         }
         
      ]]>
   </fx:Script>
   <base:Scroller top="0" left="0" right="0" bottom="0" stepMultiplier="3">
      <s:Group left="0" right="0">
         <base:AdvancedContainer left="0" right="0">
            <base:Panel width="100%" title="{Localizer.string ('Units', 'label.select')}">
               <s:Group>
                  <s:layout>
                     <s:HorizontalLayout gap="10"/>
                  </s:layout>
                  <s:Button label="{Localizer.string ('Units', 'label.all')}" click="HS.selectAll()"/>
                  <s:Button label="{Localizer.string ('Units', 'label.none')}" click="HS.selectNone()"/>
               </s:Group>
               <s:Group toolTip="{Localizer.string ('Units', 'tooltip.allHealable')}">
                  <s:Button label="{Localizer.string ('Units', 'label.allHealable')}" click="HS.selectAll(true)"
                            enabled="{hasEnoughResources}"/>
               </s:Group>
               <base:layout>
                  <s:VerticalLayout gap="10" horizontalAlign="center"/>
               </base:layout>
            </base:Panel>
            
            <unitsscreen:NoSelectionPanel visible="{HS.price == null}"/>
            
            <base:Panel width="100%" title="{Localizer.string ('Units', 'label.healing')}"
                        visible="{HS.price != null}">
               <base:AdvancedContainer width="100%">
                  <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.willHeal')}"/>
                  <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{HS.price.metal}"
                                      labelStyleName="{HS.price.metal > ML.latestPlanet.ssObject.metal.currentStock
                                      ?'unsatisfied':null}"/>
                  <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{HS.price.energy}"
                                      labelStyleName="{HS.price.energy > ML.latestPlanet.ssObject.energy.currentStock
                                      ?'unsatisfied':null}"/>
                  <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{HS.price.zetium}"
                                      labelStyleName="{HS.price.zetium > ML.latestPlanet.ssObject.zetium.currentStock
                                      ?'unsatisfied':null}"/>
                  
                  <s:Label text="{Localizer.string('Resources','notEnoughResources')}" styleName="unsatisfied"
                           visible="{resLeft != 0}"/>
                  <s:Group visible="{resLeft > 0}">
                     <s:Label text="{Localizer.string('Resources','enoughResourcesIn')}" fontWeight="bold"/>  
                     <base:TimeLabel text="{getStringFromSeconds(resLeft)}"/>
                     <s:layout>
                        <s:VerticalLayout paddingRight="6" horizontalAlign="justify"/>
                     </s:layout>
                  </s:Group>
                  
                  <s:Group width="100%" visible="{!enoughStorage}">
                     <s:Label text="{
                              missingStorageString == '' 
                              ? '' 
                              : Localizer.string('Resources','additionalStorage', [missingStorageString])
                              }" 
                              styleName="unsatisfied" left="0" right="0"/>
                  </s:Group>
                  
                  <s:Label fontWeight="bold" text="{Localizer.string ('Units', 'label.healCooldown', 
                           [DateUtil.secondsToHumanString(HS.price.cooldown)])}" 
                           visible="{getTime(HS.location.cooldownEndsAt) &lt; currentTime}"
                           paddingTop="6"/>
                  
                  <s:Group
                     toolTip="{getTime(HS.location.cooldownEndsAt) &lt; currentTime?'':Localizer.string ('Units', 'toolTip.healCooldown')}">
                     <s:Button label="{getTime(HS.location.cooldownEndsAt) &lt; currentTime? Localizer.string ('Units', 'label.heal')
                               :DateUtil.secondsToHumanString((getTime(HS.location.cooldownEndsAt) - currentTime)/1000)}"
                               click="heal_clickHandler(event)"
                               horizontalCenter="0"
                               enabled="{getTime(HS.location.cooldownEndsAt) &lt; currentTime
                               &amp;&amp; hasEnoughResources}"
                               skinClass="components.skins.GreenButtonSkin"/>
                  </s:Group>
                  <base:layout>
                     <s:VerticalLayout paddingLeft="10" paddingRight="6" paddingTop="6" paddingBottom="6" 
                                       horizontalAlign="justify"/>
                  </base:layout>
               </base:AdvancedContainer>
            </base:Panel>
            
            <s:Group width="100%">
               <s:Button label="{Localizer.string ('Units', 'label.close')}"
                         click="button1_clickHandler(event)" horizontalCenter="0"
                         skinClass="components.skins.RedButtonSkin"/>
            </s:Group>
            
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
            
         </base:AdvancedContainer>
      </s:Group>
   </base:Scroller>
   
</base:BaseContainer>
