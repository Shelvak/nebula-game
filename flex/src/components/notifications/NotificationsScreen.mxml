<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:notifs="components.notifications.*"
                    width="100%" height="100%"
                    initialize="this_initializeHandler(event)">
   
   <fx:Script>
      <![CDATA[
         import controllers.notifications.NotificationsCommand;
         
         import models.ModelLocator;
         import models.notification.Notification;
         
         import mx.collections.ArrayCollection;
         import mx.collections.ListCollectionView;
         import mx.events.FlexEvent;
         
         import spark.events.IndexChangeEvent;
         
         import utils.assets.AssetNames;
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         
         private var _filterFunctions:ArrayCollection = null;
         
         
         private function this_initializeHandler(event:FlexEvent):void
         {
            _filterFunctions = new ArrayCollection([
               {
                  "apply": function():void{ ML.notifications.removeFilter() },
                  "label": Localizer.string("Notifications", "label.notifications.all")
               },
               {
                  "apply": function():void{ ML.notifications.applyStarredFilter(true) },
                  "label": Localizer.string("Notifications", "label.notifications.starred")
               },
               {
                  "apply": function():void{ ML.notifications.applyReadFilter(false) },
                  "label": Localizer.string("Notifications", "label.notifications.unread")
               }
            ]);
            barFilterButtons.dataProvider = _filterFunctions; 
            notReadNotifs = Collections.filter(ML.notifications, 
               function(item: Notification): Boolean
               {
                  return !item.read;
               });
         }
         
         
         private function barFilterButtons_changeHandler(event:IndexChangeEvent):void
         {
            _filterFunctions.getItemAt(event.newIndex).apply();
         }
         
         [Bindable]
         private var notReadNotifs: ListCollectionView;
         
         
         private function getImage(name:String) : BitmapData {
            return IMG.getImage(AssetNames.NOTIFICATION_IMAGE_FOLDER + name);
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Notifications", property, parameters);
         }
      ]]>
   </fx:Script>
   
   <s:Rect left="0" right="0" top="0" bottom="0">
      <s:fill>
         <s:SolidColor color="0x080C08"/>
      </s:fill>
   </s:Rect>
   
   <!-- top artwork -->
   <s:Group left="0" right="0" top="0">
      <s:layout>
         <s:HorizontalLayout gap="0"/>
      </s:layout>
      <s:BitmapImage source="{getImage('screen_top_left')}"/>
      <s:BitmapImage source="{getImage('screen_top_right')}" width="100%"/>
   </s:Group>
   
   <!-- screen title -->
   <s:Label id="lblScreenTitle" text="{getString('screenTitle')}" styleName="screenTitle"
            left="10" top="20" width="375"/>
   
   <!-- color legend -->
   <s:Group left="0" top="55"
            visible="{barFilterButtons.selectedIndex == 0 || barFilterButtons.selectedIndex == 2}">
      <s:Label text="{getString('label.notReadColor')}" color="#eec500"/>
      <s:Label text="{getString('label.newColor')}" color="#00D8E3"/>
      <s:Label text="{getString('label.readColor')}" color="#ffffff"/>
      <s:layout>
         <s:HorizontalLayout paddingLeft="10" gap="10"/>
      </s:layout>
   </s:Group>
   
   <!-- buttons -->
   <s:Group right="5" top="5">
      <s:Button label="{getString('label.readAll')}" enabled="{notReadNotifs.length > 0}"
                click="new NotificationsCommand(NotificationsCommand.READ, {'notifications': notReadNotifs.toArray()}).dispatch()"/>
      <s:ButtonBar id="barFilterButtons" requireSelection="true"
                   change="barFilterButtons_changeHandler(event)"/>
      <s:layout>
         <s:HorizontalLayout gap="3"/>
      </s:layout>
   </s:Group>
   
   <!-- no notifications indicator: shown only if there are no notifications -->
   <s:Label id="lblNoNotifs" visible="{ML.notifications.isEmpty}" text="{getString('label.noNotifications')}"
            verticalCenter="0" horizontalCenter="0" styleName="emptyListMessage"/>
   
   <!-- shown only if there are no notifications -->
   <s:Line visible="{ML.notifications.isEmpty}" left="0" right="0" top="71" xFrom="0" xTo="10">
      <s:stroke>
         <s:SolidColorStroke color="0x040404"/>
      </s:stroke>
   </s:Line>
   
   <base:Scroller left="0" right="0" top="71" bottom="0" 
                  stepMultiplier="10"
                  skinClass="components.notifications.skins.NotificationsScrollerSkin">
      <s:Group height="100%" width="100%">
         <notifs:NotificationsList left="0" right="0" id="lstNotifications" height="100%"
                                   skinClass="components.skins.ListNonScrollableSkin"/>
      </s:Group>
   </base:Scroller>
   
</base:BaseContainer>
