<?xml version="1.0" encoding="utf-8"?>
<base:ListScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
                 xmlns:s="library://ns.adobe.com/flex/spark" 
                 xmlns:mx="library://ns.adobe.com/flex/mx"
                 xmlns:base="components.base.listscreen.*"
                 xmlns:notifs="components.notifications.*">
   <fx:Declarations>
      <notifs:NotificationsList id="_list" skinClass="components.skins.ListNonScrollableSkin"
                                borderVisible="false" contentBackgroundAlpha="0"/>
      <s:Group id="_controlButtons">
         <s:Button id="_btnReadAll" label="{getString('label.readAll')}" enabled="{_notReadNotifs.length != 0}"
                   click="btnReadAll_clickHandler(event)"/>
         <s:ButtonBar id="_barFilterButtons" requireSelection="true" dataProvider="{_filterFunctions}"
                      change="barFilterButtons_changeHandler(event)"/>
      </s:Group>
      <s:Group id="_colorLegend">
         <s:Label text="{getString('label.notReadColor')}" color="{IRNotification.TEXT_COLOR_UNREAD}"/>
         <s:Label text="{getString('label.newColor')}"     color="{IRNotification.TEXT_COLOR_NEW}"/>
         <s:Label text="{getString('label.readColor')}"    color="{IRNotification.TEXT_COLOR_READ}"/>
      </s:Group>
   </fx:Declarations>
   <fx:Binding source="ML.notifications.length == 0" destination="headerFromListSeparatorVisible"/>
   <fx:Binding source="_barFilterButtons.selectedIndex == 0 || _barFilterButtons.selectedIndex == 2"
               destination="colorLegendVisible"/>
   <fx:Script>
      <![CDATA[
         import controllers.notifications.NotificationsCommand;
         
         import models.ModelLocator;
         import models.notification.Notification;
         
         import mx.collections.ArrayCollection;
         import mx.collections.IList;
         import mx.collections.ListCollectionView;
         import mx.core.IVisualElement;
         
         import spark.components.Button;
         import spark.components.ButtonBar;
         import spark.components.Group;
         import spark.components.SkinnableDataContainer;
         import spark.events.IndexChangeEvent;
         
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         private static function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Notifications", property, parameters);
         }
         
         private const _filterFunctions:ArrayCollection = new ArrayCollection([
            {"apply": filterAllNotifs,     "label": getString("label.notifications.all")},
            {"apply": filterStarredNotifs, "label": getString("label.notifications.starred")},
            {"apply": filterUnreadNotifs,  "label": getString("label.notifications.unread")}
         ]);
         
         private function filterAllNotifs() : void {
            ML.notifications.removeFilter();
         }
         
         private function filterStarredNotifs() : void {
            ML.notifications.applyStarredFilter(true);
         }
         
         private function filterUnreadNotifs() : void {
            ML.notifications.applyReadFilter(false)
         }
         
         [Bindable(event="willNotChange")]
         private const _notReadNotifs:ListCollectionView =
            Collections.filter(ML.notifications, filterFunction_unreadNotifs);
         
         private function filterFunction_unreadNotifs(notif:Notification) : Boolean {
            return !notif.read;
         }
         
         private function btnReadAll_clickHandler(event:MouseEvent) : void {
            new NotificationsCommand(
               NotificationsCommand.READ,
               {"notifications": _notReadNotifs.toArray()}
            ).dispatch()
         }
         
         private function barFilterButtons_changeHandler(event:IndexChangeEvent) : void {
            _filterFunctions.getItemAt(event.newIndex).apply();
         }
         
         protected override function get title() : String {
            return getString("screenTitle");
         }
         
         protected override function get emptyListMessage() : String {
            return getString("label.noNotifications");
         }
         
         protected override function get dataProvider() : IList {
            return ML.notifications;
         }
         
         protected override function get dataContainer() : IVisualElement {
            return _list;
         }
         
         protected override function get colorLegend() : Group {
            return _colorLegend;
         }
         
         protected override function get controlButtons() : Group {
            return _controlButtons;
         }         
      ]]>
   </fx:Script>
</base:ListScreen>
