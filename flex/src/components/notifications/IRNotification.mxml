<?xml version="1.0" encoding="utf-8"?>
<screen:ItemRendererBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
                       xmlns:s="library://ns.adobe.com/flex/spark" 
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:screen="components.base.screen.*">
   <fx:Declarations>
      <s:Group id="_headerLeftContent">
         <s:ToggleButton id="btnStar" skinClass="components.skins.StarToggleButtonSkin"
                         left="0" top="-1" selected="{Notification(data).starred}"
                         change="btnStar_changeHandler(event)"/>
         <s:Label left="15" top="0" id="lblMessage" text="{Notification(data).message}"
                  color="{_textColor}"/>
      </s:Group>
      <s:Group id="_headerRightContent">
         <s:Label id="lblCreatedAt" color="{_textColor}"/>
         <s:Label id="lblExpiresAt" color="{_textColor}"/>
      </s:Group>
      <s:Group id="_contentGroup">
         <s:layout>
            <s:VerticalLayout horizontalAlign="justify"/>
         </s:layout>
         <!-- title -->
         <s:Label id="lblTitle" typographicCase="uppercase" fontSize="28"
                  fontWeight="bold" color="0xEEC500" text="{Notification(data).title}"/>
         <!-- custom content -->
         <s:Group id="grpCustomPart">
            <s:initialize>createCustomPart()</s:initialize>
         </s:Group>
      </s:Group>
   </fx:Declarations>
   <fx:Binding source="itemIndex == ML.notifications.length - 1" destination="bottomLineVisible"/>
   <fx:Binding source="itemIndex == 0" destination="firstItem"/>
   <fx:Script>
      <![CDATA[
         import models.ModelLocator;
         import models.notification.Notification;
         import models.notification.events.NotificationEvent;
         
         import mx.core.IVisualElement;
         import mx.graphics.SolidColor;
         
         import utils.DateUtil;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         private static function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string('Notifications', property, parameters);
         }
         
         
         internal static const TEXT_COLOR_NEW:uint = 0x00D8E3;
         internal static const TEXT_COLOR_UNREAD:uint = 0xEEC500;
         internal static const TEXT_COLOR_READ:uint = 0xFFFFFF;
         
         [Bindable]
         private var _textColor:uint = TEXT_COLOR_READ;
         
         
         /**
          * Typed alias of <code>data</code> property.
          */ 
         public function get notification() : Notification {
            return Notification(data);
         }
         
         
         protected override function dataCommit(oldValue:Object, newValue:Object) : void {
            var notif:Notification
            if (oldValue != null) {
               notif = Notification(oldValue);
               notif.removeEventListener(NotificationEvent.IS_NEW_CHANGE, notification_isNewChange, false);
               notif.removeEventListener(NotificationEvent.READ_CHANGE,  notification_readChange,  false);
            }
            if (newValue != null) {
               notif = Notification(newValue);
               notif.addEventListener(NotificationEvent.IS_NEW_CHANGE, notification_isNewChange, false, 0, true);
               notif.addEventListener(NotificationEvent.READ_CHANGE,  notification_readChange,  false, 0, true);
            }
            createCustomPart();
            setCreatedAtLabel();
            setExpiresAtLabel();
            setTextColor();
         }
         
         protected override function btnClose_clickHandler(event:MouseEvent) : void {
            ML.notifications.deselect();
         }
         
         protected override function get headerLeftContent() : Group {
            return _headerLeftContent;
         }
         
         protected override function get headerRightContent() : Group {
            return _headerRightContent;
         }
         
         protected override function get contentGroup() : Group {
            return _contentGroup;
         }
         
         
         private function setCreatedAtLabel() : void {
            if (lblCreatedAt != null && notification != null)
               lblCreatedAt.text = getString(
                  'label.createdAt', [DateUtil.formatShortDateTime(notification.createdAt)]
               );
         }
         
         private function createCustomPart() : void {
            if (grpCustomPart != null && notification != null) {
               var part:IIRNotificationPart = IRNotificationPartFactory.createPartIR(notification.event);
               part.setNotificationPart(notification.customPart);
               part.left = 0;
               part.right = 0;
               part.bottom = 0;
               part.top = 0;
               grpCustomPart.removeAllElements();
               grpCustomPart.addElement(part);
            }
         }
         
         private function setExpiresAtLabel() : void {
            if (lblExpiresAt != null && notification != null)
               lblExpiresAt.text = getString(
                  'label.expiresAt', [DateUtil.formatShortDateTime(notification.expiresAt)]
               );
         }
         
         private function setTextColor() : void {
            if (notification != null) {
               if      (notification.isNew) _textColor = TEXT_COLOR_NEW;
               else if (!notification.read) _textColor = TEXT_COLOR_UNREAD;
               else                         _textColor = TEXT_COLOR_READ;
            }
         }
         
         
         private function notification_isNewChange(event:NotificationEvent) : void {
            setTextColor();
         }
         
         private function notification_readChange(event:NotificationEvent) : void {
            setTextColor();
         }
         
         private function btnStar_changeHandler(event:Event) : void {
            if (notification != null)
               notification.doStar(!notification.starred);
         }
      ]]>
   </fx:Script>
</screen:ItemRendererBase>
