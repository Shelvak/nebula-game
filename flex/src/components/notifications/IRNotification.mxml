<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:mx="library://ns.adobe.com/flex/mx"
                minWidth="5" minHeight="27"
                autoDrawBackground="false">
   
   <s:states>
      <s:State name="normal"/>
      <s:State name="selected"/>
      <s:State name="hovered"/>
   </s:states>
   
   <!-- background -->
   <s:Rect left="0" right="0" top="0" height="26">
      <s:fill>
         <s:SolidColor color="0x363636"/>
      </s:fill>
   </s:Rect>
   
   <!-- shadow of a header -->
   <s:Rect left="10" right="10" top="2" height="18"
           alpha.normal="0.3" alpha.hovered="0.6" alpha.selected="0.6">
      <s:fill>
         <s:LinearGradient rotation="-90">
            <s:GradientEntry color="0x000000" color.selected="0xEFC501" alpha="1"/>
            <s:GradientEntry color="0x000000" color.selected="0xEFC501" alpha="0"/>
         </s:LinearGradient>
      </s:fill>
   </s:Rect>
   
   <!-- header -->
   <s:Group left="0" right="0">
      <s:layout>
         <s:HorizontalLayout gap="0" verticalAlign="bottom"/>
      </s:layout>
      
      <!-- message and star button -->
      <s:Group>
         <s:Group left="0" right="0">
            <s:layout>
               <s:HorizontalLayout gap="0"/>
            </s:layout>
            <s:BitmapImage source="{getImage(HEAD + 'msg_left')}"/>
            <s:BitmapImage source="{getImage(HEAD + 'msg_center')}" width="100%" fillMode="repeat"/>
            <s:BitmapImage source="{getImage(HEAD + 'msg_right')}"/>
         </s:Group>
         <s:Group left="10" right="30" top="10" bottom="0">
            <s:ToggleButton id="btnStar" skinClass="components.skins.StarToggleButtonSkin"
                            left="0" top="-1" selected="{Notification(data).starred}"
                            change="btnStar_changeHandler(event)"/>
            <s:Label left="15" top="0" id="lblDescription" text="{Notification(data).message}"
                     color="{textColor}"/>
         </s:Group>
      </s:Group>
      
      <s:BitmapImage source="{getImage(HEAD + 'center')}" width="100%" fillMode="repeat"/>
      
      <!-- date and time -->
      <s:Group>
         <s:Group left="0" right="0">
            <s:layout>
               <s:HorizontalLayout gap="0"/>
            </s:layout>
            <s:BitmapImage source="{getImage(HEAD + 'time_left')}"/>
            <s:BitmapImage source="{getImage(HEAD + 'time_center')}" width="100%" fillMode="repeat"/>
            <s:BitmapImage source="{getImage(HEAD + 'time_right')}"/>
         </s:Group>
         <s:Group left="38" right="8" top="10" bottom="0">
            <s:layout>
               <s:HorizontalLayout gap="5" verticalAlign="top"/>
            </s:layout>
            <s:Label id="lblCreatedAt" color="{textColor}"/>
            <s:Label id="lblExpiresAt" color="{textColor}"/>
         </s:Group>
      </s:Group>
      
   </s:Group>
   
   <!-- ############################### -->
   <!-- ### CUSTOM PART STARTS HERE ### -->
   
   <s:Rect left="0" right="0" top="27" bottom="0" includeIn="selected">
      <s:fill>
         <s:SolidColor color="0x1D1D1D"/>
      </s:fill>
   </s:Rect>
   
   <s:Group left="0" right="0" top="27" bottom="0" includeIn="selected">
      
      <s:layout>
         <s:VerticalLayout horizontalAlign="justify" gap="0"/>
      </s:layout>
      
      <!-- artwork: top -->
      <s:Group>
         <s:layout>
            <s:HorizontalLayout verticalAlign="top" gap="0"/>
         </s:layout>
         <s:BitmapImage source="{getImage(PBORDER + 'top_left')}"/>
         <s:BitmapImage source="{getImage(PBORDER + 'top_center')}" width="100%" fillMode="repeat"/>
         <s:BitmapImage source="{getImage(PBORDER + 'top_right')}"/>
      </s:Group>
      
      <!-- middle -->
      <s:Group>
         
         <!-- artwork -->
         <s:BitmapImage left="0" top="0" bottom="0"
                        source="{getImage(PBORDER + 'middle_left')}" fillMode="repeat"/>
         <s:BitmapImage right="0" top="0" bottom="0"
                        source="{getImage(PBORDER + 'middle_right')}" fillMode="repeat"/>
         
         <!-- content -->
         <s:Group left="18" right="18" bottom="4" top="30">
            
            <s:layout>
               <s:VerticalLayout horizontalAlign="justify"/>
            </s:layout>
            
            <!-- title -->
            <s:Label styleName="notificationTitle" text="{Notification(data).title}"/>
            
            <!-- custom content -->
            <s:Group id="grpCustomPartArea">
               <s:initialize>createCustomPart()</s:initialize>
            </s:Group>
            
         </s:Group>
         
      </s:Group>
      
      <!-- bottom -->
      <s:Group>
         
         <s:layout>
            <s:HorizontalLayout verticalAlign="bottom" gap="0"/>
         </s:layout>
         
         <!-- artwork -->
         <s:BitmapImage source="{getImage(PBORDER + 'bottom_left')}"/>
         <s:BitmapImage source="{getImage(PBORDER + 'bottom_center')}" width="100%" fillMode="repeat"/>
         
         <!-- buttons -->
         <s:Group>
            
            <!-- artwork -->
            <s:Group left="0" right="0" bottom="0" top="0">
               <s:layout>
                  <s:HorizontalLayout verticalAlign="bottom" gap="0"/>
               </s:layout>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_left')}"/>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_center')}" width="100%" fillMode="repeat"/>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_right')}"/>
            </s:Group>
            
            <!-- actual buttons -->
            <s:Group left="43" right="7" bottom="6" top="8">
               <s:layout>
                  <s:HorizontalLayout gap="5" verticalAlign="bottom"/>
               </s:layout>
               <s:Button id="btnClose" label="{getString('label.close')}" click="btnClose_clickHandler(event)"/>
            </s:Group>
            
         </s:Group>               
         
      </s:Group>
      
   </s:Group>
   <!-- ### CUSTOM PART ENDS HERE ### -->
   <!-- ############################# -->
   
   <!-- shown only if this is the last element -->
   <s:Line visible="{itemIndex == ML.notifications.length - 1}"
           left="0" right="0" bottom="-1" xFrom="0" xTo="10">
      <s:stroke>
         <s:SolidColorStroke color="0x040404"/>
      </s:stroke>
   </s:Line>
   
   
   <fx:Script>
      <![CDATA[
         import models.ModelLocator;
         import models.notification.Notification;
         import models.notification.events.NotificationEvent;
         
         import mx.graphics.SolidColor;
         
         import utils.DateUtil;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         private static const ML:ModelLocator = ModelLocator.getInstance();
         private static const IMG:ImagePreloader = ImagePreloader.getInstance();
         
         private static const PBORDER:String = "pborder_";         
         private static const HEAD:String = "head_";
         
         
         /* ############# */
         /* ### STYLE ### */
         /* ############# */
         
         
         private static const TEXT_COLOR_NEW:uint = 0x00D8E3;
         private static const TEXT_COLOR_UNREAD:uint = 0xEEC500;
         private static const TEXT_COLOR_READ:uint = 0xFFFFFF;
         
         
         [Bindable]
         private var textColor:uint = TEXT_COLOR_READ;
         
         
         /* ################## */
         /* ### PROPERTIES ### */
         /* ################## */
         
         
         /**
          * Typed alias of <code>data</code> property.
          */ 
         public function get notification() : Notification
         {
            return data as Notification;
         }
         
         
         private var _oldData:Object = null;
         [Bindable(event="dataChange")]
         public override function set data(value:Object) : void
         {
            if (data != value)
            {
               if (_oldData == null)
               {
                  _oldData = data;
               }
               super.data = value;
               _fDataChanged = true;
               invalidateProperties();
               invalidateDisplayList();
            }
         }
         
         
         private var _fDataChanged:Boolean = true;
         protected override function commitProperties() : void
         {
            super.commitProperties();
            
            if (_fDataChanged)
            {
               if (_oldData)
               {
                  removeNotificationEventHandlers(_oldData as Notification);
                  _oldData = null
               }
               if (data)
               {
                  addNotificationEventHandlers(data as Notification);
               }
               createCustomPart();
               setCreatedAtLabel();
               setExpiresAtLabel();
               setTextColor();
            }
            
            _fDataChanged = false;
         }
         
         
         protected override function createChildren() : void
         {
            super.createChildren();
            setCreatedAtLabel();
            setExpiresAtLabel();
            setTextColor();
         }
         
         
         /* ############### */
         /* ### HELPERS ### */
         /* ############### */
         
         
         private function createCustomPart() : void
         {
            if (grpCustomPartArea && notification)
            {
               grpCustomPartArea.removeAllElements();
               var part:IIRNotificationPart =
                  IRNotificationPartFactory.createPartIR(notification.event);
               part.setNotificationPart(notification.customPart);
               grpCustomPartArea.addElement(part);
            }
         }
         
         
         private function setCreatedAtLabel() : void
         {
            if (lblCreatedAt && notification)
            {
               lblCreatedAt.text =
                  getString('label.createdAt') + ": " +
                  DateUtil.formatShortDateTime(notification.createdAt);
            }
         }
         
         
         private function setExpiresAtLabel() : void
         {
            if (lblExpiresAt != null && data != null)
            {
               lblExpiresAt.text =
                  getString('label.expiresAt') + ": " +
                  DateUtil.formatShortDateTime(notification.expiresAt);
            }
         }
         
         
         private function setTextColor() : void
         {
            if (data != null)
            {
               if (notification.isNew)
               {
                  textColor = TEXT_COLOR_NEW;
               }
               else if (!notification.read)
               {
                  textColor = TEXT_COLOR_UNREAD;
               }
               else
               {
                  textColor = TEXT_COLOR_READ;
               }
            }
         }
         
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string('Notifications', property, parameters);
         }
         
         private function getImage(name:String) : BitmapData {
            return IMG.getImage(AssetNames.NOTIFICATION_IMAGE_FOLDER + name);
         }
         
         
         /* ###################### */
         /* ### EVENT HANDLERS ### */
         /* ###################### */
         
         
         private function addNotificationEventHandlers(notification:Notification) : void
         {
            notification.addEventListener(NotificationEvent.ISNEW_CHANGE, notification_isNewChange);
            notification.addEventListener(NotificationEvent.READ_CHANGE, notification_readChange);
         }
         
         
         private function removeNotificationEventHandlers(notification:Notification) : void
         {
            notification.removeEventListener(NotificationEvent.ISNEW_CHANGE, notification_isNewChange);
            notification.removeEventListener(NotificationEvent.READ_CHANGE, notification_readChange);
         }
         
         
         private function notification_isNewChange(event:NotificationEvent) : void
         {
            setTextColor();
         }
         
         
         private function notification_readChange(event:NotificationEvent) : void
         {
            setTextColor();
         }

         
         private function btnStar_changeHandler(event:Event) : void
         {
            if (notification)
            {
               notification.doStar(!notification.starred);
            }
         }

         private function btnClose_clickHandler(event:MouseEvent):void
         {
            ML.notifications.deselect();
         }

      ]]>
   </fx:Script>
   
   
</s:ItemRenderer>
