<?xml version="1.0" encoding="utf-8"?>
<screen:ListScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:mx="library://ns.adobe.com/flex/mx" 
                   xmlns:base="components.base.*"
                   xmlns:screen="components.base.screen.*"
                   xmlns:screens="components.screens.*"
                   headerFromListSeparatorVisible="true"
                   initialize="this_initializeHandler(event)"
                   layoutGap="5">
   <fx:Declarations>
      <s:DataGroup id="_list" itemRenderer="components.squadronsscreen.IRSquadronElement"/>
      <s:Group id="_controlButtons">
         <s:ToggleButton id="btnPlayerRoutes" label="{getString('label.playerFleets')}"/>
         <s:ToggleButton id="btnAllianceRoutes" label="{getString('label.allianceFleets')}"/>
      </s:Group>
      <screens:ScreenCloseButton id="_btnClose" click="btnCloseScreen_clickHandler(event)"
                                 label="{getString('label.close')}"/>
   </fx:Declarations>
   <fx:Script>
      <![CDATA[
         import controllers.ui.NavigationController;
         
         import models.ModelLocator;
         import models.Owner;
         import models.movement.MRoute;
         
         import mx.collections.IList;
         import mx.collections.ListCollectionView;
         import mx.core.IVisualElement;
         import mx.events.FlexEvent;
         
         import spark.components.Group;
         
         import utils.components.ToggleButtonsGroup;
         import utils.components.events.ToggleButtonsGroupEvent;
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Squadrons", property, parameters);
         }
         
         
         private const _filterButtons:ToggleButtonsGroup = new ToggleButtonsGroup();
         private const _routes:ListCollectionView = new ListCollectionView(ModelLocator.getInstance().routes);
         
         private function this_initializeHandler(event:FlexEvent):void {
            _filterButtons.registerButton(btnPlayerRoutes);
            _filterButtons.registerButton(btnAllianceRoutes);
            _filterButtons.addEventListener(
               ToggleButtonsGroupEvent.SELECTION_CHANGE, 
               filterButtons_selectionChangeHandler, false, 0, true
            );
            _filterButtons.select(btnPlayerRoutes);
         }
         
         private function filterButtons_selectionChangeHandler(event:ToggleButtonsGroupEvent) : void {
            if (event.selectedButton == btnPlayerRoutes)
               applyFilterFunction(ff_playerRoutes);
            else
               applyFilterFunction(ff_allianceRoutes);
         }
         
         private function btnCloseScreen_clickHandler(event:MouseEvent) : void {
            NavigationController.getInstance().showPreviousScreen();
         }
         
         private function applyFilterFunction(ff:Function) : void {
            Collections.applyFilter(_routes, ff);
         }
         
         private function ff_playerRoutes(route:MRoute) : Boolean {
            return route.owner == Owner.PLAYER;
         }
         
         private function ff_allianceRoutes(route:MRoute) : Boolean {
            return route.owner == Owner.ALLY;
         }
         
         
         protected override function get title() : String {
            return getString("title.squadrons");
         }
         
         protected override function get emptyListMessage() : String {
            return getString("title.noSquadrons");
         }
         
         protected override function get dataProvider() : IList {
            return _routes;
         }
         
         protected override function get dataContainer() : IVisualElement {
            return _list;
         }
         
         protected override function get controlButtons() : Group {
            return _controlButtons;
         }
         
         protected override function get closeButton() : Group {
            return _btnClose;
         }
      ]]>
   </fx:Script>
</screen:ListScreen>
