<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:squadscr="components.squadronsscreen.*"
                autoDrawBackground="false" width="100%">
   <fx:Binding source="model.currentLocation.isSSObject" destination="_currentLocIsPlanet"/>
   <fx:Script>
      <![CDATA[
         import controllers.routes.RoutesCommand;
         
         import models.ModelLocator;
         import models.Owner;
         import models.movement.MRoute;
         import models.unit.MCUnitScreen;
         import models.unit.Unit;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.datastructures.Collections;
         import utils.locale.Localizer;
         
         
         private function getImage(name:String) : BitmapData {
            return ImagePreloader.getInstance().getImage
               (AssetNames.MOVEMENT_IMAGES_FOLDER + "routeir_" + name);
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("Squadrons", property, parameters);
         }
         
         private function get ML() : ModelLocator {
            return ModelLocator.getInstance();
         }
         
         
         /**
          * Should the management button be visible? Default is <code>false</code>. Property effects the
          * component only during its initialization.
          */
         public var managementButtonVisible:Boolean = false;
         
         protected override function childrenCreated() : void {
            super.childrenCreated();
            btnManage.visible = btnManage.includeInLayout = managementButtonVisible;
         }
         
         [Bindable]
         private var _currentLocIsPlanet:Boolean = false;         
         
         [Bindable(event="dataChange")]
         private function get model() : MRoute {
            return MRoute(data);
         }
         
         private function btnStop_clickHandler(event:MouseEvent) : void {
            new RoutesCommand(RoutesCommand.DESTROY, model).dispatch();
         }
         
         private var uScreen: MCUnitScreen = MCUnitScreen.getInstance();
         
         private function btnManage_clickHandler(event:MouseEvent) : void {
            uScreen.showSquadron( 
               Collections.filter(ML.units,
                  function(unit:Unit) : Boolean {
                     return model != null && unit.squadronId == model.id;
                  }
               )
            );
         }
      ]]>
   </fx:Script>
   <s:layout><s:HorizontalLayout gap="0" verticalAlign="justify"/></s:layout>
   
   <s:Group>
      <s:Group left="0" right="0" top="0" bottom="0">
         <s:layout><s:HorizontalLayout gap="0"/></s:layout>
         <s:BitmapImage source="{getImage('info_left')}"/>
         <s:BitmapImage source="{getImage('info_center')}" fillMode="repeat" width="100%"/>
         <s:BitmapImage source="{getImage('info_right')}"/>
      </s:Group>
      <!-- information -->
      <s:Group left="20" right="33" top="6">
         <s:layout><s:HorizontalLayout gap="10"/></s:layout>
         <s:Group>
            <s:layout><s:VerticalLayout horizontalAlign="contentJustify" gap="15" paddingTop="9"/></s:layout>
            <s:Label text="{getString('label.sourceLocation')}"/>
            <s:Label text="{getString('label.currentLocation')}"
                     visible="{!_currentLocIsPlanet}" includeInLayout="{!_currentLocIsPlanet}"/>
            <s:Label text="{getString('label.targetLocation')}"/>
            <s:Label text="{getString('label.leavesPlanetAt')}"
                     visible="{_currentLocIsPlanet}" includeInLayout="{_currentLocIsPlanet}"/>
            <s:Label text="{getString('label.arrivesAt')}"/>
         </s:Group>
         <s:Group>
            <s:layout><s:VerticalLayout horizontalAlign="contentJustify" gap="3"/></s:layout>
            <squadscr:CLocationWithButton location="{model.sourceLocation}"/>
            <squadscr:CLocationWithButton location="{model.currentLocation}"
                                          visible="{!_currentLocIsPlanet}" includeInLayout="{!_currentLocIsPlanet}"/>
            <squadscr:CLocationWithButton location="{model.targetLocation}"/>
            <s:Label paddingTop="9" text="{model.jumpsAtEvent.occuresAtString} ({model.jumpsAtEvent.occuresInString})"
                     visible="{_currentLocIsPlanet}" includeInLayout="{_currentLocIsPlanet}"/>
            <s:Label paddingTop="9" text="{model.arrivalEvent != null
                     ? model.arrivalEvent.occuresAtString + ' (' + model.arrivalEvent.occuresInString + ')'
                     : getString('label.unknown')}"/>
         </s:Group>
      </s:Group>
   </s:Group>
   
   <s:Group width="100%">
      <s:Group left="0" right="0" top="0" bottom="0">
         <s:layout><s:HorizontalLayout gap="0"/></s:layout>
         <s:BitmapImage source="{getImage('units')}" fillMode="repeat" width="100%"/>
         <s:Group minWidth="65">
            <s:Group left="0" right="0" top="0" bottom="0">
               <s:layout><s:HorizontalLayout gap="0"/></s:layout>
               <s:BitmapImage source="{getImage('btn_left')}"/>
               <s:BitmapImage source="{getImage('btn_center')}" width="100%"/>
               <s:BitmapImage source="{getImage('btn_right')}"/>
            </s:Group>
            <!-- stop and manage button -->
            <s:Group left="17" right="5" bottom="5">
               <s:layout><s:HorizontalLayout gap="5" horizontalAlign="right"/></s:layout>
               <s:Button id="btnManage" label="{getString('label.manage')}" click="btnManage_clickHandler(event)"/>
               <s:Button id="btnStop" label="{getString('label.stop')}" click="btnStop_clickHandler(event)"
                         enabled="{model.owner == Owner.PLAYER}"/>
            </s:Group>
         </s:Group>
      </s:Group>
      <!-- units -->
      <s:List id="lstUnits" left="15" top="20" right="20" borderVisible="false" contentBackgroundAlpha="0"
              dataProvider="{model.cachedUnits}" itemRenderer="components.unit.IRUnitBuildingEntrySmall">
         <s:layout><s:HorizontalLayout/></s:layout>
      </s:List>
   </s:Group>
   
</s:ItemRenderer>
