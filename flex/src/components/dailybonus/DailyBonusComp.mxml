<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" 
         xmlns:base="components.base.*"
         addedToStage="addedToStageHandler(event)"
         removedFromStage="removedFromStageHandler(event)">
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.planet.IRPlayerPlanet;

      import globalevents.GlobalEvent;

      import models.ModelLocator;
      import models.Reward;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.solarsystem.MSSObject;

      import mx.collections.ArrayCollection;

      import spark.components.Button;
      import spark.events.IndexChangeEvent;

      import utils.StringUtil;
      import utils.assets.AssetNames;
      import utils.assets.ImagePreloader;
      import utils.locale.Localizer;


      public function set reward(value: Reward): void {
         bonus = value;
         refreshNotFitting();
      }

      [Bindable]
      private var bonus: Reward;

      [Bindable]
      private var notFitting: String = null;

      private function refreshNotFitting(e: GlobalEvent = null): void {
         if (planetSelector) {
            var planet: MSSObject = MSSObject(planetSelector.selectedItem);
            notFitting = Resource.getNotFittingReward(planet, bonus);
         }
         else {
            notFitting = null;
         }
      }

      protected function addedToStageHandler(event: Event): void {
         EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
      }


      protected function removedFromStageHandler(event: Event): void {
         EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, refreshNotFitting);
      }


      protected function planetSelector_changeHandler(event: IndexChangeEvent): void {
         refreshNotFitting();
      }

      protected function datagroup1_clickHandler(event: MouseEvent): void {
         if (event.target is Button) {
            dispatchCloseEvent();
         }
      }

      private function dispatchCloseEvent(): void {
         dispatchEvent(new DailyBonusEvent(DailyBonusEvent.CLOSE_PANEL));
      }
      ]]>
   </fx:Script>
   <s:Group maxWidth="300">
      <s:Label maxWidth="300" text="{Localizer.string('Popups', 'message.dailyBonus')}"
               id="topLbl" horizontalCenter="0"/>
      <s:BitmapImage top="{topLbl.height + 10}" id="contentBackground" 
                     source="{ImagePreloader.getInstance().getImage(
                     AssetNames.UI_IMAGES_FOLDER + 'daily_bonus_panel')}"/>
      <s:Label text="{Localizer.string('Popups', 'label.todayYouGot')}" paddingLeft="60"
               top="{topLbl.height + 15}"/>
      <base:AdvancedContainer width="{contentBackground.width}" 
                              top="{topLbl.height + 30}" 
                              height="{contentBackground.height - 10}">
         <base:RewardComp type="{ResourceType.METAL}" count="{bonus.metal}"
                             visible="{bonus.metal != 0}"
                             toolTip="{Localizer.string('Resources', ResourceType.METAL)}"/>
         <base:RewardComp type="{ResourceType.ENERGY}" count="{bonus.energy}"
                             visible="{bonus.energy != 0}"
                             toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"/>
         <base:RewardComp type="{ResourceType.ZETIUM}" count="{bonus.zetium}"
                             visible="{bonus.zetium != 0}"
                             toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"/>
         <base:RewardComp type="{ResourceType.CREDS}" count="{bonus.creds}"
                          visible="{bonus.creds != 0}"
                          toolTip="{StringUtil.firstToUpperCase(
                          Localizer.string('Credits', 'label.creds'))}"/>
         <s:Group width="100%" visible="{bonus.scientists != 0}">
            <s:Label width="100" text="{Localizer.string('Resources', ResourceType.SCIENTISTS)}"/>
            <s:Label text="{bonus.scientists}"/>
            <s:layout>
               <s:HorizontalLayout horizontalAlign="center"/>
            </s:layout>
         </s:Group>
         <s:DataGroup itemRenderer="components.unit.IRUnitBuildingEntrySmall" 
                      dataProvider="{bonus.units}"
                      height="85" visible="{bonus.units.length > 0}" 
                      click="datagroup1_clickHandler(event)">
            <s:layout>
               <s:HorizontalLayout id="unitsLayout" horizontalAlign="center"/>
            </s:layout>
         </s:DataGroup>
         <base:layout>
            <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
         </base:layout>
      </base:AdvancedContainer>
      <base:AdvancedContainer top="{topLbl.height + contentBackground.height + 20}" 
                              horizontalCenter="0">
         <base:Warning text="{Localizer.string('Quests', 'warning.wontFit', [notFitting])}"
                       visible="{notFitting != null}" maxWidth="300"/>
         <s:Group>
            <s:Label text="{Localizer.string('Quests', 'label.choosePlanet')}" styleName="h3"/>
            <base:PlanetSelector id="planetSelector" minWidth="180" 
               dataProvider="{ModelLocator.getInstance().player.planets}"
               itemRenderer="components.planet.IRPlayerPlanet"
               change="planetSelector_changeHandler(event)"/>
            <s:layout>
               <s:HorizontalLayout horizontalAlign="center"/>
            </s:layout>
         </s:Group>
         <base:layout>
            <s:VerticalLayout horizontalAlign="center"/>
         </base:layout>
      </base:AdvancedContainer>
   </s:Group>
</s:Group>
