<?xml version="1.0" encoding="utf-8"?>
<screen:ArtworkedClosableScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
                                xmlns:s="library://ns.adobe.com/flex/spark" 
                                xmlns:mx="library://ns.adobe.com/flex/mx"
                                xmlns:base="components.base.*"
                                xmlns:notifs="components.notifications.*"
                                xmlns:screen="components.base.screen.*"
                                initialize="this_initializeHandler(event)"
                                seperatorVisible="{headerFromListSeparatorVisible}"
                                scroller="{contentScroller}"
                                mainAreaContent="{mContent}"
                                emptyLabelVisible="{_dataProviderEmpty}">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import globalevents.GlobalEvent;
         
         import mx.collections.IList;
         import mx.core.IVisualElement;
         import mx.events.CollectionEvent;
         import mx.events.FlexEvent;
         
         import spark.components.DataGroup;
         import spark.components.SkinnableDataContainer;
         import spark.layouts.HorizontalAlign;
         import spark.layouts.VerticalLayout;
         
         import utils.Objects;
         import utils.locale.Localizer;
         
         
         /**
          * Title of the screen. Default is empty string.
          */
         protected function get screenTitle() : String {
            return "";
         };
         
         /**
          * Message to be shown when the list is empty. Default is empty string.
          */
         protected function get emptyListMessage() : String {
            return "";
         }
         
         [Bindable]
         /**
          * Should the line separating header of the screen and the list be visible.
          * 
          * @default false;
          */ 
         protected var headerFromListSeparatorVisible:Boolean = false; 
         
         /**
          * A List with data to be rendered. Required. Should always return the same instance.
          */
         protected function get dataProvider() : IList {
            throw new IllegalOperationError("This property is abstract");
         }
         
         private function dataProvider_collectionChangeHandler(event:CollectionEvent) : void {
            updateDataProviderEmpty();
         };
         
         [Bindable]
         private var _dataProviderEmpty:Boolean = false;
         private function updateDataProviderEmpty() : void {
            _dataProviderEmpty = dataProvider == null || dataProvider.length == 0;
         }
         
         /**
          * A component that will render items in the data provider (either <code>DataGroup</code> or
          * <code>SkinnableDataContainer</code>). Required. Should always return the same instance.
          * 
          * <p><b>Warning!</b> <code>dataProvider</code> property of the container may be <code>null</code>
          * so add checks and gouards throughout the code of the implementation of your data container
          * accordingly. <code>dataProvider</code> property will be set to <code>null</code> when application
          * is reset.</p>
          */
         protected function get dataContainer() : IVisualElement {
            throw new IllegalOperationError("This property is abstract");
         };
         
         [Bindable]
         /**
          * Should the <code>colorLegend</code> container be visible.
          * 
          * @default true
          */
         protected var colorLegendVisible:Boolean = true;
         
         /**
          * A group that holds legend of list item colors just below the screen title. Optional.
          * Should allways return the same instance.
          */
         protected function get colorLegend() : Group {
            return null;
         }
         
         /**
          * A container that holds list control buttons (to the right of the screen title). Optional.
          * Should allways return the same instance.
          */
         protected function get controlButtons() : Group {
            return null;
         }
         
         private function this_initializeHandler(event:FlexEvent) : void {
            dataProvider.addEventListener(
               CollectionEvent.COLLECTION_CHANGE,
               dataProvider_collectionChangeHandler, false, 0, true
            );
            updateDataProviderEmpty();
            title = screenTitle;
            emptyLabelText = emptyListMessage;
            
            EventBroker.subscribe(GlobalEvent.APP_RESET, globalEvent_appResetHandler);
            EventBroker.subscribe(GlobalEvent.APP_READY, globalEvent_appReadyHandler);
         }
         
         
         protected function globalEvent_appReadyHandler(event:GlobalEvent) : void {
            setDataProvider(dataProvider);
         }
         
         protected function globalEvent_appResetHandler(event:GlobalEvent) : void {
            setDataProvider(null);
         }
         
         private function setDataProvider(dataProvider:IList) : void {
            if (dataContainer != null) {
               dataContainer["dataProvider"] = dataProvider;
            }
         }
         
         
         public var layoutGap: int = 0;
         
         protected override function createChildren() : void {
            super.createChildren();
            
            if (!dataContainer is SkinnableDataContainer &&
               !dataContainer is DataGroup)
               throw new Error(
                  "Incorrect implementation of [prop dataContainer] in [class: " + 
                  Objects.getClassName(this) + "] must return either instance of SkinnableDataContainer " +
                  "or DataGroup but was " + dataContainer
               );
            
            dataContainer.left = 0;
            dataContainer.right = 0;
            dataContainer.percentHeight = 100;
            var layout:VerticalLayout = new VerticalLayout();
            layout.horizontalAlign = HorizontalAlign.JUSTIFY;
            layout.variableRowHeight = true;
            layout.gap = layoutGap;
            dataContainer["layout"] = layout;
            setDataProvider(dataProvider);
            grpListContainer.addElement(dataContainer);
            
            if (colorLegend != null) {
               var colorLegendLayout:HorizontalLayout = new HorizontalLayout();
               colorLegendLayout.gap = 10;
               colorLegend.layout = colorLegendLayout;
               grpColorLegend.addElement(colorLegend);
            }
            else
               colorLegendVisible = false;
            
            if (controlButtons != null) {
               var controlButtonsLayout:HorizontalLayout = new HorizontalLayout();
               controlButtonsLayout.gap = 3;
               controlButtons.layout = controlButtonsLayout;
               controlButtons.right = 5;
               controlButtons.top = 5;
               headerContent = controlButtons;
            }
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("ListScreen", property, parameters);
         }
      ]]>
   </fx:Script>
   
   <fx:Declarations>
      <s:Group id="mContent" height="100%" width="100%">
         <s:Group height="100%" width="100%">
            <!--- Scroller for scrolling the content of the list -->
            <base:Scroller id="contentScroller" stepMultiplier="10" left="0" right="0" top="0" bottom="0"
                           skinClass="components.base.screen.ListScreenScrollerSkin">
               <!--- Container of a list (viewport of list scroller) -->
               <s:Group id="grpListContainer" width="100%"/>
            </base:Scroller>
         </s:Group>   
         <!--- Group that holds legend of list colors -->
         <s:Group id="grpColorLegend" left="0" top="-15" visible="{colorLegendVisible}">
            <s:layout>
               <s:HorizontalLayout paddingLeft="10" gap="10"/>
            </s:layout>
            <s:Label text="{getString('label.colorLegend')}"/>
         </s:Group>
      </s:Group>
   </fx:Declarations>    
</screen:ArtworkedClosableScreen>
