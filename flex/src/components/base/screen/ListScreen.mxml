<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:base="components.base.*"
         xmlns:notifs="components.notifications.*"
         width="100%" height="100%"
         initialize="this_initializeHandler(event)">
   
   <fx:Script>
      <![CDATA[
         import mx.collections.IList;
         import mx.core.IVisualElement;
         import mx.core.UIComponent;
         import mx.events.CollectionEvent;
         import mx.events.FlexEvent;
         
         import spark.components.DataGroup;
         import spark.components.SkinnableContainer;
         import spark.components.SkinnableDataContainer;
         import spark.layouts.HorizontalAlign;
         
         import utils.Objects;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         /**
          * Title of the screen. Default is empty string.
          */
         protected function get title() : String {
            return "";
         };
         
         /**
          * Message to be shown when the list is empty. Default is empty string.
          */
         protected function get emptyListMessage() : String {
            return "";
         }
         
         [Bindable]
         /**
          * Should the line separating header of the screen and the list be visible.
          * 
          * @default false;
          */ 
         protected var headerFromListSeparatorVisible:Boolean = false; 
         
         /**
          * A List with data to be rendered. Required. Should always return the same instance.
          */
         protected function get dataProvider() : IList {
            throw new IllegalOperationError("This property is abstract");
         }
         
         private function dataProvider_collectionChangeHandler(event:CollectionEvent) : void {
            updateDataProviderEmpty();
         };
         
         [Bindable]
         private var _dataProviderEmpty:Boolean = false;
         private function updateDataProviderEmpty() : void {
            _dataProviderEmpty = dataProvider == null || dataProvider.length == 0;
         }
         
         /**
          * A component that will render items in the data provider (either <code>DataGroup</code> or
          * <code>SkinnableDataContainer</code>). Required. Should always return the same instance.
          */
         protected function get dataContainer() : IVisualElement {
            throw new IllegalOperationError("This property is abstract");
         };
         
         [Bindable]
         /**
          * Should the <code>colorLegend</code> container be visible.
          * 
          * @default true
          */
         protected var colorLegendVisible:Boolean = true;
         
         /**
          * A group that holds legend of list item colors just below the screen title. Optional.
          * Should allways return the same instance.
          */
         protected function get colorLegend() : Group {
            return null;
         }
         
         /**
          * A container that holds list control buttons (to the right of the screen title). Optional.
          * Should allways return the same instance.
          */
         protected function get controlButtons() : Group {
            return null;
         }
         
         private function this_initializeHandler(event:FlexEvent) : void {
            dataProvider.addEventListener(
               CollectionEvent.COLLECTION_CHANGE,
               dataProvider_collectionChangeHandler, false, 0, true
            );
            updateDataProviderEmpty();
            lblScreenTitle.text = title;
            lblEmptyListMessage.text = emptyListMessage;
         }
         
         protected override function createChildren() : void {
            super.createChildren();
            
            if (!dataContainer is SkinnableDataContainer &&
                !dataContainer is DataGroup)
               throw new Error(
                  "Incorrect implementation of [prop dataContainer] in [class: " + 
                  Objects.getClassName(this) + "] must return either instance of SkinnableDataContainer " +
                  "or DataGroup but was " + dataContainer
               );
            
            dataContainer.left = 0;
            dataContainer.right = 0;
            dataContainer.percentHeight = 100;
            var layout:VerticalLayout = new VerticalLayout();
            layout.horizontalAlign = HorizontalAlign.JUSTIFY;
            layout.variableRowHeight = true;
            layout.gap = 0;
            dataContainer["layout"] = layout;
            dataContainer["dataProvider"] = dataProvider;
            grpListContainer.addElement(dataContainer);
            
            if (colorLegend != null) {
               var colorLegendLayout:HorizontalLayout = new HorizontalLayout();
               colorLegendLayout.gap = 10;
               colorLegend.layout = colorLegendLayout;
               grpColorLegend.addElement(colorLegend);
            }
            else
               colorLegendVisible = false;
            
            if (controlButtons != null) {
               var controlButtonsLayout:HorizontalLayout = new HorizontalLayout();
               controlButtonsLayout.gap = 3;
               controlButtons.layout = controlButtonsLayout;
               controlButtons.right = 5;
               controlButtons.top = 5;
               addElement(controlButtons);
            }
         }
         
         
         private function getImage(name:String) : BitmapData {
            return ImagePreloader.getInstance().getImage(AssetNames.NOTIFICATION_IMAGE_FOLDER + name);
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("ListScreen", property, parameters);
         }
      ]]>
   </fx:Script>
   
   <!-- background -->
   <s:Rect left="0" right="0" top="0" bottom="0">
      <s:fill>
         <s:SolidColor color="0x080C08"/>
      </s:fill>
   </s:Rect>
   
   <!-- top artwork -->
   <s:Group left="0" right="0" top="0">
      <s:layout>
         <s:HorizontalLayout gap="0"/>
      </s:layout>
      <s:BitmapImage source="{getImage('screen_top_left')}"/>
      <s:BitmapImage source="{getImage('screen_top_right')}" width="100%"/>
   </s:Group>
   
   <!--- Label for screen title -->
   <s:Label id="lblScreenTitle" left="10" top="20" width="375"
            fontSize="20" fontWeight="bold" color="0xEEC500" textAlign="center"/>
   
   <!--- Group that holds legend of list colors -->
   <s:Group id="grpColorLegend" left="0" top="55" visible="{colorLegendVisible}">
      <s:layout>
         <s:HorizontalLayout paddingLeft="10" gap="10"/>
      </s:layout>
      <s:Label text="{getString('label.colorLegend')}"/>
   </s:Group>
   
   <!--- Empty list message label -->
   <s:Label id="lblEmptyListMessage" visible="{_dataProviderEmpty}" verticalCenter="0" horizontalCenter="0"
            fontSize="36" fontWeight="bold" color="0x1C1C1C"/>
   
   <s:Group left="0" right="0" top="71" bottom="0">
      <s:layout>
         <s:VerticalLayout horizontalAlign="justify" gap="0"/>
      </s:layout>
      <s:Line xFrom="0" xTo="10"
              visible="{headerFromListSeparatorVisible}"
              includeInLayout="{headerFromListSeparatorVisible}">
         <s:stroke>
            <s:SolidColorStroke color="0x040404"/>
         </s:stroke>
      </s:Line>
      <!--- Scroller for scrolling the content of the list -->
      <base:Scroller id="contentScroller" stepMultiplier="10" height="100%"
                     skinClass="components.base.screen.ListScreenScrollerSkin">
         <!--- Container of a list (viewport of list scroller) -->
         <s:Group id="grpListContainer" width="100%"/>
      </base:Scroller>
   </s:Group>
</s:Group>
