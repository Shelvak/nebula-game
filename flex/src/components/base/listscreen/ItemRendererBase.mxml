<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark" 
                xmlns:mx="library://ns.adobe.com/flex/mx"
                minWidth="5" minHeight="27"
                autoDrawBackground="false"
                initialize="this_initializeHandler(event)">
   
   <s:states>
      <s:State name="normal"/>
      <s:State name="selected"/>
      <s:State name="hovered"/>
   </s:states>
   
   <fx:Script>
      <![CDATA[
         import mx.core.IVisualElement;
         import mx.events.FlexEvent;
         
         import spark.layouts.VerticalAlign;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         private static const PBORDER:String = "pborder_";         
         private static const HEAD:String = "head_";
         
         private function getImage(name:String) : BitmapData {
            return ImagePreloader.getInstance().getImage(AssetNames.NOTIFICATION_IMAGE_FOLDER + name);
         }
         
         private function getString(property:String, parameters:Array = null) : String {
            return Localizer.string("ListScreen", property, parameters);
         };
         
         
         [Bindable]
         /**
          * Should the dark line at the bottom of the component be visible.
          * 
          * @default false
          */
         protected var bottomLineVisible:Boolean = false;
         
         private function this_initializeHandler(event:FlexEvent) : void {
            if (headerLeftContent != null) {
               headerLeftContent.left = 10;
               headerLeftContent.right = 30;
               headerLeftContent.top = 10;
               headerLeftContent.bottom = 0;
               var hlLayout:HorizontalLayout = new HorizontalLayout();
               hlLayout.gap = 5;
               hlLayout.verticalAlign = VerticalAlign.TOP;
               headerLeftContent.layout = hlLayout;
               grpHeaderLeft.addElement(headerLeftContent);
            }
            
            if (headerRightContent != null) {
               headerRightContent.left = 38;
               headerRightContent.right = 8;
               headerRightContent.top = 10;
               headerRightContent.bottom = 0;
               var hrLayout:HorizontalLayout = new HorizontalLayout();
               hrLayout.gap = 5;
               hrLayout.verticalAlign = VerticalAlign.TOP;
               headerRightContent.layout = hrLayout;
               grpHeaderRight.addElement(headerRightContent);
            }
         }
         
         private var _oldData:Object = null;
         [Bindable(event="dataChange")]
         public override function set data(value:Object) : void {
            if (data != value) {
               if (_oldData == null)
                  _oldData = super.data;
               super.data = value;
               _fDataChanged = true;
               invalidateProperties();
               invalidateDisplayList();
            }
         }
         
         private var _fDataChanged:Boolean = true;
         protected override function commitProperties() : void {
            super.commitProperties();
            if (_fDataChanged) {
               var oldValue:Object = _oldData;
               var newValue:Object = data;
               _oldData = null;
               reinstallCustomPart();
               dataCommit(oldValue, newValue);
            }
            _fDataChanged = false;
         }
         
         /**
          * Invoked after <code>data</code> property has been changed and a custom part has been reinstalled.
          * Both parameters may be <code>null</code>.
          */
         protected function dataCommit(oldValue:Object, newValue:Object) : void {}
         
         private function reinstallCustomPart() : void {
            if (grpCustomPart != null && data != null) {
               grpCustomPart.removeAllElements();
               var part:IVisualElement = createCustomPart();
               part.left = 0;
               part.right = 0;
               part.top = 0;
               part.bottom = 0;
               if (part != null) grpCustomPart.addElement(part);
               if (data != null)
                  lblTitle.text = title;
            }
         }
         
         /**
          * Handler of the close button click event. You must override this handler.
          */
         protected function btnClose_clickHandler(event:MouseEvent) : void {
            throw new IllegalOperationError("method is abstract");
         }
         
         /**
          * Creates custom part of an item renderer. This factory method must always return new instance of
          * <code>IVisualElement</code>. This method may return <code>null</code>.
          */ 
         protected function createCustomPart() : IVisualElement {
            throw new IllegalOperationError("Method is abstract");
         }
         
         /**
          * Title of the renderer. Visible in selected state. Required.
          */
         protected function get title() : String {
            throw new IllegalOperationError("Property is abstract");
         }
         
         /**
          * Content on the left of the renderer header. Should always return the same instance. Optional.
          */
         protected function get headerLeftContent() : Group {
            return null;
         }
         
         /**
          * Content on the right renderer header. Should always return the same instance. Optional.
          */
         protected function get headerRightContent() : Group {
            return null;
         }
      ]]>
   </fx:Script>
   
   <!-- background -->
   <s:Rect left="0" right="0" top="0" height="26">
      <s:fill>
         <s:SolidColor color="0x363636"/>
      </s:fill>
   </s:Rect>
   
   <!-- shadow of a header -->
   <s:Rect left="10" right="10" top="2" height="18"
           alpha.normal="0.3" alpha.hovered="0.6" alpha.selected="0.6">
      <s:fill>
         <s:LinearGradient rotation="-90">
            <s:GradientEntry color="0x000000" color.selected="0xEFC501" alpha="1"/>
            <s:GradientEntry color="0x000000" color.selected="0xEFC501" alpha="0"/>
         </s:LinearGradient>
      </s:fill>
   </s:Rect>
   
   <!-- header -->
   <s:Group left="0" right="0">
      <s:layout>
         <s:HorizontalLayout gap="0" verticalAlign="bottom"/>
      </s:layout>
      
      <!-- header: left -->
      <s:Group id="grpHeaderLeft">
         <s:Group left="0" right="0">
            <s:layout>
               <s:HorizontalLayout gap="0"/>
            </s:layout>
            <s:BitmapImage source="{getImage(HEAD + 'msg_left')}"/>
            <s:BitmapImage source="{getImage(HEAD + 'msg_center')}" width="100%" fillMode="repeat"/>
            <s:BitmapImage source="{getImage(HEAD + 'msg_right')}"/>
         </s:Group>
      </s:Group>
      
      <s:BitmapImage source="{getImage(HEAD + 'center')}" width="100%" fillMode="repeat"/>
      
      <!-- header: right -->
      <s:Group id="grpHeaderRight">
         <s:Group left="0" right="0">
            <s:layout>
               <s:HorizontalLayout gap="0"/>
            </s:layout>
            <s:BitmapImage source="{getImage(HEAD + 'time_left')}"/>
            <s:BitmapImage source="{getImage(HEAD + 'time_center')}" width="100%" fillMode="repeat"/>
            <s:BitmapImage source="{getImage(HEAD + 'time_right')}"/>
         </s:Group>
      </s:Group>
      
   </s:Group>
   
   <!-- ############################### -->
   <!-- ### CUSTOM PART STARTS HERE ### -->
   
   <s:Rect left="0" right="0" top="27" bottom="0" includeIn="selected">
      <s:fill>
         <s:SolidColor color="0x1D1D1D"/>
      </s:fill>
   </s:Rect>
   
   <s:Group left="0" right="0" top="27" bottom="0" includeIn="selected">
      
      <s:layout>
         <s:VerticalLayout horizontalAlign="justify" gap="0"/>
      </s:layout>
      
      <!-- artwork: top -->
      <s:Group>
         <s:layout>
            <s:HorizontalLayout verticalAlign="top" gap="0"/>
         </s:layout>
         <s:BitmapImage source="{getImage(PBORDER + 'top_left')}"/>
         <s:BitmapImage source="{getImage(PBORDER + 'top_center')}" width="100%" fillMode="repeat"/>
         <s:BitmapImage source="{getImage(PBORDER + 'top_right')}"/>
      </s:Group>
      
      <!-- middle -->
      <s:Group>
         
         <!-- artwork -->
         <s:BitmapImage left="0" top="0" bottom="0"
                        source="{getImage(PBORDER + 'middle_left')}" fillMode="repeat"/>
         <s:BitmapImage right="0" top="0" bottom="0"
                        source="{getImage(PBORDER + 'middle_right')}" fillMode="repeat"/>
         
         <!-- content -->
         <s:Group left="18" right="18" bottom="4" top="30">
            
            <s:layout>
               <s:VerticalLayout horizontalAlign="justify"/>
            </s:layout>
            
            <!-- title -->
            <s:Label id="lblTitle" typographicCase="uppercase" fontSize="28"
                     fontWeight="bold" color="0xEEC500"/>
            
            <!-- custom content -->
            <s:Group id="grpCustomPart">
               <s:initialize>reinstallCustomPart()</s:initialize>
            </s:Group>
            
         </s:Group>
         
      </s:Group>
      
      <!-- bottom -->
      <s:Group>
         
         <s:layout>
            <s:HorizontalLayout verticalAlign="bottom" gap="0"/>
         </s:layout>
         
         <!-- artwork -->
         <s:BitmapImage source="{getImage(PBORDER + 'bottom_left')}"/>
         <s:BitmapImage source="{getImage(PBORDER + 'bottom_center')}" width="100%" fillMode="repeat"/>
         
         <!-- buttons -->
         <s:Group>
            
            <!-- artwork -->
            <s:Group left="0" right="0" bottom="0" top="0">
               <s:layout>
                  <s:HorizontalLayout verticalAlign="bottom" gap="0"/>
               </s:layout>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_left')}"/>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_center')}" width="100%" fillMode="repeat"/>
               <s:BitmapImage source="{getImage(PBORDER + 'btn_right')}"/>
            </s:Group>
            
            <!-- actual buttons -->
            <s:Group left="43" right="7" bottom="6" top="8">
               <s:layout>
                  <s:HorizontalLayout gap="5" verticalAlign="bottom"/>
               </s:layout>
               <s:Button id="btnClose" label="{getString('label.close')}" click="btnClose_clickHandler(event)"/>
            </s:Group>
            
         </s:Group>               
         
      </s:Group>
      
   </s:Group>
   
   <!-- ### CUSTOM PART ENDS HERE ### -->
   <!-- ############################# -->
   
   <s:Line visible="{bottomLineVisible}" left="0" right="0" bottom="-1" xFrom="0" xTo="10">
      <s:stroke>
         <s:SolidColorStroke color="0x040404"/>
      </s:stroke>
   </s:Line>

</s:ItemRenderer>
