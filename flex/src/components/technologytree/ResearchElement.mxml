<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:base="components.base.*"
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    creationComplete="basecontainer1_creationCompleteHandler(event)" 
                    xmlns:components="utils.components.*" 
                    xmlns:credits="components.credits.*">
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.credits.AccelerateSelector;
      import components.popups.ActionConfirmationPopUp;
      import components.popups.WaitingCredsPopUp;

      import config.Config;

      import controllers.navigation.MCSidebar;
      import controllers.screens.SidebarScreens;

      import models.technology.MCTechnologySelectedSidebar;
      import models.technology.events.TechnologyEvent;

      import utils.ApplicationLocker;

      import controllers.technologies.TechnologiesCommand;

      import globalevents.GCreditEvent;
      import globalevents.GlobalEvent;

      import models.parts.events.UpgradeEvent;
      import models.resource.ResourceType;
      import models.technology.Technology;

      import mx.events.FlexEvent;

      import utils.DateUtil;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;


      [Bindable]
      private var _researchModel: Technology;

      public function set researchModel(value: Technology): void {
         removeModelEventListeners();
         _researchModel = value;
         if (value) {
            addModelEventListeners();
         }
      }

      public function get researchModel(): Technology {
         return _researchModel;
      }

      override protected function updateDisplayList(uw: Number,
                                                    uh: Number): void {
         super.updateDisplayList(uw, uh);

         if (!_researchModel || !_researchModel.upgradePart) {
            return;
         }

         if (_researchModel.pauseRemainder != 0 || _researchModel.upgradePart.upgradeEndsAt != null) {
            researchBar.setProgress(_researchModel.upgradePart.upgradeProgress,
                                    1);
         }
      }

      protected function addModelEventListeners(): void {
         _researchModel.upgradePart.addEventListener(
            UpgradeEvent.UPGRADE_PROGRESS,
            model_upgradeProgressHandler
         );
         _researchModel.upgradePart.addEventListener(
            UpgradeEvent.UPGRADE_STOPPED,
            model_upgradeProgressHandler
         );
      }

      private function model_upgradeProgressHandler(e: UpgradeEvent): void {
         invalidateDisplayList();
      }

      private function removeModelEventListeners(e: GlobalEvent = null): void {
         if (_researchModel && _researchModel.upgradePart) {
            _researchModel.upgradePart.removeEventListener(
               UpgradeEvent.UPGRADE_PROGRESS,
               model_upgradeProgressHandler
            );
            _researchModel.upgradePart.removeEventListener(
               UpgradeEvent.UPGRADE_STOPPED,
               model_upgradeProgressHandler
            );
         }
      }

      protected function basecontainer1_creationCompleteHandler(event: FlexEvent): void {
         EventBroker.subscribe(GlobalEvent.APP_RESET,
                               removeModelEventListeners);
      }

      protected function coin_clickHandler(event: MouseEvent): void {
         var accelerator: AccelerateSelector = new AccelerateSelector();
         accelerator.upgradePart = _researchModel.upgradePart;
         var speedPopUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         accelerator.popUp = speedPopUp;
         speedPopUp.confirmButtonEnabled = false;
         speedPopUp.confirmButtonClickHandler = function (): void {
            function doAccelerate(): void {
               new TechnologiesCommand(TechnologiesCommand.ACCELERATE_UPGRADE,
                                       {'id':      _researchModel.id,
                                          'index': accelerator.selectedAccelerateType}).dispatch();
            }

            if (accelerator.hasEnoughCredits()) {
               doAccelerate();
            }
            else {
               WaitingCredsPopUp.showPopUp(accelerator.selectedCost,
                                           doAccelerate);
            }
         }
         speedPopUp.addElement(accelerator);
         speedPopUp.show();
      }

      protected function handleTechClick(e: MouseEvent): void {
         MCTechnologySelectedSidebar.getInstance().selectedTechnology = _researchModel;
         _researchModel.dispatchEvent(new Event(TechnologyEvent.SELECTED_CHANGE));
         MCSidebar.getInstance().replaceCurrentWith(SidebarScreens.TECH_TREE_INFO);
      }
      ]]>
   </fx:Script>
   <s:Group left="0" right="0">
      <s:Label text="{_researchModel.title}" left="6" fontWeight="bold" fontSize="14"
               click="handleTechClick(event)"/>
      <s:Group width="32" height="32" left="6" bottom="2"
               click="handleTechClick(event)">
          <s:BitmapImage
                  source="{IMG.getImage(
            AssetNames.getTechnologyImageName(_researchModel.configName)
         )}" left="0" right="0" top="0" bottom="0"/>
      </s:Group>
      <s:Group left="43" right="10" top="14"> 
         <s:Group width="100%">
            <mx:ProgressBar id="researchBar" left="0" right="{_researchModel.scientists == 0?0:21}" 
                            labelPlacement="center" mode="manual"
                            label="{_researchModel.scientists == 0?
                            Localizer.string('Technologies','paused'):
                            Localizer.string('Technologies','finishedIn', [
                            _researchModel.upgradePart.timeToFinishString])}"/>
            <credits:CoinComp right="2" top="2" click="coin_clickHandler(event)"
                              visible="{_researchModel.scientists != 0}"
                              enabled="{_researchModel.upgradePart.upgradeProgress &lt; 1}"/>
         </s:Group>
         <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" 
                             textToDisplay="{_researchModel.scientists.toString()}"
                             visible="{_researchModel.scientists != 0}"/>
         <s:layout>
            <s:VerticalLayout gap="1"/>
         </s:layout>
      </s:Group>
   </s:Group>
</base:BaseContainer>
