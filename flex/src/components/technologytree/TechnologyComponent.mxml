<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*" toolTip="{modelObj.title}"
                    creationComplete="basecontainer1_creationCompleteHandler(event)" 
                    xmlns:objects="components.map.planet.objects.*"
                    click="handleTechClick(event)">
   <fx:Script>
      <![CDATA[	
         import components.base.Filters;
         
         import config.Config;
         
         import controllers.navigation.MCSidebar;
         import controllers.screens.SidebarScreens;
         
         import globalevents.GResourcesEvent;
         
         import models.parts.events.UpgradeEvent;
         import models.technology.MCTechnologySelectedSidebar;
         import models.technology.Technology;
         import models.technology.events.TechnologyEvent;
         
         import mx.events.FlexEvent;
         import mx.events.PropertyChangeEvent;
         
         import spark.effects.Fade;
         import spark.effects.Move;
         import spark.effects.Scale;
         import spark.effects.animation.RepeatBehavior;
         import spark.filters.ColorMatrixFilter;
         
         import utils.StringUtil;
         import utils.assets.AssetNames;
         
         
         private static const FADE_DURATION: int = 800;
         private static const FADE_TO: Number = 0.3;
         
         public static const imageSize: int = 48;
         
         public static const levelDisplayOffset: int = 15;

         [Bindable]
         public var hasGroupElements: Boolean = false;
         
         [Bindable]
         private var _modelName: String;
         
         public function get modelName():String {
            return _modelName;
         }
         
         public function set modelName(value:String):void {
            _modelName = value;
            dispatchEvent(new Event("modelNameChanged"));
            if (modelObj && modelObj.upgradePart)
            {
               modelObj.upgradePart.addEventListener(UpgradeEvent.UPGRADE_PROP_CHANGE, refreshBlinking);
            }
            refreshBlinking();
         }
         
         private function refreshBlinking(e: UpgradeEvent = null): void
         {
            if (modelObj && modelObj.upgradePart && modelObj.upgradePart.upgradeEndsAt != null)
            {
               if (!fadeResearch.isPlaying)
               {
                  fadeResearch.play([techImg]);
               }
            }
            else
            {
               if (fadeResearch.isPlaying)
               {
                  fadeResearch.end();
                  techImg.alpha = 1;
               }
            }
         }
         
         [Bindable]
         public var canBeUpgraded: Boolean;
         
         private var fadeResearch: Fade = new Fade();

         private var lastTech: Technology;
         private var lastName: String;
         
         [Bindable (event="modelNameChanged")]
         public function get modelObj():Technology {
            if (lastName != modelName)
            {
              lastTech = ML.technologies.getTechnologyByType(modelName);
              lastName = modelName;
            }
            return lastTech;
         }
         
         protected function basecontainer1_creationCompleteHandler(event:FlexEvent):void
         {
            fadeResearch.duration = FADE_DURATION;
            fadeResearch.alphaFrom = 1;
            fadeResearch.alphaTo = FADE_TO;
            fadeResearch.repeatBehavior = RepeatBehavior.REVERSE;
            fadeResearch.repeatCount = 0; 
            refreshBlinking();     
         }
         
         protected function handleTechClick(e: MouseEvent): void
         {
            MCTechnologySelectedSidebar.getInstance().selectedTechnology = modelObj;
            modelObj.dispatchEvent(new Event(TechnologyEvent.SELECTED_CHANGE));
            MCSidebar.getInstance().replaceCurrentWith(SidebarScreens.TECH_TREE_INFO);
         }

      ]]>
   </fx:Script>
   <s:Group width="{imageSize + levelDisplayOffset}" height="{imageSize + levelDisplayOffset}">
      <s:BitmapImage 
         source="{_modelName == null
          ? null
          : IMG.getImage(AssetNames.getTechnologyImageName(modelObj.configName))}"
          width="{imageSize}" height="{imageSize}" top="0" left="0" id="techImg"
          filters="{modelObj.upgradePart.level == modelObj.maxLevel?[]:
          (modelObj.upgradePart.upgradeEndsAt != null?[]:(
          (!modelObj.isValid || (ML.player.warPoints &lt;
          Technology.getWarPoints(modelObj.type, modelObj.level+1))
          )?Filters.GREY_FILTER:(!canBeUpgraded?Filters.RED_FILTER:[])))}"/>
      
      <s:BitmapImage source="{IMG.getImage(AssetNames.UI_IMAGES_FOLDER+'technology_tree/clock')}"
                     top="0" left="0" visible="{modelObj.pauseRemainder > 0}"/>
      
      <objects:LevelDisplay currentLevel="{modelObj.upgradePart.level}" maxLevel="{modelObj.maxLevel}" 
                             right="0" bottom="0"/>
      <s:BitmapImage visible="{hasGroupElements}"
                     source="{IMG.getImage(AssetNames.UI_IMAGES_FOLDER +
                  'technology_tree/open_context')}" left="-7" top="{imageSize - 15}"/>
   </s:Group>
   
</base:BaseContainer>
