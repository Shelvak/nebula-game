<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:base="components.base.*"
                    width="100%" height="100%"
                    creationComplete="techSidebar_creationCompleteHandler(event)">
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import controllers.navigation.MCSidebar;
         import controllers.screens.SidebarScreens;
         
         import globalevents.GlobalEvent;
         
         import models.events.ScreensSwitchEvent;
         import models.parts.events.UpgradeEvent;
         import models.player.PlayerOptions;
         import models.resource.ResourceType;
         import models.technology.Technology;

         import mx.collections.ArrayCollection;
         import mx.collections.Sort;

         import mx.events.FlexEvent;
         
         import utils.locale.Localizer;		
         
         [Bindable]
         private var hasActive: Boolean = false;
         
         private function reset(e: GlobalEvent): void
         {
            for each (var oldTech: ResearchElement in researchContainer)
            {
               if (oldTech.researchModel && oldTech.researchModel.upgradePart)
               {
                  oldTech.researchModel.upgradePart.removeEventListener(UpgradeEvent.UPGRADE_FINISHED, handleUpgradeComplete);
               }
            }
            researchContainer.removeAllElements();
         }
         
         private var SD: MCSidebar = MCSidebar.getInstance();
         
         protected function techSidebar_creationCompleteHandler(event:FlexEvent):void
         {
            SD.addEventListener(ScreensSwitchEvent.SCREEN_CHANGED, prepareList);
            EventBroker.subscribe(GlobalEvent.APP_RESET, reset);
            techsResearching.disableAutoUpdate();
            prepareList();
         }

         private function sortByTime(): void
         {
            researchContainer.removeAllElements();
            techsResearching.sort = new Sort();
            techsResearching.sort.compareFunction = techsCompareFunctionTime;
            techsResearching.refresh();
            for each (var activeTech: Technology in techsResearching)
            {
               var temp: ResearchElement = new ResearchElement();
               temp.researchModel = activeTech;
               temp.width = 210;
               researchContainer.addElement(temp);
            }
         }

         private function sortByScientists(): void
         {
            researchContainer.removeAllElements();
            techsResearching.sort = new Sort();
            techsResearching.sort.compareFunction = techsCompareFunctionScientists;
            techsResearching.refresh();
            for each (var activeTech: Technology in techsResearching)
            {
               var temp: ResearchElement = new ResearchElement();
               temp.researchModel = activeTech;
               temp.width = 210;
               researchContainer.addElement(temp);
            }
         }

         private function techsCompareFunctionTime(a: Technology,  b: Technology,  fields: Array = null): int
         {
            var aTime: int = a.scientists == 0
                    ? a.getNewTimeToFinish(a.minScientists)
                    : a.getNewTimeToFinish(a.scientists);
            var bTime: int = b.scientists == 0
                    ? b.getNewTimeToFinish(b.minScientists)
                    : b.getNewTimeToFinish(b.scientists);
            return aTime < bTime ? 1 : (aTime > bTime ? -1 : 0);
         }

         private function techsCompareFunctionScientists(a: Technology,  b: Technology,  fields: Array = null): int
         {
            var aScientists: int = a.scientists == 0
                    ? a.minScientists
                    : a.scientists;
            var bScientists: int = b.scientists == 0
                    ? b.minScientists
                    : b.scientists;
            return aScientists < bScientists ? 1 : (aScientists > bScientists ? -1 : 0);
         }

         private var techsResearching: ArrayCollection = new ArrayCollection();
         
         private function refreshResearchElements(): void
         {
            for each (var oldTech: Technology in techsResearching)
            {
               if (oldTech && oldTech.upgradePart)
               {
                  oldTech.upgradePart.removeEventListener(UpgradeEvent.UPGRADE_FINISHED, handleUpgradeComplete);
               }
            }
            researchContainer.removeAllElements();
            techsResearching.removeAll();
            hasActive = false;
            for each(var element: Technology in ML.technologies.technologies)
            {
               if ((!element.upgradePart.upgradeCompleted) || (element.pauseRemainder > 0))
               {
                  techsResearching.addItem(element);
                  element.upgradePart.addEventListener(UpgradeEvent.UPGRADE_FINISHED, handleUpgradeComplete);
                  hasActive = true;
               }
            }
            if (PlayerOptions.technologiesSortType == PlayerOptions.TECH_SORT_TYPE_SCIENTISTS)
            {
               sortByScientists();
            }
            else
            {
               sortByTime();
            }
         }
         
         public function prepareList(e: ScreensSwitchEvent = null): void
         {
            if (!e || SD.currentName == SidebarScreens.TECH_TREE_BASE)
            {
               refreshResearchElements();
            }
         }
         
         private function handleUpgradeComplete(e: UpgradeEvent): void
         {
            refreshResearchElements();
         }
         
      ]]>
   </fx:Script>
   <base:AdvancedContainer top="0" left="0" bottom="0" right="0">
      
      <base:Panel title="{Localizer.string ('Technologies', 'scientistsAvailable')}">
         <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" 
                             toolTip="{Localizer.string('Resources', ResourceType.SCIENTISTS)}"
                             textToDisplay="{ML.player.scientists.toString() + ' / ' + 
                             ML.player.scientistsTotal.toString()}"/>
         <s:Label width="90%" horizontalCenter="0" text="{Localizer.string ('Technologies', 'buildCenters')}"/>
         <base:layout>
            <s:VerticalLayout paddingLeft="6" gap="12"/>
         </base:layout>
      </base:Panel>
      
      <base:Panel id="researchPanel" visible="{hasActive}" height="100%"
                  title="{Localizer.string ('Technologies', 'currentlyResearching')}">
         <base:Scroller top="0" bottom="0" left="0" right="0"
                        horizontalScrollPolicy="off">
            <base:AdvancedContainer id="researchContainer" left="0" right="0">
               <base:layout>
                  <s:VerticalLayout paddingTop="6" gap="15"/>
               </base:layout>
            </base:AdvancedContainer>
         </base:Scroller>
      </base:Panel>
      
      <base:layout>
         <s:VerticalLayout horizontalAlign="justify"/>
      </base:layout>
      
   </base:AdvancedContainer>
   
</base:BaseContainer>
