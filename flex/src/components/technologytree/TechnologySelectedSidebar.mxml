<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:technology="components.technologytree.*"
                    creationComplete="techSidebar_creationCompleteHandler(event)">
   
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.skins.PauseButtonSkin;
         
         import config.Config;
         
         import controllers.screens.MainAreaScreens;
         import controllers.screens.MainAreaScreensSwitch;
         import controllers.screens.SidebarScreens;
         import controllers.screens.SidebarScreensSwitch;
         import controllers.technologies.TechnologiesCommand;
         import controllers.ui.NavigationController;
         
         import globalevents.GResourcesEvent;
         import globalevents.GTechnologiesEvent;
         
         import models.parts.Upgradable;
         import models.parts.events.UpgradeEvent;
         import models.resource.Resource;
         import models.resource.ResourceType;
         import models.resource.ResourcesAmount;
         import models.solarsystem.MSSObject;
         import models.technology.Technology;
         import models.technology.events.TechnologyEvent;
         
         import mx.events.FlexEvent;
         
         import utils.DateUtil;
         import utils.Localizer;
         import utils.ObjectStringsResolver;
         import utils.assets.AssetNames;
         
         [Bindable]
         private var _selectedModel: Technology;
         
         public function set selectedModel(value: Technology): void
         {
            if (_selectedModel != value)
            {
               if (_selectedModel != null)
               {
                  _selectedModel.upgradePart.removeEventListener(UpgradeEvent.LVL_CHANGE, 
                     refreshPriceOrientatedProperties);
                  _selectedModel.removeEventListener(TechnologyEvent.SELECTED_CHANGE, 
                     refreshPriceOrientatedProperties);
                  _selectedModel.upgradePart.removeEventListener(
                     UpgradeEvent.UPGRADE_PROGRESS,
                     model_upgradeProgressHandler
                  );
                  _selectedModel.upgradePart.removeEventListener(
                     UpgradeEvent.UPGRADE_STOPED,
                     model_upgradeProgressHandler
                  );
               }
               _selectedModel = value;
               if (_selectedModel != null)
               {
                  _selectedModel.upgradePart.addEventListener(UpgradeEvent.LVL_CHANGE,
                     refreshPriceOrientatedProperties);
                  _selectedModel.addEventListener(TechnologyEvent.SELECTED_CHANGE, 
                     refreshPriceOrientatedProperties);
                  _selectedModel.upgradePart.addEventListener(
                     UpgradeEvent.UPGRADE_PROGRESS,
                     model_upgradeProgressHandler
                  );
                  _selectedModel.upgradePart.addEventListener(
                     UpgradeEvent.UPGRADE_STOPED,
                     model_upgradeProgressHandler
                  );
                  
               }
            }
            refreshPriceOrientatedProperties();
         }
         
         [Bindable]
         private var metalCost: Number;
         
         [Bindable]
         private var energyCost: Number;
         
         [Bindable]
         private var zetiumCost: Number;
         
         [Bindable]
         private var timeCost: String;
         
         [Bindable]
         private var canBeUpgraded: Boolean = false;
         
         [Bindable]
         private var upgradePending: Boolean = false;
         
         /**
          * how many seconds are left to fulfill resources needs for technology
          **/
         [Bindable]
         private var resLeft: int = 0;
         
         [Bindable]
         private var enoughStorage: Boolean = true;
         
         private var missingStorages: Array = [];
         [Bindable]
         private var missingStorageString: String = '';
         
         private function calculateResLeft(): void
         {
            missingStorages = [];
            var planet:MSSObject = ML.latestPlanet.ssObject;
            if (metalCost  > planet.metal.maxStock)
            {
               missingStorages.push(ResourceType.METAL);
            }
            if (energyCost  > planet.energy.maxStock)
            {
               missingStorages.push(ResourceType.ENERGY);
            }
            if (zetiumCost  > planet.zetium.maxStock)
            {
               missingStorages.push(ResourceType.ZETIUM);
            }
            var tempStorageString: String = '';
            var i: int = 0;
            for each (var res: String in missingStorages)
            {
               if (i > 0)
               {
                  if (i == missingStorages.length - 1)
                  {
                     tempStorageString += ' '+Localizer.string('Resources', 'and')+' ';
                  }
                  else
                  {
                     tempStorageString += ', ';
                  }
               }
               i++;
               tempStorageString += Localizer.string('Resources', res);
            }
            if (missingStorageString != tempStorageString)
            {
               missingStorageString = tempStorageString;
            }
            enoughStorage = (missingStorages.length > 0?false:true);
            resLeft = Resource.getTimeToReachResources
               (planet.metal, planet.energy, planet.zetium, metalCost, energyCost, zetiumCost);
         }
         
         public function refreshUpgradeState(e: Event = null): void
         {
            var planet:MSSObject = ML.latestPlanet.ssObject;
            if (_selectedModel != null)
            {
               canBeUpgraded = !((metalCost > planet.metal.currentStock) ||
                                 (energyCost > planet.energy.currentStock) ||
                                 (zetiumCost > planet.zetium.currentStock));
               
               calculateResLeft();
            }
            else
               resLeft = 0;
         }
         
         protected function recalculateCosts(): void
         {
            var upgradable:Upgradable = _selectedModel.upgradePart;
            var speedBoostCost:Number = speedUpBoost.selected  ?Config.getTechnologiesSpeedUpCost() : 1;
            var resources:ResourcesAmount = upgradable.resourcesNeededForNextLevel();
            metalCost  = resources.metal  * speedBoostCost;
            energyCost = resources.energy * speedBoostCost;
            zetiumCost = resources.zetium * speedBoostCost;
            var timeSeconds:int = _selectedModel.upgradePart.calcUpgradeTime(
               {'level': _selectedModel.upgradePart.level + 1,
                'scientists': scientistsSelector.value,
                'speedUp': speedUpBoost.selected});
            timeSeconds = timeSeconds > 1 ? timeSeconds : 1;
            timeCost = getStringFromSeconds(timeSeconds);
         }
         
         private function refreshPriceOrientatedProperties(e: Event = null): void
         {
            pausePending = false;
            recalculateCosts();
            refreshUpgradeState();
            pauseButton.selected = _selectedModel.pauseRemainder != 0;
         }
         
         private function removePending(e: GTechnologiesEvent): void
         {
            upgradePending = false;
            EventBroker.unsubscribe(GTechnologiesEvent.UPGRADE_APPROVED, removePending);
         }
         
         protected function upgradeButton_clickHandler(event:MouseEvent):void
         {
            upgradePending = true;
            pausePending = false;
            EventBroker.subscribe(GTechnologiesEvent.UPGRADE_APPROVED, removePending);
            if (_selectedModel.upgradePart.level == 0)
            {
               new TechnologiesCommand(
                  TechnologiesCommand.NEW,
                  {type: _selectedModel.type,
                     planet_id: ML.latestPlanet.id,
                     scientists: scientistsSelector.value,
                     speed_up: speedUpBoost.selected}
               ).dispatch ();
            }
            else
            {
               new TechnologiesCommand(
                  TechnologiesCommand.UPGRADE,
                  {id: _selectedModel.id,
                     planet_id: ML.latestPlanet.id,
                     scientists: scientistsSelector.value,
                     speed_up: speedUpBoost.selected}
               ).dispatch ();
            }
         }
         
         
         protected function deselect_clickHandler(event:MouseEvent):void
         {
            if (MainAreaScreensSwitch.getInstance().currentScreenName == MainAreaScreens.INFO)
               MainAreaScreensSwitch.getInstance().showPrevious();
            SidebarScreensSwitch.getInstance().replaceCurrentWith(SidebarScreens.TECH_TREE_BASE);
         }
         
         
         protected function details_clickHandler(event:MouseEvent):void
         {
            ML.infoModel = _selectedModel;
            NavigationController.getInstance().showInfo();
         }
         
         
         protected function speedUpBoost_changeHandler(event:Event):void
         {
            refreshPriceOrientatedProperties();
         }
         
         override protected function updateDisplayList(uw:Number, uh:Number) : void
         {
            super.updateDisplayList(uw, uh);
            if (!_selectedModel)
            {
               return;
            }
            
            if (_selectedModel.pauseRemainder != 0 || _selectedModel.upgradePart.upgradeEndsAt != null)
            {
               techProgressBar.setProgress(_selectedModel.upgradePart.upgradeProgress, 1);
            }
         }
         
         
         private function model_upgradeProgressHandler(e:UpgradeEvent) : void
         {
            invalidateDisplayList();
         }
         
         [Bindable]
         private var pausePending: Boolean = false;
         
         protected function removePausePending(e: Event): void
         {
            pausePending = false;
            EventBroker.unsubscribe(GTechnologiesEvent.PAUSE_APPROVED, removePausePending);
         }
         
         protected function pause_clickHandler(event:MouseEvent):void
         {
            pausePending = true;
            EventBroker.subscribe(GTechnologiesEvent.PAUSE_APPROVED, removePausePending);
            if (pauseButton.selected)
            {
               scientistsSelector.value = _selectedModel.scientists;
               new TechnologiesCommand(
                  TechnologiesCommand.PAUSE,
                  {id: _selectedModel.id}
               ).dispatch ();
            }
            else
            {
               new TechnologiesCommand(
                  TechnologiesCommand.RESUME,
                  {id: _selectedModel.id,
                     scientists: scientistsSelector.value}
               ).dispatch ();
            }
         }
         
         
         protected function techSidebar_creationCompleteHandler(event:FlexEvent):void
         {
            EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshUpgradeState);
         }
         
         
         protected function scientistsSelector_changeHandler(event:Event):void
         {
            refreshPriceOrientatedProperties();
         }
         
         [Bindable]
         private var updatePending: Boolean = false;
         
         private function removeUpdatePending(e: Event = null): void
         {
            updatePending = false;
         }
         
         protected function button1_clickHandler(event:MouseEvent):void
         {
            updatePending = true;
            EventBroker.subscribe(GTechnologiesEvent.UPDATE_APPROVED, removeUpdatePending);
            new TechnologiesCommand(
               TechnologiesCommand.UPDATE,
               {id: _selectedModel.id,
                  scientists: scientistsSelector.value}
            ).dispatch ();
         }
         
         private function getStringFromSeconds(seconds: int): String
         {
            return DateUtil.secondsToHumanString(seconds);
         }
         
      ]]>
   </fx:Script>
   
   
   
   <s:Group width="100%" height="100%">
      <base:Scroller id="scrollCont" top="0" bottom="0" width="100%" 
                     height="100%" right="0" horizontalScrollPolicy="off" 
                     stepMultiplier="10">
         <s:Group left="0" height="100%" right="{scrollCont.verticalScrollBar.width}">
            <s:Group id="contentGroup" height="100%" width="100%">   
               <base:AdvancedContainer width="100%">
                  <base:Panel width="100%"
                              title="{Localizer.string ('Technologies', _selectedModel.type + '.name')}">
                     
                     <s:Group width="100%">
                        <mx:Image id="techImage" maintainAspectRatio="true" resizeEffect="scale"
                                  width="100%" height="150" horizontalAlign="center" 
                                  source="{IMG.getBitmapAsset(AssetNames.getTechnologyImageName(_selectedModel.type))}"/>
                        <s:Button skinClass="components.skins.DeselectButtonSkin" click="deselect_clickHandler(event)" 
                                  right="3" top="3"/>
                     </s:Group>
                     
                     <base:AdvancedContainer width="100%" horizontalCenter="0">
                        <s:Group width="100%"> 
                           <s:Label left="3" right="3" x="20" text="{Localizer.string('Technologies',_selectedModel.type + '.about')}"/>	
                        </s:Group>
                        <s:Group width="100%"> 
                           <s:Label left="3" right="3" text="{_selectedModel.requirementsText}"/>	
                        </s:Group>
                        <s:Group width="100%">
                           <s:Button label="{Localizer.string('Technologies','details')}" right="6" click="details_clickHandler(event)"/>
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingRight="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                     <base:layout>
                        <s:VerticalLayout/>
                     </base:layout>
                  </base:Panel>
               </base:AdvancedContainer>
               
               <base:AdvancedContainer width="100%">
                  <base:Panel title="{Localizer.string ('Technologies', 'scientistsPanelTitle')}" width="100%" 
                              visible="{!(!(_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel ) ||
                              !(_selectedModel.minScientists &lt; (ML.player.scientists + _selectedModel.scientists)))}">
                     
                     <base:AdvancedContainer width="100%">
                        <s:Group width="100%" visible="{_selectedModel.scientists != 0}">
                           
                           <s:Label text="{Localizer.string('Technologies','scientistsAssigned')}"/>
                           <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" textToDisplay="{_selectedModel.pauseRemainder == 0?
                                               _selectedModel.scientists : _selectedModel.pauseScientists}" />
                           <s:layout>
                              <s:VerticalLayout gap="3"/>
                           </s:layout>
                           
                        </s:Group>
                        
                        <s:Label text="{Localizer.string('Technologies', 'scientistsSelected') + ': ' +
                                 scientistsSelector.value.toString()}"/>
                        <s:Group width="100%">
                           <s:Label text="{_selectedModel.minScientists}" styleName="h3"/>
                           <s:HSlider id="scientistsSelector" width="80%" showDataTip="false" 
                                      change="scientistsSelector_changeHandler(event)"
                                      mouseFocusEnabled="false"
                                      value="{_selectedModel.minScientists &lt; _selectedModel.scientists?
                                      _selectedModel.scientists:_selectedModel.minScientists}" 
                                      enabled="{(_selectedModel.minScientists &lt; (ML.player.scientists + _selectedModel.scientists))}"
                                      minimum="{_selectedModel.minScientists}" 
                                      maximum="{(ML.player.scientists + _selectedModel.scientists)}"/> 
                           
                           <s:Label text="{(ML.player.scientists + _selectedModel.scientists).toString()}" styleName="h3"/>
                           <s:layout>
                              <s:HorizontalLayout/>
                           </s:layout>
                        </s:Group>
                        <s:Group width="100%" visible="{!((_selectedModel.scientists == scientistsSelector.value) || 
                                 (_selectedModel.upgradePart.upgradeEndsAt == null))}">
                           <s:Button label="{Localizer.string('Technologies','update')}" click="button1_clickHandler(event)" 
                                     right="6" enabled="{!updatePending}"/>
                           
                        </s:Group> 
                        <s:Label text="{Localizer.string('Technologies','finishedIn', 
                                 [_selectedModel.getNewTimeToFinishString(scientistsSelector.value)])}"/>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingRight="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
               </base:AdvancedContainer>
               
               <base:AdvancedContainer width="100%">
                  <base:Panel title="{Localizer.string ('Technologies', 'upgradeProgress')}" width="100%" 
                              visible="{(_selectedModel.upgradePart.upgradeEndsAt != null) || 
                              (_selectedModel.pauseRemainder != 0)}">
                     <s:Group left="6" right="6">
                        <mx:ProgressBar id="techProgressBar" width="80%" left="0" labelPlacement="center" mode="manual"
                                        label="{_selectedModel.scientists == 0?
                                        Localizer.string('Technologies','paused'):
                                        Localizer.string('Technologies','finishedIn', [
                                        _selectedModel.upgradePart.timeToFinishString])}"/> 
                        <s:ToggleButton id="pauseButton" skinClass="components.skins.PauseButtonSkin" right="0" 
                                        click="pause_clickHandler(event)"
                                        enabled="{!(!_selectedModel.isValid || 
                                        !(canBeUpgraded || _selectedModel.upgradePart.upgradeEndsAt != null)
                                        ||
                                        (!((_selectedModel.upgradePart.timeToFinish &gt; 10) || 
                                        (_selectedModel.upgradePart.timeToFinish == 0))) || pausePending)}" />
                     </s:Group>
                  </base:Panel>
               </base:AdvancedContainer>
               
               <base:AdvancedContainer width="100%">
                  <base:Panel title="{Localizer.string('Technologies', 
                              'upgradeCost')}" width="100%" horizontalCenter="0" 
                                               visible="{!(!(_selectedModel.upgradePart.upgradeEndsAt == null) || 
                                               !(_selectedModel.pauseRemainder == 0) || 
                                               !(_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel ))}">
                     <base:AdvancedContainer width="100%" height="100%">
                        
                        <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" textToDisplay="{_selectedModel.minScientists}"
                                            visible="{_selectedModel.minScientists == ML.player.scientists}"/>
                        <s:CheckBox id="speedUpBoost" label="{Localizer.string('Technologies','forceOvertime')}" 
                                    change="speedUpBoost_changeHandler(event)"/>
                        <s:Group width="100%">
                           <s:Group width="40%">
                              <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{metalCost.toFixed(2)}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.METAL)}"
                                                  labelStyleName="{metalCost > ML.latestPlanet.ssObject.metal.currentStock? 'unsatisfied':null}"/>
                              <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{zetiumCost.toFixed(2)}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"
                                                  labelStyleName="{zetiumCost > ML.latestPlanet.ssObject.zetium.currentStock? 'unsatisfied':null}"/>
                              <s:layout>
                                 <s:VerticalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                              </s:layout>
                           </s:Group>
                           <s:Group width="40%">
                              <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{energyCost.toFixed(2)}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"
                                                  labelStyleName="{energyCost > ML.latestPlanet.ssObject.energy.currentStock? 'unsatisfied':null}"/>
                              <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{timeCost}"
                                                  toolTip="{Localizer.string('Resources', ResourceType.TIME)}"/> 
                              <s:layout>
                                 <s:VerticalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                              </s:layout>
                           </s:Group>
                           <s:layout>
                              <s:HorizontalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                           </s:layout> 
                        </s:Group>
                        <s:Label text="{Localizer.string('Technologies','technologiesNeeded')}" styleName="unsatisfied" 
                                 visible="{!(_selectedModel.isValid || ML.player.scientistsTotal == 0)}" width="100%"/>
                        <s:Label text="{Localizer.string('Technologies','notEnoughScientists', 
                                 [_selectedModel.minScientists, ObjectStringsResolver.getString(
                                 'Scientist', _selectedModel.minScientists), ML.player.scientists, 
                                 ObjectStringsResolver.getString('Scientist', ML.player.scientists),
                                 ML.player.scientistsTotal])}" id="notEnoughSciLbl" 
                                 visible="{!(!(_selectedModel.minScientists > ML.player.scientists) || 
                                 (upgradePending) || (!_selectedModel.isValid))}" 
                                 styleName="unsatisfied" width="100%"/>
                        <s:Label text="{Localizer.string('Technologies','buildCenters')}" 
                                 visible="{!(!(_selectedModel.minScientists > ML.player.scientists) || 
                                 (upgradePending) || (!_selectedModel.isValid))}" 
                                 styleName="unsatisfied" width="100%"/>
                        <base:AdvancedContainer width="100%"
                           visible="{!(notEnoughSciLbl.visible || (!_selectedModel.isValid) || 
                           canBeUpgraded || (ML.player.scientistsTotal == 0))}">
                           
                           <s:Label text="{Localizer.string('Resources','notEnoughResources')}"
                                    styleName="unsatisfied" width="100%"/>
                           <s:Label text="{Localizer.string('Resources','enoughResourcesIn', [getStringFromSeconds(resLeft)])}"
                                    visible="{resLeft > 0}" width="100%"/>
                           <!--s:Label text="{Localizer.string('Resources','insufficientRate')}" visible="{resLeft == -1}"
                                    styleName="unsatisfied" width="100%"/-->
                           <s:Label text="{Localizer.string('Resources','additionalStorage', [missingStorageString])}" 
                                    visible="{!enoughStorage}"
                                    styleName="unsatisfied" width="100%"/>
                           <base:layout>
                              <s:VerticalLayout/>
                           </base:layout>
                        </base:AdvancedContainer>
                        <s:Group width="100%">
                           <s:Button enabled="{!(!_selectedModel.isValid || !canBeUpgraded || 
                                     (_selectedModel.minScientists > ML.player.scientists) || upgradePending)}" 
                                     label="{Localizer.string('Technologies','upgrade')}" 
                                     click="upgradeButton_clickHandler(event)" right="6"/>	
                        </s:Group>
                        <base:layout>
                           <s:VerticalLayout paddingLeft="6" paddingRight="6"/>
                        </base:layout>
                     </base:AdvancedContainer>
                  </base:Panel>
               </base:AdvancedContainer>
               
               <s:layout>
                  <s:VerticalLayout/>
               </s:layout>
            </s:Group>
         </s:Group>
      </base:Scroller>      
      
   </s:Group>
   <base:layout>
      <s:VerticalLayout/>
   </base:layout>
</base:BaseContainer>
