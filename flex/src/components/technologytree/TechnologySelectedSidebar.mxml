<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:technology="components.technologytree.*"
                    creationComplete="techSidebar_creationCompleteHandler(event)" 
                    xmlns:components="utils.components.*"
                    width="100%" height="100%">
   
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.credits.AccelerateSelector;
      import components.credits.ConfirmCredsLabel;
      import components.popups.ActionConfirmationPopUp;
      import components.popups.WaitingCredsPopUp;
      import components.skins.GreenButtonSkin;
      import components.skins.PauseButtonSkin;

      import config.Config;

      import utils.ApplicationLocker;

      import controllers.navigation.MCMainArea;
      import controllers.navigation.MCSidebar;
      import controllers.objects.ObjectClass;
      import controllers.screens.MainAreaScreens;
      import controllers.screens.SidebarScreens;
      import controllers.technologies.TechnologiesCommand;
      import controllers.ui.NavigationController;

      import flash.utils.getTimer;

      import flashx.textLayout.elements.TextFlow;

      import globalevents.GResourcesEvent;
      import globalevents.GTechnologiesEvent;

      import models.factories.BuildingFactory;
      import models.parts.Upgradable;
      import models.parts.events.UpgradeEvent;
      import models.resource.Resource;
      import models.resource.ResourceType;
      import models.resource.ResourcesAmount;
      import models.solarsystem.MSSObject;
      import models.technology.MCTechnologySelectedSidebar;
      import models.technology.Technology;
      import models.technology.events.TechnologyEvent;
      import models.technology.events.TechnologySidebarEvent;
      import models.unit.Unit;

      import mx.events.FlexEvent;

      import utils.TextFlowUtil;

      import utils.DateUtil;
      import utils.ModelUtil;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;


      [Bindable]
      private var _selectedModel: Technology;

      private function refreshSelected(e: TechnologySidebarEvent = null): void {
         if (_selectedModel != tScreen.selectedTechnology) {
            if (_selectedModel != null) {
               if (_selectedModel.upgradePart != null) {
                  _selectedModel.upgradePart.removeEventListener(UpgradeEvent.LEVEL_CHANGE,
                                                                 refreshPriceOrientatedProperties);
                  _selectedModel.upgradePart.removeEventListener(
                     UpgradeEvent.UPGRADE_PROGRESS,
                     model_upgradeProgressHandler
                  );
                  _selectedModel.upgradePart.removeEventListener(
                     UpgradeEvent.UPGRADE_STOPPED,
                     model_upgradeProgressHandler
                  );
               }
               _selectedModel.removeEventListener(TechnologyEvent.SELECTED_CHANGE,
                                                  refreshPriceOrientatedProperties);
            }
            _selectedModel = tScreen.selectedTechnology;
            if (_selectedModel != null) {
               if (ML.player.scientists + _selectedModel.scientists >
                      _selectedModel.minScientists) {
                  scientistsSelector.value = Math.max(_selectedModel.scientists,
                                                      _selectedModel.minScientists);
               }
               if (_selectedModel.upgradePart != null) {
                  _selectedModel.upgradePart.addEventListener(UpgradeEvent.LEVEL_CHANGE,
                                                              refreshPriceOrientatedProperties);
                  _selectedModel.upgradePart.addEventListener(
                     UpgradeEvent.UPGRADE_PROGRESS,
                     model_upgradeProgressHandler
                  );
                  _selectedModel.upgradePart.addEventListener(
                     UpgradeEvent.UPGRADE_STOPPED,
                     model_upgradeProgressHandler
                  );
               }
               _selectedModel.addEventListener(TechnologyEvent.SELECTED_CHANGE,
                                               refreshPriceOrientatedProperties);

            }
         }
         if (_selectedModel) {
            refreshPriceOrientatedProperties();
            pauseButton.selected = _selectedModel.pauseRemainder != 0;
         }
      }

      [Bindable]
      private var metalCost: int;

      [Bindable]
      private var energyCost: int;

      [Bindable]
      private var zetiumCost: int;

      [Bindable]
      private var timeCost: String;

      [Bindable]
      private var canBeUpgraded: Boolean = false;

      /**
       * how many seconds are left to fulfill resources needs for technology
       **/
      [Bindable]
      private var resLeft: int = 0;

      [Bindable]
      private var enoughStorage: Boolean = true;

      private var missingStorages: Array = [];
      [Bindable]
      private var missingStorageString: String = '';

      private function calculateResLeft(): void {
         var planet: MSSObject = ML.latestPlanet.ssObject;
         missingStorageString = Resource.getMissingStoragesString(planet,
                                                                  metalCost,
                                                                  energyCost,
                                                                  zetiumCost);
         enoughStorage = (missingStorageString == '' ? true : false);
         resLeft = Resource.getTimeToReachResources
                      (planet.metal, planet.energy, planet.zetium,
                       metalCost, energyCost, zetiumCost);
      }

      public function refreshUpgradeState(e: Event = null): void {
         if (ML.latestPlanet != null) {
            var planet: MSSObject = ML.latestPlanet.ssObject;
            if (_selectedModel != null) {
               canBeUpgraded = !((metalCost > planet.metal.currentStock) ||
                                    (energyCost > planet.energy.currentStock) ||
                                    (zetiumCost > planet.zetium.currentStock));

               calculateResLeft();
            }
            else
               resLeft = 0;
         }
      }

      protected function recalculateCosts(): void {
         if (_selectedModel) {
            var upgradable: Upgradable = _selectedModel.upgradePart;
            var speedBoostCost: Number = speedUpBoost.selected
                                            ? Config.getTechnologiesSpeedUpCost()
                                            : 1;
            var resources: ResourcesAmount = upgradable.resourcesNeededForNextLevel();
            metalCost = resources.metal * speedBoostCost;
            energyCost = resources.energy * speedBoostCost;
            zetiumCost = resources.zetium * speedBoostCost;
            var timeSeconds: int = _selectedModel.upgradePart.calcUpgradeTime(
               {'level':        _selectedModel.upgradePart.level + 1,
                  'scientists': scientistsSelector.value,
                  'speedUp':    speedUpBoost.selected});
            timeSeconds = timeSeconds > 1 ? timeSeconds : 1;
            timeCost = getStringFromSeconds(timeSeconds, 3);
         }
      }

      private function refreshPriceOrientatedProperties(e: Event = null): void {
         if (e is UpgradeEvent) {
            scientistsSelector.value = scientistsSelector.minimum;
         }
         recalculateCosts();
         refreshUpgradeState();
      }

      private function getTextFlow(value: String): TextFlow {
         return TextFlowUtil.importFromString(value);
      }

      protected function unlearn(event: MouseEvent): void {
         var confirmPopUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         var confirmLabel: ConfirmCredsLabel = new ConfirmCredsLabel();
         confirmLabel.popUp = confirmPopUp;
         var destCreds: int = Config.getTechnologyUnlearnCost();
         confirmLabel.credsRequired = destCreds;
         confirmLabel.textFlow = getTextFlow(
            Localizer.string('Credits', 'label.unlearnPrice', [destCreds]));
         confirmLabel.refreshPopup();
         confirmPopUp.addElement(confirmLabel);
         confirmPopUp.confirmButtonClickHandler = function (button: Button = null): void {
            function doDestruct(): void {
               new TechnologiesCommand(TechnologiesCommand.UNLEARN,
                                       {'id': _selectedModel.id}).dispatch();
            }

            if (confirmLabel.hasEnoughCredits()) {
               doDestruct();
            }
            else {
               WaitingCredsPopUp.showPopUp(destCreds, doDestruct);
            }
         };
         confirmPopUp.show();
      }

      protected function upgradeButton_clickHandler(event: MouseEvent): void {
         if (_selectedModel.upgradePart.level == 0) {
            new TechnologiesCommand(
               TechnologiesCommand.NEW,
               {type:         _selectedModel.type,
                  planet_id:  ML.latestPlanet.id,
                  scientists: scientistsSelector.value,
                  speed_up:   speedUpBoost.selected}
            ).dispatch();
         }
         else {
            new TechnologiesCommand(
               TechnologiesCommand.UPGRADE,
               {id:           _selectedModel.id,
                  planet_id:  ML.latestPlanet.id,
                  scientists: scientistsSelector.value,
                  speed_up:   speedUpBoost.selected}
            ).dispatch();
         }
      }

      protected function deselect_clickHandler(event: MouseEvent): void {
         var MA: MCMainArea = MCMainArea.getInstance();
         if (MA.currentName == MainAreaScreens.INFO)
            MA.showPrevious();
         MCSidebar.getInstance().replaceCurrentWith(SidebarScreens.TECH_TREE_BASE);
      }


      protected function details_clickHandler(event: MouseEvent): void {
         NavigationController.getInstance().showInfo(_selectedModel);
      }


      protected function unlocks_clickHandler(event: MouseEvent): void {
         var temp: *;
         if (ModelUtil.getModelClass(Config.unlockHash[_selectedModel.type]) == ObjectClass.BUILDING) {
            temp = BuildingFactory.createDefault(
               ModelUtil.getModelSubclass(Config.unlockHash[_selectedModel.type]));
         }
         else {
            temp = new Unit();
            temp.type = ModelUtil.getModelSubclass(Config.unlockHash[_selectedModel.type]);
            temp.upgradePart.level = 0;
         }
         NavigationController.getInstance().showInfo(temp);
      }


      protected function speedUpBoost_changeHandler(event: Event): void {
         refreshPriceOrientatedProperties();
      }

      override protected function updateDisplayList(uw: Number,
                                                    uh: Number): void {
         super.updateDisplayList(uw, uh);
         if (!_selectedModel || !_selectedModel.upgradePart) {
            return;
         }

         if (_selectedModel.pauseRemainder != 0 || _selectedModel.upgradePart.upgradeEndsAt != null) {
            techProgressBar.setProgress(_selectedModel.upgradePart.upgradeProgress,
                                        1);
         }
      }


      private function model_upgradeProgressHandler(e: UpgradeEvent): void {
         invalidateDisplayList();
      }

      protected function pause_clickHandler(event: MouseEvent): void {
         if (pauseButton.selected) {
            scientistsSelector.value = _selectedModel.scientists;
            new TechnologiesCommand(
               TechnologiesCommand.PAUSE,
               {id: _selectedModel.id}
            ).dispatch();
         }
         else {
            new TechnologiesCommand(
               TechnologiesCommand.RESUME,
               {id:           _selectedModel.id,
                  scientists: scientistsSelector.value}
            ).dispatch();
         }
      }

      private var tScreen: MCTechnologySelectedSidebar =
                     MCTechnologySelectedSidebar.getInstance();

      protected function techSidebar_creationCompleteHandler(event: FlexEvent): void {
         tScreen.addEventListener(TechnologySidebarEvent.SELECTED_CHANGE,
                                  refreshSelected);
         EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE,
                               refreshUpgradeState);
         refreshPriceOrientatedProperties();
         refreshSelected();
      }


      protected function scientistsSelector_changeHandler(event: Event): void {
         refreshPriceOrientatedProperties();
      }

      protected function button1_clickHandler(event: MouseEvent): void {
         new TechnologiesCommand(
            TechnologiesCommand.UPDATE,
            {id:           _selectedModel.id,
               scientists: scientistsSelector.value}
         ).dispatch();
      }

      private function getStringFromSeconds(seconds: int,
                                            parts: int = 2): String {
         return DateUtil.secondsToHumanString(seconds, parts);
      }

      private function hasUnlockingStuff(type: String): String {
         return Config.unlockHash[type];
      }


      protected function coin_clickHandler(event: MouseEvent): void {
         var accelerator: AccelerateSelector = new AccelerateSelector();
         accelerator.upgradePart = _selectedModel.upgradePart;
         var speedPopUp: ActionConfirmationPopUp = new ActionConfirmationPopUp();
         accelerator.popUp = speedPopUp;
         speedPopUp.confirmButtonEnabled = false;
         speedPopUp.confirmButtonClickHandler = function (): void {
            function doAccelerate(): void {
               new TechnologiesCommand(TechnologiesCommand.ACCELERATE_UPGRADE,
                                       {'id':      _selectedModel.id,
                                          'index': accelerator.selectedAccelerateType}).dispatch();
            }

            if (accelerator.hasEnoughCredits()) {
               doAccelerate();
            }
            else {
               WaitingCredsPopUp.showPopUp(accelerator.selectedCost,
                                           doAccelerate);
            }
         }
         speedPopUp.addElement(accelerator);
         speedPopUp.show();
      }


      protected function pauseButton_creationCompleteHandler(event: FlexEvent): void {
         if (_selectedModel != null) {
            pauseButton.selected = _selectedModel.pauseRemainder != 0;
         }
      }
      ]]>
   </fx:Script>
   <base:Scroller id="scrollCont" top="0" bottom="0" width="100%" 
                  height="100%" right="0" horizontalScrollPolicy="off" 
                  stepMultiplier="10">
      <s:Group left="0" height="100%" right="{scrollCont.verticalScrollBar.width}">
         <s:Group id="contentGroup" height="100%" left="0" right="0">   
            <base:AdvancedContainer left="0" right="0">
               <base:Panel title="{_selectedModel.title}">
                  <s:Group>
                     <s:BitmapImage id="techImage" horizontalCenter="0"
                                    width="150" height="150" 
                                    source="{IMG.getImage(AssetNames.getTechnologyImageName(_selectedModel.configName))}"/>
                     <s:Button skinClass="components.skins.DeselectButtonSkin" click="deselect_clickHandler(event)" 
                               right="0" top="6"/>
                  </s:Group>
                  
                  <s:Group> 
                     <s:Label left="3" right="3" x="20" text="{Localizer.string('Technologies',_selectedModel.configName + '.about')}"/>
                  </s:Group>
                  <s:Group>
                     <s:Button label="{Localizer.string('Technologies','details')}" right="6" 
                               click="details_clickHandler(event)"/>
                     <s:Button label="{Localizer.string('Technologies','unlocks')}" left="6" 
                               click="unlocks_clickHandler(event)" 
                               visible="{hasUnlockingStuff(_selectedModel.type) != null}"/>
                  </s:Group>
                  <base:layout>
                     <s:VerticalLayout paddingLeft="6" paddingRight="6" horizontalAlign="justify"/>
                  </base:layout>
               </base:Panel>
               
               <base:Panel title="{Localizer.string('Technologies', 'title.requirements')}"
                           visible="{_selectedModel.requirementsText != '' &amp;&amp;
                           _selectedModel.upgradePart.level == 0}">
                  <s:Label left="6" right="6" top="6" text="{_selectedModel.requirementsText}"/>
               </base:Panel>
               
               <base:Panel title="{Localizer.string ('Technologies', 'scientistsPanelTitle')}" 
                           visible="{!((_selectedModel.upgradePart.level >= _selectedModel.maxLevel)
                           || (_selectedModel.minScientists >= (ML.player.scientists + _selectedModel.scientists))
                           || (ML.player.warPoints &lt; _selectedModel.warPoints)
                           || (!_selectedModel.isValid))}">
                  <base:AdvancedContainer left="0" right="0">
                     <s:Group width="100%" visible="{_selectedModel.scientists != 0}">
                        
                        <s:Label text="{Localizer.string('Technologies','scientistsAssigned')}"/>
                        <base:ImageAndLabel type="{ResourceType.SCIENTISTS}"
                                            textToDisplay="{_selectedModel.pauseRemainder == 0
                              ? _selectedModel.scientists.toString()
                              : _selectedModel.pauseScientists.toString()}" />
                        <s:layout>
                           <s:VerticalLayout gap="3"/>
                        </s:layout>
                        
                     </s:Group>
                     
                     <s:Label text="{Localizer.string('Technologies', 'scientistsSelected') + ': ' +
                              scientistsSelector.value.toString()}" paddingLeft="6"/>
                     <s:Group width="100%">
                        <s:Label text="{_selectedModel.minScientists}" styleName="h3"/>
                        <s:HSlider id="scientistsSelector" width="80%" showDataTip="false" 
                                   change="scientistsSelector_changeHandler(event)"
                                   mouseFocusEnabled="false"
                                   enabled="{(_selectedModel.minScientists &lt; (ML.player.scientists + _selectedModel.scientists))}"
                                   minimum="{_selectedModel.minScientists}" 
                                   maximum="{Math.min(_selectedModel.getMaxAssignableScientists(),
                                   (ML.player.scientists + _selectedModel.scientists))}"/> 
                        
                        <s:Label text="{Math.min(_selectedModel.getMaxAssignableScientists(),
                                 (ML.player.scientists + _selectedModel.scientists)).toString()}" styleName="h3"/>
                        <s:layout>
                           <s:HorizontalLayout/>
                        </s:layout>
                     </s:Group>
                     <s:Group width="100%" visible="{!((_selectedModel.scientists == scientistsSelector.value) || 
                              (_selectedModel.upgradePart.upgradeEndsAt == null))}">
                        <s:Button label="{Localizer.string('Technologies','update')}" click="button1_clickHandler(event)" 
                                  right="6"/>
                        
                     </s:Group> 
                     <s:Label text="{Localizer.string('Technologies','finishedIn', 
                              [_selectedModel.getNewTimeToFinishString(scientistsSelector.value)])}"/>
                     <base:layout>
                        <s:VerticalLayout paddingLeft="6" paddingRight="6"/>
                     </base:layout>
                  </base:AdvancedContainer>
               </base:Panel>
               
               <base:Panel title="{Localizer.string ('Technologies', 'upgradeProgress')}"
                           visible="{(_selectedModel.upgradePart.upgradeEndsAt != null) || 
                           (_selectedModel.pauseRemainder != 0)}">
                  <base:AdvancedContainer left="6" right="6">
                     <s:Label text="{Localizer.string('Technologies','notEnoughScientists', 
                              [_selectedModel.minScientists, ML.player.scientists, 
                              ML.player.scientistsTotal])}" 
                              visible="{_selectedModel.minScientists > ML.player.scientists
                              &amp;&amp; _selectedModel.pauseScientists != 0}"
                              styleName="unsatisfied"/>
                     <s:Group>
                        <mx:ProgressBar id="techProgressBar" width="80%" left="0" labelPlacement="center" mode="manual"
                                        label="{_selectedModel.scientists == 0?
                                        Localizer.string('Technologies','paused'):
                                        Localizer.string('Technologies','finishedIn', [
                                        _selectedModel.upgradePart.timeToFinishString])}"/> 
                        <s:ToggleButton id="pauseButton" skinClass="components.skins.PauseButtonSkin" right="0" 
                                        click="pause_clickHandler(event)"
                                        enabled="{
                                        (_selectedModel.upgradePart.timeToFinish > 10) || 
                                        (_selectedModel.pauseRemainder != 0 &amp;&amp; 
                                        ML.player.scientists >= _selectedModel.minScientists &amp;&amp; 
                                        _selectedModel.planetsRequired &lt;= ML.player.planetsCount &amp;&amp; 
                                        _selectedModel.pulsarsRequired &lt;= ML.player.bgPlanetsCount)}"
                                        creationComplete="pauseButton_creationCompleteHandler(event)"/>
                     </s:Group>
                     <s:Group visible="{_selectedModel.pauseRemainder == 0}">
                        <s:Button skinClass="components.skins.CreditButtonSkin" 
                                  click="coin_clickHandler(event)"
                                  label="{Localizer.string('Credits', 'label.accelerate')}"
                                  right="0"
                                  enabled="{_selectedModel.upgradePart.upgradeProgress &lt; 1}"/>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout horizontalAlign="justify"/>
                     </base:layout>
                  </base:AdvancedContainer>
               </base:Panel>
               
               <base:Panel title="{Localizer.string('Technologies', 
                           'upgradeCost')}" 
                           visible="{!(!(_selectedModel.upgradePart.upgradeEndsAt == null) || 
                           !(_selectedModel.pauseRemainder == 0) || 
                           !(_selectedModel.upgradePart.level &lt; _selectedModel.maxLevel ))}">
                  <base:AdvancedContainer left="0" right="0" height="100%">
                     <s:Group>
                        <s:layout>
                           <s:VerticalLayout paddingTop="10" paddingBottom="10" horizontalAlign="center"/>
                        </s:layout>
                        <s:CheckBox id="speedUpBoost" label="{Localizer.string('Technologies','forceOvertime')}" 
                                    change="speedUpBoost_changeHandler(event)"/>
                     </s:Group>
                     <base:ImageAndLabel type="{ResourceType.SCIENTISTS}" textToDisplay="{_selectedModel.minScientists}"
                                         visible="{_selectedModel.minScientists == ML.player.scientists}"/>
                     <s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel type="{ResourceType.METAL}" textToDisplay="{metalCost.toString()}"
                                               toolTip="{Localizer.string('Resources', ResourceType.METAL)}"
                                               labelStyleName="{metalCost > ML.latestPlanet.ssObject.metal.currentStock? 'unsatisfied':null}"/>
                           <base:ImageAndLabel type="{ResourceType.ZETIUM}" textToDisplay="{zetiumCost.toString()}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ZETIUM)}"
                                               labelStyleName="{zetiumCost > ML.latestPlanet.ssObject.zetium.currentStock? 'unsatisfied':null}"/>
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                           </s:layout>
                        </s:Group>
                        <s:Group width="40%">
                           <base:ImageAndLabel type="{ResourceType.ENERGY}" textToDisplay="{energyCost.toString()}"
                                               toolTip="{Localizer.string('Resources', ResourceType.ENERGY)}"
                                               labelStyleName="{energyCost > ML.latestPlanet.ssObject.energy.currentStock? 'unsatisfied':null}"/>
                           <base:ImageAndLabel type="{ResourceType.TIME}" textToDisplay="{timeCost}"
                                               toolTip="{Localizer.string('Resources', ResourceType.TIME)}"/> 
                           <s:layout>
                              <s:VerticalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                           </s:layout>
                        </s:Group>
                        <s:layout>
                           <s:HorizontalLayout gap="3" paddingLeft="6" paddingRight="6"/>
                        </s:layout> 
                     </s:Group>
                    <s:Label text="{Localizer.string('Technologies','groupResearched')}" styleName="unsatisfied"
                             visible="{_selectedModel.groupForbiden}"/>
                     <s:Label text="{Localizer.string('Technologies','warPointsNeeded',
                              [Technology.getWarPoints(_selectedModel.type, _selectedModel.upgradePart.level+1), 
                              ML.player.warPoints])}" 
                              styleName="unsatisfied" 
                              visible="{ML.player.warPoints &lt; _selectedModel.warPoints
                              &amp;&amp; !_selectedModel.groupForbiden}"/>
                     <s:Label text="{Localizer.string('Technologies','technologiesNeeded')}" styleName="unsatisfied" 
                              visible="{!(_selectedModel.isValid || ML.player.scientistsTotal == 0
                              || _selectedModel.groupForbiden || (ML.player.warPoints &lt; 
                              Technology.getWarPoints(_selectedModel.type, _selectedModel.level+1)))}"/>
                    <s:Label text="{Localizer.string('Technologies','planetsNeeded',
                              [_selectedModel.planetsRequired, ML.player.planetsCount])}"
                             styleName="unsatisfied"
                             visible="{_selectedModel.planetsRequired > ML.player.planetsCount
                             &amp;&amp; !(!_selectedModel.isValid || _selectedModel.groupForbiden
                              || (ML.player.warPoints &lt; _selectedModel.warPoints))}"/>
                    <s:Label text="{Localizer.string('Technologies','pulsarsNeeded',
                              [_selectedModel.pulsarsRequired, ML.player.bgPlanetsCount])}"
                             styleName="unsatisfied"
                             visible="{_selectedModel.pulsarsRequired > ML.player.bgPlanetsCount
                             &amp;&amp; !(!_selectedModel.isValid || _selectedModel.groupForbiden
                              || (ML.player.warPoints &lt; _selectedModel.warPoints))}"/>
                     <s:Label text="{Localizer.string('Technologies','notEnoughScientists', 
                              [_selectedModel.minScientists, ML.player.scientists, 
                              ML.player.scientistsTotal])}" 
                              id="notEnoughSciLbl" 
                              visible="{!(!(_selectedModel.minScientists > ML.player.scientists) || 
                              (!_selectedModel.isValid) || _selectedModel.groupForbiden
                              || (_selectedModel.planetsRequired > ML.player.planetsCount)
                              || (_selectedModel.pulsarsRequired > ML.player.bgPlanetsCount)
                              || (ML.player.warPoints &lt; _selectedModel.warPoints))}" 
                              styleName="unsatisfied"/>
                     <s:Label text="{Localizer.string('Technologies','buildCenters')}" 
                              visible="{!(!(_selectedModel.minScientists > ML.player.scientists) || 
                              (!_selectedModel.isValid) || _selectedModel.groupForbiden
                              || (_selectedModel.planetsRequired > ML.player.planetsCount)
                              || (_selectedModel.pulsarsRequired > ML.player.bgPlanetsCount)
                              || (ML.player.warPoints &lt; _selectedModel.warPoints))}" 
                              styleName="unsatisfied"/>
                     <base:AdvancedContainer 
                       visible="{!(notEnoughSciLbl.visible || (!_selectedModel.isValid) || 
                         canBeUpgraded || (ML.player.scientistsTotal == 0)
                         || (ML.player.warPoints &lt; _selectedModel.warPoints) 
                         || (_selectedModel.planetsRequired > ML.player.planetsCount) 
                         || (_selectedModel.pulsarsRequired > ML.player.bgPlanetsCount)
                         || _selectedModel.groupForbiden)}">
                        
                        <s:Label text="{Localizer.string('Resources','notEnoughResources')}"
                                 styleName="unsatisfied"/>
                        <s:Label text="{Localizer.string('Resources','enoughResourcesIn')}"
                                 visible="{resLeft > 0}" fontWeight="bold"/>
                        <base:TimeLabel text="{getStringFromSeconds(resLeft)}" visible="{resLeft > 0}"/>
                        <!--s:Label text="{Localizer.string('Resources','insufficientRate')}" visible="{resLeft == -1}"
                        styleName="unsatisfied" width="100%"/-->
                        <s:Label text="{Localizer.string('Resources','additionalStorage', [missingStorageString])}" 
                                 visible="{!enoughStorage}"
                                 styleName="unsatisfied"/>
                        <base:layout>
                           <s:VerticalLayout horizontalAlign="justify"/>
                        </base:layout>
                     </base:AdvancedContainer>
                     <s:Group>
                        <s:Button enabled="{!(!_selectedModel.isValid || !canBeUpgraded || 
                                  (_selectedModel.minScientists > ML.player.scientists)|| 
                                  (_selectedModel.planetsRequired > ML.player.planetsCount)|| 
                                  (_selectedModel.pulsarsRequired > ML.player.bgPlanetsCount)
                                  || (ML.player.warPoints &lt; _selectedModel.warPoints))}" 
                                  label="{Localizer.string('Technologies','upgrade')}" 
                                  click="upgradeButton_clickHandler(event)" horizontalCenter="0"
                                  skinClass="components.skins.GreenButtonSkin"/>
                     </s:Group>
                     <base:layout>
                        <s:VerticalLayout paddingLeft="6" paddingRight="6" horizontalAlign="justify"/>
                     </base:layout>
                  </base:AdvancedContainer>
               </base:Panel>
               
               <!-- UNLEARN PANEL -->
               <base:Panel title="{Localizer.string('Technologies', 'title.unlearn')}" 
                           visible="{(_selectedModel.upgradePart.upgradeEndsAt == null) 
                           &amp;&amp; (_selectedModel.pauseRemainder == 0)
                           &amp;&amp; Technology.technologyIsInGroup(_selectedModel.type)
                           &amp;&amp; (_selectedModel.upgradePart.level > 0)}">
                  <base:layout>
                     <s:VerticalLayout paddingLeft="6" paddingRight="6"
                                       paddingTop="6" paddingBottom="3"
                                       horizontalAlign="justify"/>
                  </base:layout>
                  <s:RichText textFlow="{getTextFlow(Localizer.string(
                              'Technologies','warning.unlearn', 
                              [Config.getTechnologyUnlearnCost()]))}"
                              styleName="unsatisfied"/>
                  <s:Group>
                     <s:Button skinClass="components.skins.CreditButtonSkin"
                               label="{Localizer.string('Technologies', 'label.unlearn')}"
                               click="unlearn(event)" right="6"/>
                  </s:Group>
               </base:Panel>
               <base:layout>
                  <s:VerticalLayout horizontalAlign="justify"/>
               </base:layout>
            </base:AdvancedContainer>
         </s:Group>
      </s:Group>
   </base:Scroller>
</base:BaseContainer>
