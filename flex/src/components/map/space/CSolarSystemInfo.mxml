<?xml version="1.0" encoding="utf-8"?>
<space:CStaticSpaceObjectInfo xmlns:fx="http://ns.adobe.com/mxml/2009" 
                              xmlns:s="library://ns.adobe.com/flex/spark" 
                              xmlns:mx="library://ns.adobe.com/flex/mx"
                              xmlns:space="components.map.space.*"
                              xmlns:solarsystem="components.gameobjects.solarsystem.*"
                              title="{getString('title.solarSystemInfo')}">
   <fx:Binding source="MSolarSystem(staticObject)" destination="ss"/>
   <fx:Script>
      <![CDATA[
      import models.location.LocationMinimal;
      import models.solarsystem.MSSObject;
      import models.solarsystem.MSolarSystem;
      import models.solarsystem.MSolarSystem;

      import spark.utils.TextFlowUtil;

      import utils.DateUtil;
      import utils.locale.Localizer;


      [Bindable]
      private var ss: MSolarSystem;


      private function getString(property: String,
                                 parameters: Array = null): String {
         return Localizer.string("Galaxy", property, parameters);
      }

      private function getBtnOpenLabel(ss: MSolarSystem): String {
         return ss.isWormhole ?
                getString("label.openWormhole") :
                getString("label.openSolarSystem");
      }

      private function getSectorLabel(ss: MSolarSystem): String {
         return ss == null ? "" : LocationMinimal.getSectorLabel(ss
                                                                    .currentLocation);
      }

      private function btnOpen_clickHandler(event: MouseEvent): void {
         ss.navigateTo();
      }

      private function formatTime(seconds: int): String {
         return DateUtil.secondsToHumanString(seconds);
      }
      ]]>
   </fx:Script>
   <space:layout>
      <s:VerticalLayout horizontalAlign="center"/>
   </space:layout>
   <s:BitmapImage width="{MSSObject.IMAGE_WIDTH}" height="{MSSObject.IMAGE_HEIGHT}"
                  source="{ss.imageData}" fillMode="scale"/>
   <s:Label text="{ss.name}"/>
   <s:Label text="{getSectorLabel(ss)}"/>
   <s:Group minWidth="0" minHeight="0">
      <s:layout>
         <s:VerticalLayout horizontalAlign="left"/>
      </s:layout>
      <solarsystem:SSShipsStatusIcons explanationVisible="true" solarSystem="{ss}">
         <solarsystem:layout>
            <s:VerticalLayout horizontalAlign="left" gap="2"/>
         </solarsystem:layout>
      </solarsystem:SSShipsStatusIcons>
      <solarsystem:SSPlanetsStatusIcons explanationVisible="true" solarSystem="{ss}">
         <solarsystem:layout>
            <s:VerticalLayout horizontalAlign="left" gap="2"/>
         </solarsystem:layout>
      </solarsystem:SSPlanetsStatusIcons>
   </s:Group>
   
   <s:Label id="txtDeadStar" text="{getString('label.deadStar')}"
            visible="{ss.isDead}" includeInLayout="{ss.isDead}"
            width="{MSSObject.IMAGE_WIDTH}"
            lineBreak="toFit" textAlign="center"/>
   <s:RichText id="txtShield"
               textFlow="{TextFlowUtil.importFromString(getString('label.shield', [formatTime(ss.shieldEndsIn)]))}"
               visible="{ss.isShielded}" includeInLayout="{ss.isShielded}"
               width="{MSSObject.IMAGE_WIDTH}"
               lineBreak="toFit" textAlign="center"/>
   <s:Button id="btnOpen" label="{getBtnOpenLabel(ss)}"
             visible="{ss.isNavigable}"
             includeInLayout="{ss.isNavigable}"
             click="btnOpen_clickHandler(event)"/>
</space:CStaticSpaceObjectInfo>
