<?xml version="1.0" encoding="utf-8"?>
<space:CStaticSpaceObjectInfo xmlns:fx="http://ns.adobe.com/mxml/2009"
                              xmlns:s="library://ns.adobe.com/flex/spark"
                              xmlns:space="components.map.space.*"
                              xmlns:base="components.base.*"
                              xmlns:ui="components.ui.*"
                              title="{getString('title.info', [ssObject.typeName])}">
   
   <fx:Binding source="MSSObject(staticObject)" destination="ssObject"/>
   <fx:Script>
      <![CDATA[
      import components.map.space.*;

      import controllers.players.PlayersCommand;

      import models.Owner;
      import models.location.LocationMinimal;
      import models.map.IMStaticSpaceObject;
      import models.player.MSquadKillReward;
      import models.movement.events.MSquadronEvent;
      import models.solarsystem.MSSObject;

      import utils.locale.Localizer;


      [Bindable]
      override public function set staticObject(value: IMStaticSpaceObject): void {
         super.staticObject = value;
         honorCoefLabel = null;
      }

      [Bindable]
      private var ssObject: MSSObject;


      private function getString(key: String, parameters: Array = null): String {
         return Localizer.string("SSObjects", key, parameters);
      }

      private function getLabel(labelName: String, parameters: Array = null): String {
         return getString("label." + labelName, parameters);
      }

      private function getTooltip(tooltipName: String, parameters: Array = null): String {
         return getString("tooltip." + tooltipName, parameters);
      }

      private function getMessage(messageName: String, parameters: Array = null): String {
         return getString("message." + messageName, parameters);
      }

      private function getSectorLabel(ssObject: MSSObject): String {
         return ssObject == null
               ? "" : LocationMinimal.getSectorLabel(ssObject.currentLocation);
      }

      private function getPlanetAreaLabel(ssObject: MSSObject): String {
         return ssObject == null
               ? ""
               : Localizer.string(
               "SSObjects", "label.planetArea",
               [ssObject.width, ssObject.height]
         );
      }

      [Bindable]
      private var honorCoefLabel: String = null;

      private function showHonorCoef(e: MSquadronEvent): void {
         MKR.removeEventListener(MSquadronEvent.MULTIPLIER_CHANGE, showHonorCoef);
         honorCoefLabel = (MKR.multiplier * 100).toFixed(2) + '%';
      }

      private var MKR: MSquadKillReward = MSquadKillReward.getInstance();

      private function btnShowHonorCoef_clickHandler(event: MouseEvent): void {
         MKR.addEventListener(MSquadronEvent.MULTIPLIER_CHANGE, showHonorCoef);
         new PlayersCommand(PlayersCommand.BATTLE_VPS_MULTIPLIER,
               {
                  'targetId': ssObject.player.id
               }).dispatch();
      }
      ]]>
   </fx:Script>
   
   <!--- Full size planet image -->
   <s:BitmapImage id="bmpImage" horizontalCenter="0"
                  source="{ssObject.imageData}"/>
   <base:AdvancedContainer left="0" right="0"
                           top="{MSSObject.IMAGE_HEIGHT + 10}">
      <base:layout>
         <s:VerticalLayout horizontalAlign="center"/>
      </base:layout>
      
      <!--- Name of the the object -->
      <s:Label id="lblName"
               text="{getString('typeAndName', [ssObject.typeName, ssObject.name])}"/>
      <!--- Sector -->
      <s:Label id="lblSector" text="{getSectorLabel(ssObject)}"/>
      <!-- Planet area -->
      <s:Label text="{getPlanetAreaLabel(ssObject)}"
               visible="{ssObject.isPlanet}" />
      <!--- Player name who owns this planet. -->
      <base:AdvancedContainer minWidth="0" minHeight="0"
                              visible="{ssObject.isPlanet}">
         <base:layout>
            <s:HorizontalLayout verticalAlign="middle" gap="5"/>
         </base:layout>
         <s:Label id="lblOwner" 
                  text="{ssObject.isOwned
                           ? getLabel('owner')
                           : getLabel('unoccupied')}"/>
         <ui:PlayerProfileButton id="btnOwner" player="{ssObject.player}" 
                                 visible="{ssObject.isOwned}"/>
      </base:AdvancedContainer>

      <s:Group visible="{ssObject.owner == Owner.ENEMY
                || ssObject.owner == Owner.NAP}"
               toolTip="{getTooltip('honorCoef')}"
               width="100%">
        <s:layout>
          <s:HorizontalLayout verticalAlign="middle" gap="5" paddingLeft="5" paddingRight="5"/>
        </s:layout>
        <s:Label
           text="{getLabel('honorCoef')}"/>
        <s:Button
           id="btnShowHonorCoef"
           label="{honorCoefLabel == null ? getLabel('unknownHonorCoef') : honorCoefLabel}"
           click="btnShowHonorCoef_clickHandler(event)"
           skinClass="components.skins.LinkButtonSkin"/>
         <!-- DEPRECATED s:Group
            includeInLayout="{ssObject.inBattleground}"
            visible="{ssObject.inBattleground}" width="100%">

            <s:Label
               left="0" right="0" top="0" bottom="0"
               textAlign="center"
               text="{getLabel('noHonorCoef')}" lineBreak="toFit"/>
         </s:Group-->
      </s:Group>

      <!--- Allows player to invite the owner of this planet to the alliance -->
      <s:Button id="btnInviteToAlliance"
                label="{getLabel('inviteToAlliance')}"
                visible="{ssObject.canInviteOwnerToAlliance}"
                click="ssObject.inviteOwnerToAlliance()"/>
      <!-- Labels that tells why user can't invite owner of the planet to
           the alliance -->
      <s:Group textAlign="center" width="100%"
               visible="{ssObject.isOwned &amp;&amp;
                        !ssObject.ownerIsPlayer &amp;&amp;
                        !ssObject.canInviteOwnerToAlliance}">
         <s:Label
            text="{getMessage('allianceFull')}"  
            toolTip="{getTooltip('allianceFull')}"
            left="0" right="0" lineBreak="toFit"
            visible="{ML.player.allianceOwner &amp;&amp;
                      ML.player.allianceFull &amp;&amp;
                      !ssObject.ownerIsAlly}"/>
      </s:Group>

      <!--- Button that lets view the object. Disabled if a player does not
            own the object. -->
      <s:Button id="btnEnter"
                visible="{ssObject.isNavigable}"
                label="{ssObject.isJumpgate
                           ? getLabel('toGalaxy')
                           : getLabel('toPlanet')}"
                enabled="{ssObject.viewable || ssObject.isJumpgate}"
                click="ssObject.navigateTo()"/>
   </base:AdvancedContainer>
</space:CStaticSpaceObjectInfo>
