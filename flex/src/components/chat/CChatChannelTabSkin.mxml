<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:base="components.base.*"
             minWidth="50"
             mouseEnabled="false">
   
   <fx:Metadata>
      [HostComponent("components.chat.CChatChannelTab")]
   </fx:Metadata>
   
   <fx:Declarations>
      <s:Animate id="newMessageAnim" duration="1000" repeatBehavior="loop" repeatCount="0">
         <s:SimpleMotionPath property="animationValue" valueFrom="0.0" valueTo="1.0"/>
      </s:Animate>
   </fx:Declarations>
   
   <fx:Script>
      <![CDATA[
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         
         
         private function getImage(key:String) : BitmapData {
            return ImagePreloader.getInstance().getImage(AssetNames.CHAT_IMAGES_FOLDER + "tab_chan_" + key);
         }
         
         private var _animationValue:Number = 0.0;
         public function get animationValue() : Number {
            return _animationValue;
         }
         public function set animationValue(value:Number) : void {
            if (_animationValue != value) {
               _animationValue = value;
               var imageKey:String = _animationValue < 0.5 ? "inactive" : "newmsg";
               bmpLeft.source = getImage(imageKey + "_left");
               bmpRight.source = getImage(imageKey + "_right");
               bmpCenter.source = getImage(imageKey + "_center");
            }
         }
         
         protected override function stateChanged(oldState:String, newState:String, recursive:Boolean) : void {
            super.stateChanged(oldState, newState, recursive);
            if (oldState == CChatChannelTab.SKIN_STATE_NEW_MESSAGE) newMessageAnim.end();
            if (newState == CChatChannelTab.SKIN_STATE_NEW_MESSAGE) newMessageAnim.play([this]);
         }
      ]]>
   </fx:Script>
   
   <!-- states -->
   <s:states>
      <s:State name="up" stateGroups="unselectedStates"/>
      <s:State name="over" stateGroups="unselectedStates"/>
      <s:State name="down" stateGroups="unselectedStates, downStates"/>
      <s:State name="disabled" stateGroups="unselectedStates, disabledStates"/>
      <s:State name="upAndSelected" stateGroups="selectedStates, whiteStates"/>
      <s:State name="overAndSelected" stateGroups="selectedStates, whiteStates"/>
      <s:State name="downAndSelected" stateGroups="selectedStates, downStates"/>
      <s:State name="disabledAndSelected" stateGroups="selectedStates, whiteStates, disabledStates"/>
      <s:State name="newMessage" stateGroups="unselectedStates"/>
   </s:states>
      
   <!-- layer 1: artwork -->
   <s:Group id="grpArtwork" left="0" right="0" top="0" bottom="0" mouseEnabled="false">
      <s:layout>
         <s:HorizontalLayout gap="0"/>
      </s:layout>
      <s:BitmapImage id="bmpLeft"
                     source.unselectedStates="{getImage('inactive_left')}"
                     source.selectedStates="{getImage('active_left')}"/>
      <s:BitmapImage id="bmpCenter"
                     source.unselectedStates="{getImage('inactive_center')}"
                     source.selectedStates="{getImage('active_center')}"
                     width="100%"/>
      <s:BitmapImage id="bmpRight"
                     source.unselectedStates="{getImage('inactive_right')}"
                     source.selectedStates="{getImage('active_right')}"/>
   </s:Group>
   
   <!-- layer 2: text and close button -->
   <s:Label id="labelDisplay" maxDisplayedLines="1"
            mouseEnabled="false" mouseChildren="false"
            left="30" right="30" verticalCenter="2"
            fontSize="13"
            color="0xC7C7C7"
            color.selectedStates="0xEEC500"/>
   
   <s:Button id="btnClose" right="11" verticalCenter="-1"
             skinClass="components.chat.CChatChannelCloseButtonSkin"/>
   
   
</s:SparkSkin>
