<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         clipAndEnableScrolling="true"
         mouseEnabled="false"
         width="{getWidth(_scroller != null &amp;&amp;
                          _scroller.verticalScrollBar != null &amp;&amp;
                          _scroller.verticalScrollBar.visible)}">
   
   <fx:Script>
      <![CDATA[
         import mx.events.FlexEvent;
         
         import spark.components.Scroller;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         
         
         [Bindable]
         private var _scroller:Scroller;
         
         /**
          * A scroller the should be monitored for vertical scroller visibility changes.
          * 
          * @default null
          */
         public function set scroller(value:Scroller) : void
         {
            if (_scroller != null)
            {
               _scroller.removeEventListener
                  (FlexEvent.CREATION_COMPLETE, scroller_creationCompleteHandler, false);
            }
            _scroller = value;
            if (_scroller != null)
            {
               _scroller.addEventListener
                  (FlexEvent.CREATION_COMPLETE, scroller_creationCompleteHandler, false, 0, true);
            }
         }
         
         
         private function scroller_creationCompleteHandler(event:FlexEvent) : void
         {
            _scroller.removeEventListener
               (FlexEvent.CREATION_COMPLETE, scroller_creationCompleteHandler, false);
            
            width = getWidth(_scroller != null &&
                             _scroller.verticalScrollBar != null &&
                             _scroller.verticalScrollBar.visible);
         }
         
         
         private function getWidth(scrollBarVisible:Boolean) : Number
         {
            return scrollBarVisible ? 224 : 207;
         }
         
         
         [Bindable]
         public var label:String = "";
         
         
         [Bindable(event="willNotChange")]
         private function get backgroundImage() : BitmapData
         {
            return ImagePreloader.getInstance()
               .getImage(AssetNames.BUTTONS_IMAGE_FOLDER + "close_button_background");
         }
      ]]>
   </fx:Script>
   <!-- backgrund -->
   <s:BitmapImage top="0" bottom="0" left="0" right="0" fillMode="clip"
                  source="{this.backgroundImage}"/>
   <!-- button -->
   <s:Button top="25" left="25" id="button" enabled="{this.enabled}"
             skinClass="components.skins.YellowButtonSkin"
             label="{this.label}"/>
</s:Group>
