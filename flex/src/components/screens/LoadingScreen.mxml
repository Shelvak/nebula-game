<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    width="100%" height="100%"
                    creationComplete="this_creationCompleteHandler()"
                    addedToStage="this_addedToStageHandler(event)">
   
   <fx:Script>
      <![CDATA[
         import controllers.DisplayManager;
         import controllers.screens.Screens;
         import controllers.screens.ScreensSwitch;
         import controllers.startup.StartupInfo;
         import controllers.startup.StartupManager;
         
         import mx.controls.Alert;
         
         import utils.MathUtil;
         import utils.UrlNavigate;
         import utils.assets.events.ImagePreloaderEvent;
         import utils.locale.Localizer;
         import utils.locale.XMLBundlesLoader;
         
         
         private function this_addedToStageHandler(event:Event):void
         {
            DisplayManager.setFPSForStartup();
         }
         
         
         /* ##################### */
         /* ### STARTUP CHECK ### */
         /* ##################### */
         
         
         private function get STARTUP_INFO() : StartupInfo
         {
            return StartupInfo.getInstance();
         }
         
         
         private function this_creationCompleteHandler() : void
         {
            if (STARTUP_INFO.loadSuccessful)
            {
               loadLocaleXML();
            }
            else
            {
               Alert.show("ExternalInterface not available: please upgrade your browser.", "Error!");
            }
         }
         
         
         /* ############### */
         /* ### BUNDLES ### */
         /* ############### */
         
         
         private var _bundlesLoader:XMLBundlesLoader;
         
          
         private function loadLocaleXML() : void
         {
            _bundlesLoader = new XMLBundlesLoader(STARTUP_INFO.locale);
            _bundlesLoader.addEventListener(Event.COMPLETE, bundlesLoader_completeHandler);
            _bundlesLoader.load();
         }
         
         
         private function bundlesLoader_completeHandler(event:Event) : void
         {
            if (_bundlesLoader.loadSuccessful)
            {
               lblPleaseWait.text = getString('label.pleaseWait');
               lblTipLabel.text = getString('label.tip');
               
               var tipsTotal:int = _bundlesLoader.data.child("Tips").children().length();
               var randomTip:int = Math.round(MathUtil.randomBetween(0, tipsTotal - 1));
               lblTipText.text = Localizer.string("Tips", "tip." + randomTip);
               imgTip.source = UrlNavigate.getInstance().getTipImageUrl(randomTip);
               
               loadImages();
            }
            else
            {
               Alert.show("Unable to load locale data: " + _bundlesLoader.error, "Error!");
            }
            _bundlesLoader = null;
         }
         
         
         /* ############## */
         /* ### IMAGES ### */
         /* ############## */
         
         
         private function IMG_unpackProgressHandler(event:ImagePreloaderEvent) : void
         {
            unpackProgress.setProgress(IMG.currentUnpackingProgress, 1);
         }
         
         
         /**
          * Starts downloading images.
          */
         private function loadImages() : void
         {
            IMG.addEventListener(ProgressEvent.PROGRESS, imageLoaded);
            IMG.addEventListener(ImagePreloaderEvent.UNPACK_PROGRESS, IMG_unpackProgressHandler);
            IMG.addEventListener(Event.COMPLETE, imagesLoadComplete);
            IMG.startDownload();
         }
         
         
         /**
          * Updates progress bar when image is downloaded.
          */ 
         private function imageLoaded(event:ProgressEvent) : void
         {
            downloadProgress.setProgress(event.bytesLoaded * 100 / event.bytesTotal, 100);
         }
         
         
         /**
          * Switch to login screen when download is complete.
          */ 
         private function imagesLoadComplete(event:Event) : void
         {
            DisplayManager.setFPSForGame();
            IMG.removeEventListener(ProgressEvent.PROGRESS, imageLoaded);
            IMG.removeEventListener(ImagePreloaderEvent.UNPACK_PROGRESS, IMG_unpackProgressHandler);
            IMG.removeEventListener(Event.COMPLETE, imagesLoadComplete);
            ScreensSwitch.getInstance().showScreen(Screens.LOGIN);
            StartupManager.initializeApp();
         }
         
         
         /* ############### */
         /* ### HELPERS ### */
         /* ############### */
         
         
         private function getString(property:String, parameters:Array = null) : String
         {
            return Localizer.string("LoadingScreen", property, parameters);
         }
      ]]>
   </fx:Script>
   
   <s:Group verticalCenter="0" horizontalCenter="0">
      <s:layout>
         <s:VerticalLayout horizontalAlign="center" gap="15"/>
      </s:layout>
      <s:Group>
         <s:BitmapImage source="@Embed(source='assets/images/loading_panel.png')"/>
         <s:Group left="0" right="0" top="0" bottom="0">
            <s:layout>
               <s:VerticalLayout paddingTop="16" paddingLeft="40" paddingRight="40" gap="7"
                                 horizontalAlign="center"/>
            </s:layout>
            <s:Label id="lblPleaseWait"/>
            <mx:ProgressBar id="downloadProgress" width="100%" mode="manual" label="" labelPlacement="center"
                            trackHeight="12" height="12"/>
            <s:Label text="Loading {downloadProgress.value}%" fontWeight="bold" typographicCase="uppercase"/>
            <s:Label id="lblFileName" showTruncationTip="false" maxWidth="300"
                     maxDisplayedLines="1" text="{IMG.currentModuleLabel}" color="0xAFAFAF"/>
            <mx:ProgressBar id="unpackProgress" width="100%" mode="manual" label="" labelPlacement="center"
                            height="12" trackHeight="12"/>
         </s:Group>
      </s:Group>
      <s:Group width="675" height="214">
         <s:Rect left="0" right="0" top="0" bottom="0" radiusX="16">
            <s:fill><s:SolidColor alpha="0.3"/></s:fill>
         </s:Rect>
         <s:Group left="12" right="12" top="12" bottom="12">
            <s:layout>
               <s:HorizontalLayout gap="13" verticalAlign="middle"/>
            </s:layout>
            <mx:Image maintainAspectRatio="true" id="imgTip"/>
            <s:Group width="100%" fontSize="13">
               <s:layout>
                  <s:VerticalLayout horizontalAlign="left" gap="3"/>
               </s:layout>
               <s:Label id="lblTipLabel" fontWeight="bold"/>
               <s:Label id="lblTipText" text="Not a very usefull tip here :P" lineBreak="toFit"
                        left="0" right="0"/>
            </s:Group>
         </s:Group>
      </s:Group>
   </s:Group>
   
</base:BaseContainer>
