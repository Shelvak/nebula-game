<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*"
                    xmlns:screens="components.screens.*"
                    width="100%" height="100%"
                    creationComplete="this_creationCompleteHandler()"
                    addedToStage="this_addedToStageHandler(event)">
   <fx:Metadata>
      /**
      * Dispatched when data has been loaded successfully or when an error occured.
      */
      [Event (name="localeBundlesLoaded", type="models.events.LocaleEvent")]
   </fx:Metadata>
   
   <fx:Script>
      <![CDATA[
      import controllers.DisplayManager;
      import controllers.startup.ChecksumsLoader;
      import controllers.startup.StartupInfo;
      import controllers.startup.StartupManager;

      import models.events.LocaleEvent;

      import mx.binding.utils.BindingUtils;
      import mx.controls.Alert;

      import utils.Events;
      import utils.MathUtil;
      import utils.assets.AssetNames;
      import utils.locale.Localizer;
      import utils.locale.XMLBundlesLoader;


      private function this_addedToStageHandler(event: Event): void {
         DisplayManager.setFPSForStartup();
      }


      /* ##################### */
      /* ### STARTUP CHECK ### */
      /* ##################### */

      private function get STARTUP_INFO(): StartupInfo {
         return StartupInfo.getInstance();
      }

      private function this_creationCompleteHandler(): void {
         if (STARTUP_INFO.loadSuccessful) {
            loadChecksums();
         }
         else {
            Alert
               .show("ExternalInterface not available: please upgrade your browser.",
                     "Error!");
         }
      }


      /* ################# */
      /* ### CHECKSUMS ### */
      /* ################# */

      private var _checksumsLoader: ChecksumsLoader;

      private function loadChecksums(): void {
         _checksumsLoader = new ChecksumsLoader(STARTUP_INFO);
         _checksumsLoader.addEventListener(Event.COMPLETE,
                                           checksumsLoader_completeHandler,
                                           false, 0, true);
         _checksumsLoader.load();
      }

      private function checksumsLoader_completeHandler(event: Event): void {
         _checksumsLoader.removeEventListener(Event.COMPLETE,
                                              checksumsLoader_completeHandler,
                                              false);
         _checksumsLoader = null;
         loadLocaleXML();
      }


      /* ############## */
      /* ### LOCALE ### */
      /* ############## */

      private var _bundlesLoader: XMLBundlesLoader;

      private function loadLocaleXML(): void {
         _bundlesLoader = new XMLBundlesLoader(STARTUP_INFO.locale);
         _bundlesLoader.addEventListener(Event.COMPLETE,
                                         bundlesLoader_completeHandler, false,
                                         0, true);
         _bundlesLoader.load();
      }

      private function bundlesLoader_completeHandler(event: Event): void {
         if (_bundlesLoader.loadSuccessful) {
            dispatchBundlesLoadedEvent();
            lblPleaseWait.text = getString("label.pleaseWait");
            lblTipLabel.text = getString("label.tip");
            BindingUtils.bindSetter(setLblDownloadProgressText,
                                    downloadProgress, "value", false, true);

            var tipsTotal: int = _bundlesLoader.data.child("Tips").children()
                                    .length();
            var randomTip: int = Math.round(MathUtil.randomBetween(0,
                                                                   tipsTotal - 1));
            lblTipText.text = Localizer.string("Tips", "tip." + randomTip);
            imgTip.source = AssetNames.getTipImageUrl(randomTip);

            loadImages();
         }
         else {
            Alert.show("Unable to load locale data: " + _bundlesLoader.error,
                       "Error!");
         }
         _bundlesLoader.removeEventListener(Event.COMPLETE,
                                            bundlesLoader_completeHandler,
                                            false);
         _bundlesLoader = null;
      }


      /* ############## */
      /* ### IMAGES ### */
      /* ############## */


      /**
       * Starts downloading images.
       */
      private function loadImages(): void {
         IMG.addEventListener(ProgressEvent.PROGRESS, imageLoaded);
         IMG.addEventListener(Event.COMPLETE, imagesLoadComplete);
         IMG.startDownload();
      }

      /**
       * Updates progress bar when image is downloaded.
       */
      private function imageLoaded(event: ProgressEvent): void {
         downloadProgress.setProgress(event.bytesLoaded, event.bytesTotal);
         setLblDownloadProgressText(event.bytesLoaded);
      }

      /**
       * Switch to login screen when download is complete.
       */
      private function imagesLoadComplete(event: Event): void {
         DisplayManager.setFPSForGame();
         IMG.removeEventListener(ProgressEvent.PROGRESS, imageLoaded);
         IMG.removeEventListener(Event.COMPLETE, imagesLoadComplete);
         StartupManager.initializeAppAfterLoad();
      }


      /* ############### */
      /* ### HELPERS ### */
      /* ############### */

      private function getString(property: String,
                                 parameters: Array = null): String {
         return Localizer.string("LoadingScreen", property, parameters);
      }

      private function setLblDownloadProgressText(value: Number): void {
         lblDownloadProgress.text = getString("label.progress", [
            downloadProgress.value
         ]);
      }

      private function dispatchBundlesLoadedEvent(): void {
         Events.dispatchSimpleEvent(this, LocaleEvent,
                                    LocaleEvent.BUNDLES_LOADED);
      }
      ]]>
   </fx:Script>
   
   <screens:GradientBackground gradientWidth="{(this.width - contentGroup.width) / 2}"
                               left="0" right="0" top="0" bottom="0"/>
   
   <s:Group id="contentGroup" verticalCenter="0" horizontalCenter="0">
      <s:layout>
         <s:VerticalLayout horizontalAlign="center" gap="15"/>
      </s:layout>
      <s:Group>
         <s:BitmapImage source="@Embed(source='/embed/assets/loading_panel.png')"/>
         <s:Group left="0" right="0" top="0" bottom="0">
            <s:layout>
               <s:VerticalLayout paddingTop="16" paddingLeft="40"
                                 paddingRight="40" gap="7"
                                 horizontalAlign="center"/>
            </s:layout>
            <s:Label id="lblPleaseWait"/>
            <mx:ProgressBar id="downloadProgress" width="100%" mode="manual"
                            label="" labelPlacement="center"
                            trackHeight="12" height="12"/>
            <s:Label id="lblDownloadProgress" fontWeight="bold" typographicCase="uppercase"/>
            <s:Label id="lblFileName" showTruncationTip="false" maxWidth="300"
                     maxDisplayedLines="1" text="{IMG.currentModuleLabel}"
                     color="0xAFAFAF"/>
           <s:Label id="lblFileProgress" showTruncationTip="false" maxWidth="300"
                    maxDisplayedLines="1" text="{IMG.currentModuleProgress}"
                    color="0xAFAFAF"/>
         </s:Group>
      </s:Group>
      <s:Group width="675" height="214">
         <s:Rect left="0" right="0" top="0" bottom="0" radiusX="16">
            <s:fill><s:SolidColor alpha="0.3"/></s:fill>
         </s:Rect>
         <s:Group left="12" right="12" top="12" bottom="12">
            <s:layout>
               <s:HorizontalLayout gap="13" verticalAlign="middle"/>
            </s:layout>
            <mx:Image maintainAspectRatio="true" id="imgTip"/>
            <s:Group width="100%" fontSize="13">
               <s:layout>
                  <s:VerticalLayout horizontalAlign="left" gap="3"/>
               </s:layout>
               <s:Label id="lblTipLabel" fontWeight="bold"/>
               <s:Group width="100%">
                  <s:Label id="lblTipText" text="" lineBreak="toFit"
                           left="0" right="0"/>
               </s:Group>
            </s:Group>
         </s:Group>
      </s:Group>
   </s:Group>
   
</base:BaseContainer>
