<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:base="components.base.*"
                xmlns:mx="library://ns.adobe.com/flex/halo" 
                addedToStage="itemrenderer1_addedToStageHandler(event)"
                removedFromStage="itemrenderer1_removedFromStageHandler(event)"
                toolTip="{_data.demo?Localizer.string('BuildingSidebar','queueFull')
                :(_data.disabled?Localizer.string('BuildingSidebar','disabled')
                :(_data.type?Localizer.string('Buildings',_data.type+'.tooltip'):''))}"
                xmlns:components="utils.components.*" width="95" height="80">	
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.base.Filters;
         
         import controllers.ui.NavigationController;
         
         import globalevents.GlobalEvent;
         
         import models.ModelLocator;
         import models.building.Building;
         import models.building.MCSidebarBuilding;
         import models.factories.BuildingFactory;
         import models.parts.Upgradable;
         import models.parts.UpgradableType;
         import models.resource.ResourceType;
         import models.solarsystem.MSSObject;
         
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         [Bindable]
         private var _data: MCSidebarBuilding;
         
         public override function get data():Object
         {
            return _data;
         }
         
         public override function set data(value:Object) : void
         {
            if (_data != value)
            {
               if (_data)
               {
                  _data.removeEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
               }
               _data = MCSidebarBuilding(value);
               if (_data)
               {
                  _data.addEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
               }
            }
            refreshState();
         }
         
         [Bindable]
         private var ML: ModelLocator = ModelLocator.getInstance();
         [Bindable]
         private var IMG: ImagePreloader = ImagePreloader.getInstance();
         
         private function showInfoScreen(e: MouseEvent): void
         {
            e.stopImmediatePropagation();
            var temp: Building = BuildingFactory.createDefault(_data.type);
            ML.infoModel = temp;
            NavigationController.getInstance().showInfo();
         }
         
         public function refreshState(e: Event = null): void
         {
            if (_data && ML.latestPlanet && ML.latestPlanet.ssObject)
            {
               if (_data.constructing)
               {
                  _data.disabled = false;
               }
               else
               {
                     var planet:MSSObject = ML.latestPlanet.ssObject;
                     function calcCost(resourceType:String) : Number
                     {
                        return Upgradable.calculateCost(UpgradableType.BUILDINGS, _data.type,
                           resourceType, {"level": 1});
                     }
                     _data.disabled = calcCost(ResourceType.METAL)  > planet.metal.currentStock  ||
                        calcCost(ResourceType.ENERGY) > planet.energy.currentStock ||
                        calcCost(ResourceType.ZETIUM) > planet.zetium.currentStock;
               }
            }
         }
         
         protected function itemrenderer1_addedToStageHandler(event:Event):void
         {
            EventBroker.subscribe(GlobalEvent.TIMED_UPDATE, refreshState);
            if (_data)
            {
               _data.addEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
            }
         }
         
         
         protected function itemrenderer1_removedFromStageHandler(event:Event):void
         {
            EventBroker.unsubscribe(GlobalEvent.TIMED_UPDATE, refreshState);            
            if (_data)
            {
               _data.removeEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
            }
         }
         
      ]]>
   </fx:Script>
   <s:Group width="100%" height="80%">
      <components:CenteredBitmapImage
         left="0" top="0" 
         right="0" bottom="0"       
         filters="{_data.disabled?Filters.redFilter:(_data.demo?Filters.greyFilter:[])}"
         source="{IMG.getImage(AssetNames.getBuildingImageName(_data.type))}"/>
      <s:Button id="infoButton" right="0"  bottom="0" click="showInfoScreen(event)"
                skinClass="components.skins.InfoButtonSkin"/>
   </s:Group>
   
   <s:Label text="{_data.type?Localizer.string ('Buildings',_data.type+'.name'):''}"/>
   
   <s:layout>
      <s:VerticalLayout gap="6" horizontalAlign="center"/>
   </s:layout>
</s:ItemRenderer>