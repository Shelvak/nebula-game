<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:base="components.base.*"
                xmlns:mx="library://ns.adobe.com/flex/halo" 
                addedToStage="itemrenderer1_addedToStageHandler(event)"
                removedFromStage="itemrenderer1_removedFromStageHandler(event)"
                toolTip="{_data.type
                  ? Localizer.string('Buildings', _data.type + '.tooltip')
                     + (_data.demo
                        ? '\n\n' + Localizer.string('BuildingSidebar','queueFull')
                        : (_data.disabled
                           ? (_data.constructing
                              ? '\n\n' + Localizer.string('BuildingSidebar',
                                 'tooltip.becomeVipToQueue')
                              : '\n\n' + Localizer.string('BuildingSidebar','disabled'))
                           : (_data.queue
                              ? '\n\n' + Localizer.string('BuildingSidebar',
                                    'tooltip.willBeQueued')
                              : '')))
                  : ''}"
                xmlns:components="utils.components.*" width="95" height="80">	
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import components.base.Filters;

      import controllers.ui.NavigationController;

      import globalevents.GResourcesEvent;

      import globalevents.GlobalEvent;

      import models.ModelLocator;
      import models.building.Building;
      import models.building.MCSidebarBuilding;
      import models.factories.BuildingFactory;
      import models.parts.Upgradable;
      import models.parts.UpgradableType;
      import models.resource.ResourceType;
      import models.solarsystem.MSSObject;

      import mx.core.FlexGlobals;

      import utils.assets.AssetNames;
      import utils.assets.ImagePreloader;
      import utils.locale.Localizer;

      [Bindable]
      private var _data: MCSidebarBuilding;

      public override function get data(): Object {
         return _data;
      }

      private var costCache: Object = {};

      public override function set data(value: Object): void {
         if (_data != value) {
            if (_data) {
               _data.removeEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
            }
            _data = MCSidebarBuilding(value);
            if (_data) {
               _data.addEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
            }
         }
         refreshState();
      }

      [Bindable]
      private var ML: ModelLocator = ModelLocator.getInstance();
      [Bindable]
      private var IMG: ImagePreloader = ImagePreloader.getInstance();

      private function showInfoScreen(e: MouseEvent): void {
         e.stopImmediatePropagation();
         var temp: Building = BuildingFactory.createDefault(_data.type);
         NavigationController.getInstance().showInfo(temp);
      }

      /* using private function instead of anonymous for performance reasons */
      private function calcCost(resourceType: String): Number {
         if (costCache[_data.type + '|' + resourceType] == null) {
            costCache[_data.type + '|' + resourceType] =
                    Upgradable.calculateCost(UpgradableType.BUILDINGS, _data.type,
                            resourceType, {"level":1})
         }
         return costCache[_data.type + '|' + resourceType];
      }


      private function resourcesInsufficient(): Boolean {
         var planet: MSSObject = ML.latestPlanet.ssObject;
         return calcCost(ResourceType.METAL) > planet.metal.currentStock ||
                 calcCost(ResourceType.ENERGY) > planet.energy.currentStock ||
                 calcCost(ResourceType.ZETIUM) > planet.zetium.currentStock;
      }

      private function refreshState(e: Event = null): void {
         if (_data && ML.latestPlanet && ML.latestPlanet.ssObject)
         {
            var increased: Boolean = false;
            var decreased: Boolean = false;
            var reasonResourcesChanged: Boolean = (e != null &&
                    e.type == GResourcesEvent.RESOURCES_CHANGE);
            if (reasonResourcesChanged)
            {
               increased = GResourcesEvent(e).someIncreased;
               decreased = GResourcesEvent(e).someDecreased;
               if (!increased && !decreased) {
                  return;
               }
            }
            if (_data.constructing && ML.player.vipLevel > 0)
            {
               _data.disabled = false;
               if (
                  !reasonResourcesChanged ||
                  (
                     (_data.queue && increased) || (!_data.queue && decreased)
                  )
               )
               {
                  _data.queue = resourcesInsufficient();
               }
            }
            else {
               _data.queue = false;
               if (
                  !reasonResourcesChanged ||
                  (
                    (_data.disabled && increased) || (!_data.disabled && decreased)
                  )
               )
               {
                  _data.disabled = resourcesInsufficient();
               }
            }
         }
      }

      protected function itemrenderer1_addedToStageHandler(event: Event): void {
         EventBroker.subscribe(GResourcesEvent.RESOURCES_CHANGE, refreshState);
         if (_data) {
            _data.addEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
         }
      }


      protected function itemrenderer1_removedFromStageHandler(event: Event): void {
         EventBroker.unsubscribe(GResourcesEvent.RESOURCES_CHANGE, refreshState);
         if (_data) {
            _data.removeEventListener(DemoChangedEvent.CONSTRUCTING_CHANGED, refreshState);
         }
      }
      ]]>
   </fx:Script>
   <s:Group width="100%" height="80%">
      <components:CenteredBitmapImage
         left="0" top="0" 
         right="0" bottom="0"       
         filters="{_data.disabled
            ? Filters.RED_FILTER
            : (_data.demo
               ? Filters.RED_FILTER
               : (_data.queue
                  ? Filters.GRAYSCALE : []))}"
         source="{IMG.getImage(AssetNames.getBuildingImageName(_data.type))}"/>
      <s:Button id="infoButton" right="0"  bottom="0" click="showInfoScreen(event)"
                skinClass="components.skins.InfoButtonSkin"/>
   </s:Group>
   
   <s:Label text="{_data.type?Localizer.string ('Buildings',_data.type+'.name'):''}"/>
   
   <s:layout>
      <s:VerticalLayout gap="6" horizontalAlign="center"/>
   </s:layout>
</s:ItemRenderer>