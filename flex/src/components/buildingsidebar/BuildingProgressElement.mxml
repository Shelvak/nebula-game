<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="utils.components.*" xmlns:credits="components.credits.*">
   <fx:Script>
      <![CDATA[
         import models.building.Building;
         import models.parts.events.UpgradeEvent;
         
         import utils.Localizer;
         import utils.assets.AssetNames;
         
         [Bindable]
         private var _buildingModel: Building;
         
         public function set buildingModel(value: Building): void
         {
            if (_buildingModel != null)
            {
               _buildingModel.upgradePart.removeEventListener(
                  UpgradeEvent.UPGRADE_PROGRESS,
                  model_upgradeProgressHandler
               );
            }
            _buildingModel = value;
            if (_buildingModel != null)
            {
               _buildingModel.upgradePart.addEventListener(
                  UpgradeEvent.UPGRADE_PROGRESS,
                  model_upgradeProgressHandler
               );
            }
         }
         
         private static const imageHeight: int = 28;
         private static const imageWidth: int = 37;
         
         override protected function updateDisplayList(uw:Number, uh:Number) : void
         {
            super.updateDisplayList(uw, uh);
            if (_buildingModel != null &&
                _buildingModel.upgradePart != null &&
                _buildingModel.upgradePart.upgradeEndsAt != null)
            {
               buildingProgressBar.setProgress(_buildingModel.upgradePart.upgradeProgress, 1);
            }
         }
         
         private function model_upgradeProgressHandler(e:UpgradeEvent) : void
         {
            invalidateDisplayList();
         }
         
         
         
      ]]>
   </fx:Script>
   <s:BorderContainer height="{imageHeight + 4}" width="100%" borderColor="#474747" borderWeight="1"
                      borderStyle="solid">
      <s:Rect left="0" right="0" top="0" bottom="0">
         <s:fill>
            <s:SolidColor color="#0f0f0f"/>
         </s:fill>
      </s:Rect>
      <s:Group left="0" right="0" top="0" bottom="0">
         <s:Group width="{imageWidth}" height="100%" id="imageGroup">
            <components:CenteredBitmapImage 
               source="{IMG.getImage(AssetNames.getBuildingImageName(_buildingModel.type))}" 
                      width="100%" height="{imageHeight}" verticalCenter="0"/>
         </s:Group>
         <s:Group left="{imageGroup.width}" right="0" height="100%"> <!--  verticalCenter="0" -->
            <s:Rect top="0" bottom="0" right="0" left="0">
               <s:fill>
                  <s:SolidColor color="#474747"/>
               </s:fill>
            </s:Rect>
            <s:Group top="0" bottom="0" right="0" left="0">
               <s:Group left="2" right="21">
                  
                  <mx:ProgressBar id="buildingProgressBar" height="16" width="100%" 
                                  labelPlacement="center" mode="manual" 
                                  label="{Localizer.string('Buildings', 'property.constructing') + ' ' +
                                  Math.round((buildingProgressBar.value/buildingProgressBar.maximum)*100).toString()
                                  + '%'}"/>
                  <s:Group width="100%">
                  <s:Label fontSize="10" text="{Localizer.string('Buildings', 'property.timeToFinish.long', 
                           [_buildingModel.upgradePart.timeToFinishString])}" horizontalCenter="0"/>
                  </s:Group>
                  <s:layout>
                     <s:VerticalLayout gap="4"/>
                  </s:layout>
               </s:Group>
               <credits:CoinComp top="2" right="2"/>
            </s:Group>
         </s:Group>
         
      </s:Group>
   </s:BorderContainer>
</base:BaseContainer>
