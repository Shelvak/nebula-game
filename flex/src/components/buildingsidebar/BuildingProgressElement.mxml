<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:base="components.base.*"
                    xmlns:mx="library://ns.adobe.com/flex/mx" 
                    xmlns:components="utils.components.*" 
                    xmlns:credits="components.credits.*" xmlns:ui="components.ui.*">
   <fx:Script>
      <![CDATA[
      import components.credits.AccelerateSelector;
      import components.popups.ActionConfirmationPopup;
      import components.popups.WaitingCredsPopup;

      import controllers.buildings.BuildingsCommand;
      import controllers.objects.ObjectClass;
      import controllers.ui.NavigationController;

      import models.building.Building;
      import models.location.LocationMinimal;
      import models.location.LocationType;
      import models.parts.events.UpgradeEvent;

      import utils.assets.AssetNames;
      import utils.locale.Localizer;


      [Bindable]
      private var _constructableModel: *;

      public function set constructableModel(value: *): void {
         if (_constructableModel != null
                && _constructableModel.upgradePart != null) {
            _constructableModel.upgradePart.removeEventListener(
               UpgradeEvent.UPGRADE_PROGRESS,
               model_upgradeProgressHandler
            );
         }
         _constructableModel = value;
         if (_constructableModel != null
                && _constructableModel.upgradePart != null) {
            _constructableModel.upgradePart.addEventListener(
               UpgradeEvent.UPGRADE_PROGRESS,
               model_upgradeProgressHandler
            );
         }
      }

      public function get constructableModel(): * {
         return _constructableModel;
      }

      private static const imageHeight: int = 28;
      private static const imageWidth: int = 37;

      override protected function updateDisplayList(uw: Number,
                                                    uh: Number): void {
         super.updateDisplayList(uw, uh);
         if (_constructableModel != null
                && _constructableModel.upgradePart != null
                && _constructableModel.upgradePart.upgradeEndsAt != null) {
            buildingProgressBar.setProgress(
               _constructableModel.upgradePart.upgradeProgress, 1
            );
         }
      }

      private function model_upgradeProgressHandler(e: UpgradeEvent): void {
         invalidateDisplayList();
      }


      protected function coincomp1_clickHandler(event: MouseEvent): void {
         var accelerator: AccelerateSelector = new AccelerateSelector();
         accelerator.upgradePart = _constructableModel.upgradePart;
         var speedPopUp: ActionConfirmationPopup = new ActionConfirmationPopup();
         accelerator.popUp = speedPopUp;
         speedPopUp.confirmButtonEnabled = false;
         speedPopUp.confirmButtonClickHandler = function(): void {
            function doAccelerate(): void {
               new BuildingsCommand(
                  BuildingsCommand.ACCELERATE_CONSTRUCTOR, {
                     'id': ML.latestPlanet.getBuildingByConstructable(
                        _constructableModel.id,
                        _constructableModel is Building
                           ? ObjectClass.BUILDING
                           : ObjectClass.UNIT).id,
                     'index': accelerator.selectedAccelerateType}
               ).dispatch();
            }

            if (accelerator.hasEnoughCredits()) {
               doAccelerate();
            }
            else {
               WaitingCredsPopup.showPopup(
                  accelerator.selectedCost, doAccelerate
               );
            }
         };
         speedPopUp.addElement(accelerator);
         speedPopUp.show();
      }

      [Bindable]
      private var hovered: Boolean = false;

      protected function btnDelete_clickHandler(event: MouseEvent): void {
         if (_constructableModel is Building) {
            const building:Building = Building(_constructableModel);
            ML.latestPlanet.selectLocation(
               new LocationMinimal(
                  LocationType.SS_OBJECT,
                  building.planetId,
                  building.x,
                  building.y
               ),
               false
            );
         }
         else {
            var fac: Building = ML.latestPlanet.getBuildingByConstructable(
               _constructableModel.id, ObjectClass.UNIT
            );
            if (fac != null) {
               NavigationController.getInstance().showFacilities(fac.id, true);
            }
         }
      }
      ]]>
   </fx:Script>
   <s:BorderContainer height="{imageHeight + 4}" width="100%" borderColor="#474747" borderWeight="1"
                      borderStyle="solid"
                      rollOver="hovered = true"
                      rollOut="hovered = false">
      <s:Rect left="0" right="0" top="0" bottom="0">
         <s:fill>
            <s:SolidColor color="#0f0f0f"/>
         </s:fill>
      </s:Rect>
      <s:Group left="0" right="0" top="0" bottom="0">
         <s:Group width="{imageWidth}" height="100%" id="imageGroup">
            <components:CenteredBitmapImage 
               source="{IMG.getImage(_constructableModel is Building
               ?AssetNames.getBuildingImageName(_constructableModel.type)
               :AssetNames.getUnitImageName(_constructableModel.type))}" 
               width="100%" height="{imageHeight}" verticalCenter="0"/>
            <s:Group visible="{hovered}" top="1" right="1" 
                     width="{btnDelete.width + 2}">
               <ui:DarkRoundedBackground top="0" bottom="0" left="0" right="0"/>
               <s:Button skinClass="components.skins.DeleteButtonSkin"
                         id="btnDelete"
                         left="1" top="1" bottom="1" right="1"
                         rollOver="hovered = true" 
                         click="btnDelete_clickHandler(event)"/>
            </s:Group>
         </s:Group>
         <s:Group left="{imageGroup.width}" right="0" height="100%"> <!--  verticalCenter="0" -->
            <s:Rect top="0" bottom="0" right="0" left="0">
               <s:fill>
                  <s:SolidColor color="#474747"/>
               </s:fill>
            </s:Rect>
            <s:Group top="0" bottom="0" right="0" left="0">
               <s:Group left="2" right="21">
                  
                  <mx:ProgressBar id="buildingProgressBar" height="16" width="100%" 
                                  labelPlacement="center" mode="manual" 
                                  label="{Localizer.string('Buildings', 'property.constructing') + ' ' +
                                  Math.round((buildingProgressBar.value/buildingProgressBar.maximum)*100).toString()
                                  + '%'}"/>
                  <s:Group width="100%">
                     <s:Label fontSize="10" text="{Localizer.string('Buildings', 'property.timeToFinish.long', 
                              [_constructableModel.upgradePart.timeToFinishString])}" horizontalCenter="0"/>
                  </s:Group>
                  <s:layout>
                     <s:VerticalLayout gap="4"/>
                  </s:layout>
               </s:Group>
               <credits:CoinComp top="2" right="2" click="coincomp1_clickHandler(event)"
                                 enabled="{_constructableModel.upgradePart.upgradeProgress &lt; 1}"/>
            </s:Group>
         </s:Group>
      </s:Group>
   </s:BorderContainer>
</base:BaseContainer>
