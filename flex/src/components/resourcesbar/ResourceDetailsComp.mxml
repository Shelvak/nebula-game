<?xml version="1.0" encoding="utf-8"?>
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                    xmlns:s="library://ns.adobe.com/flex/spark" 
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    xmlns:base="components.base.*">
   <fx:Metadata>
      [ResourceBundle ("General")]
      [ResourceBundle ("Resources")]
   </fx:Metadata>
   <fx:Script>
      <![CDATA[
         import models.resource.Resource;
         
         import mx.core.BitmapAsset;
         
         import utils.DateUtil;
         import utils.Localizer;
         import utils.StringUtil;
         import utils.assets.AssetNames;
         private static const PRECISION: int = 2;
         
         [Bindable]
         private var _resource: Resource;
         
         [Bindable]
         public var columnWidth: int;
         
         [Bindable]
         public function get resource(): Resource
         {
            return _resource;
         }
         
         public function set resource(value: Resource): void
         {
            _resource = value;
         }
         
         private function getSpecialText(current: Number, max: Number, rate: Number): String
         {
            if ((rate < 0) && (current != 0))
            {
               return Localizer.string(
                  'Resources', 'empty', [DateUtil.secondsToHumanString(Math.ceil(-1*current/rate))]);
            }
            else if ((rate > 0) && (current != max))
            {
               return Localizer.string(
                  'Resources', 'full', [DateUtil.secondsToHumanString(Math.ceil((max-current)/rate))]);
            }
            else
               return '';
         }
        
      ]]>
   </fx:Script>
   <mx:Image width="16" height="16" source="{new BitmapAsset(IMG.getImage(AssetNames.getIconImageName(_resource.type)))}"
             verticalCenter="-3" left="0"/>
   <s:Group height="50" left="20">
         <base:AdvancedContainer width="{columnWidth * 2}" verticalCenter="0" left="0">
            <s:Group width="100%">
               <s:Label width="50%" text="{_resource.currentStock.toFixed(PRECISION)}"
                        textAlign="center"/>
               <s:Label width="50%" text="{_resource.maxStock.toFixed(PRECISION)}"
                        color="{(_resource.currentStock == _resource.maxStock)?0xff0000:0xffffff}"
                        textAlign="center"/>
               <s:layout>
                  <s:HorizontalLayout/>
               </s:layout>
            </s:Group>
            <s:Label id="specialTextLabel" width="100%" textAlign="center"
                     visible="{getSpecialText(_resource.currentStock, _resource.maxStock, _resource.rate) != ''}" 
                     text="{getSpecialText(_resource.currentStock, _resource.maxStock, _resource.rate)}"/>
            <base:layout>
               <s:VerticalLayout/>
            </base:layout>
         </base:AdvancedContainer>
         <s:Group width="{columnWidth}" left="{columnWidth * 2}" verticalCenter="0">
            <s:Label text="{(_resource.rate &lt; 0?(_resource.rate * 3600).toFixed(PRECISION):
                     (_resource.rate == 0?'0':'+'+(_resource.rate * 3600).toFixed(PRECISION))) + ' / ' +
                     Localizer.string('General', 'hour.long')}" width="100%"
                     color="{_resource.rate &lt; 0?0xff0000:(_resource.rate &gt; 0?0x00ff00:0xffffff)}"
                     textAlign="center"/>
            <s:Label text="{(_resource.rate &lt; 0?(_resource.rate * 3600*24).toFixed(PRECISION):
                     (_resource.rate == 0?'0':'+'+(_resource.rate * 3600*24).toFixed(PRECISION))) + ' / ' +
                     Localizer.string('General', 'day.long')}" width="100%"
                     color="{_resource.rate &lt; 0?0xff0000:(_resource.rate &gt; 0?0x00ff00:0xffffff)}"
                     textAlign="center"/>
            <s:layout>
               <s:VerticalLayout/>
            </s:layout>
         </s:Group>
   </s:Group>
</base:BaseContainer>
