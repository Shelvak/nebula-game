<?xml version="1.0" encoding="utf-8"?>
<popups:ActionConfirmationPopup xmlns:fx="http://ns.adobe.com/mxml/2009" 
                                xmlns:s="library://ns.adobe.com/flex/spark" 
                                xmlns:mx="library://ns.adobe.com/flex/mx"
                                xmlns:popups="components.popups.*"
                                title="{getString('title.popup')}"
                                confirmButtonEnabled="false"
                                confirmButtonVisible="false"
                                cancelButtonEnabled="true"
                                cancelButtonLabel="{getString('label.close')}"
                                cancelButtonClickHandler="this_cancelButtonClickHandler"
                                creationComplete="this_creationCompleteHandler(event)">
   <fx:Script>
      <![CDATA[
         import models.announcement.MAnnouncement;
         import models.announcement.MAnnouncementEvent;
         
         import mx.events.FlexEvent;
         import mx.events.PropertyChangeEvent;
         import mx.managers.PopUpManager;
         
         import namespaces.prop_name;
         
         import spark.components.Button;
         import spark.utils.TextFlowUtil;
         
         import utils.SingletonFactory;
         import utils.assets.AssetNames;
         import utils.assets.ImagePreloader;
         import utils.locale.Localizer;
         
         
         public static function getInstance() : AnnouncementPopup {
            return SingletonFactory.getSingletonInstance(AnnouncementPopup);
         }
         
         
         private function get ANNOUNCEMENT() : MAnnouncement {
            return MAnnouncement.getInstance();
         }
         
         private function reset() : void {
            if (_isShown) {
               _isShown = false;
               PopUpManager.removePopUp(this);
            }
         }
         
         private var _isShown:Boolean = false;
         public function get isShown() : Boolean {
            return _isShown;
         }
         
         override public function show() : void {
            if (_isShown)
               PopUpManager.bringToFront(this);
            else {
               _isShown = true;
               super.show();
            }
         }
         
         private function this_creationCompleteHandler(event:FlexEvent) : void {
            ANNOUNCEMENT.addEventListener
               (PropertyChangeEvent.PROPERTY_CHANGE, announcement_propertyChangeHandler, false, 0, true);
            ANNOUNCEMENT.addEventListener
               (MAnnouncementEvent.RESET, announcement_resetHandler, false, 0, true);
            updateTxtMessage();
         }
         
         private function this_cancelButtonClickHandler(button:Button) : void {
            _isShown = false;
         }
         
         private function announcement_propertyChangeHandler(event:PropertyChangeEvent) : void {
            if (event.property == MAnnouncement.prop_name::message)
               updateTxtMessage();
         }
         
         private function announcement_resetHandler(event:MAnnouncementEvent) : void {
            reset();
         }
         
         private function getString(property:String) : String {
            return Localizer.string("Announcements", property);
         }
         
         private function getImage(name:String) : BitmapData {
            return ImagePreloader.getInstance().getImage(AssetNames.ANNOUNCEMENTS_IMAGES_FOLDER + name);
         }
         
         private function updateTxtMessage() : void {
            if (ANNOUNCEMENT.message != null)
               txtMessage.textFlow = TextFlowUtil.importFromString(ANNOUNCEMENT.message);
         }         
      ]]>
   </fx:Script>
   <popups:layout>
      <s:VerticalLayout horizontalAlign="contentJustify" gap="20"/>
   </popups:layout>
   <s:BitmapImage source="{getImage('image')}"/>
   <s:Group>
      <s:RichText id="txtMessage" fontSize="16" left="0" right="0" lineBreak="toFit" textAlign="center"/>
   </s:Group>
   <s:Group>
      <s:layout>
         <s:VerticalLayout horizontalAlign="center" gap="0"/>
      </s:layout>
      <s:Label styleName="h1" text="{ANNOUNCEMENT.event.occuresAtString}"/>
      <s:Label styleName="h2" text="{ANNOUNCEMENT.event.occuresInString}"/>
   </s:Group>
</popups:ActionConfirmationPopup>
