<?xml version="1.0" encoding="utf-8"?>
<!---
Component that lets easily navigate between recently visited galaxy, solar
system and planet.
-->
<base:BaseContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/halo"
                    xmlns:mnu="components.menus.*"
                    xmlns:base="components.base.*"
                    creationComplete="this_creationCompleteHandler(event)" xmlns:notifications="components.notifications.*" xmlns:unitsscreen="components.unitsscreen.*">
   
   <fx:Metadata>
      [ResourceBundle("Navigator")]
   </fx:Metadata>
   
   <s:Group>
      <mnu:NavigatorButton id="btnCurrentPlanet" name="{MainAreaScreens.PLANET}"
                           left="{btnNotifications.width + 8 + btnCurrentGalaxy.width + ddlPlayerPlanets.width + 
                           btnCurrentSS.width - (BUTTON_OFFSET * 2)}"
                           visible="{ML.latestPlanet != null}"
                           imageData="{ML.latestPlanet.ssObject.imageData}"
                           label="{ML.latestPlanet.ssObject.name}"/>
      
      <mnu:NavigatorButton id="btnCurrentSS" name="{MainAreaScreens.SOLAR_SYSTEM}"
                           visible="{ML.latestSolarSystem != null}"
                           left="{btnNotifications.width + 8 + btnCurrentGalaxy.width + 
                           ddlPlayerPlanets.width - BUTTON_OFFSET}"
                           imageData="{ML.latestSolarSystem.imageData}"
                           label="{NameResolver.resolveSolarSystem(ML.latestSolarSystem.id)}"/>
      
      <mnu:NavigatorButton id="btnCurrentGalaxy" name="{MainAreaScreens.GALAXY}"
                           left="{btnNotifications.width + 8 + ddlPlayerPlanets.width}"
                           imageData="{IMG.getImage(AssetNames.SS_IMAGE_FOLDER + 'galaxy')}"
                           label="{RM.getString ('Navigator', 'label.currentGalaxy')}"/>
      
      <mnu:PlayerPlanetsSelector id="ddlPlayerPlanets" minWidth="180" dataProvider="{ML.player.planets}"
                                 left="{btnNotifications.width + 8}"/>
      
      <notifications:NotificationsButton id="btnNotifications" name="{MainAreaScreens.NOTIFICATIONS}" left="0"/>
      
      <s:DataGroup top="26" left="0" dataProvider="{ML.notificationAlerts}">
         <s:itemRenderer>
            <fx:Component>
               <s:ItemRenderer autoDrawBackground="false">
               <notifications:NotificationAlert notif="{data}"/>
               </s:ItemRenderer>
            </fx:Component>
         </s:itemRenderer>
         <s:layout>
            <s:VerticalLayout gap="6" paddingLeft="6" paddingTop="25"/>
         </s:layout>
      </s:DataGroup>
   </s:Group>
   
   <base:AdvancedContainer right="0">
      <base:layout>
         <s:HorizontalLayout verticalAlign="middle"/>
      </base:layout>
      <s:Group
         visible="{ML.activeMapType == MapType.PLANET &amp;&amp; 
         (ML.latestPlanet.hasActiveUnits)}">
         <base:AdvancedContainer right="3" id="unitsBtnGroup">
            <unitsscreen:UnitsButton id="btnPlayerUnits" name="{MainAreaScreens.UNITS+Owner.PLAYER}"
                      blink="{ML.latestPlanet.hasMovingUnits(Owner.PLAYER)}"
                      ownerColorString="green"
                      originalColor="{statusColor(Owner.PLAYER)}"
                      visible="{ML.latestPlanet.getActiveUnits(Owner.PLAYER).length > 0}"
                      label="{ML.latestPlanet.getActiveUnits(Owner.PLAYER).length}"/>
            <unitsscreen:UnitsButton id="btnAllyUnits" name="{MainAreaScreens.UNITS+Owner.ALLY}"
                      blink="{ML.latestPlanet.hasMovingUnits(Owner.ALLY)}"
                      ownerColorString="blue"
                      originalColor="{statusColor(Owner.ALLY)}"
                      visible="{ML.latestPlanet.getActiveUnits(Owner.ALLY).length > 0}"
                      label="{ML.latestPlanet.getActiveUnits(Owner.ALLY).length}"/>
            <unitsscreen:UnitsButton id="btnEnemyUnits" name="{MainAreaScreens.UNITS+Owner.ENEMY}"
                      blink="{ML.latestPlanet.hasMovingUnits(Owner.ENEMY)}"
                      ownerColorString="orange"
                      originalColor="{statusColor(Owner.ENEMY)}"
                      visible="{ML.latestPlanet.getActiveUnits(Owner.ENEMY).length > 0}"
                      label="{ML.latestPlanet.getActiveUnits(Owner.ENEMY).length}"/>
            <unitsscreen:UnitsButton id="btnNapUnits" name="{MainAreaScreens.UNITS+Owner.NAP}"
                      blink="{ML.latestPlanet.hasMovingUnits(Owner.NAP)}"
                      ownerColorString="white"
                      originalColor="{statusColor(Owner.NAP)}"
                      visible="{ML.latestPlanet.getActiveUnits(Owner.NAP).length > 0}"
                      label="{ML.latestPlanet.getActiveUnits(Owner.NAP).length}"/>
            <base:layout>
               <s:HorizontalLayout gap="7"/>
            </base:layout>
         </base:AdvancedContainer>
         <s:BitmapImage right="0" width="{unitsBtnGroup.width + 45}" fillMode="clip"
                        source="{IMG.getImage(AssetNames.BUTTONS_IMAGE_FOLDER + 'units_bg')}"/>
         
      </s:Group>
   </base:AdvancedContainer>
   
   <fx:Script>
      <![CDATA[
         import controllers.screens.MainAreaScreens;
         import controllers.ui.NavigationController;
         
         import models.Owner;
         import models.map.MapType;
         
         import mx.events.FlexEvent;
         
         import spark.components.Button;
         
         import utils.NameResolver;
         import utils.assets.AssetNames;
         
         private static const STATUS_COLORS: Object = {
            '0': 0x1dfe1e,
            '2': 0xffffff,
            '1': 0x1dfee0,
            '3': 0xff0000
         };
         
         private function statusColor(owner: int): uint
         {
            return STATUS_COLORS[owner];
         }
         
         private static const BUTTON_OFFSET: int = 8;
         
         
         /**
          * Registers buttons with navigation controller.
          */ 
         private function this_creationCompleteHandler(event:FlexEvent):void
         {
            var ctrl:NavigationController = NavigationController.getInstance();
            ctrl.registerButton(btnCurrentGalaxy);
            ctrl.registerButton(btnCurrentSS);
            ctrl.registerButton(btnCurrentPlanet);
            ctrl.registerButton(btnNapUnits);
            ctrl.registerButton(btnAllyUnits);
            ctrl.registerButton(btnEnemyUnits);
            ctrl.registerButton(btnPlayerUnits);
            ctrl.registerButton(btnNotifications);
         }
      ]]>
   </fx:Script>
   
</base:BaseContainer>
