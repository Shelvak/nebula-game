<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:ns="library://ns.adobe.com/flex/mx"
               xmlns:base="components.base.*"
               xmlns:scr="components.screens.*"
               xmlns:logging="com.adobe.ac.logging.*" 
               xmlns:utils="utils.*"
               width="100%" height="100%"
               initialize="StartupManager.loadStartupInfo()"
               applicationComplete="this_applicationCompleteHandler(event)"
               keyDown="this_keyDownHandler(event)">
   
   
   <fx:Declarations>
      <logging:GlobalExceptionHandler preventDefault="true">
         <utils:GlobalErrorHandler/>
      </logging:GlobalExceptionHandler>
   </fx:Declarations>
   
   <fx:Style source="skins.css"/>
   <fx:Style source="style.css"/>
   
   <base:SpinnerContainer busy="{GlobalFlags.getInstance().lockApplication}"
                          left="0" right="0" top="0" bottom="0">
      <ns:ViewStack x="0" y="0" id="vstTopLevelScreens" width="100%" height="100%"
                    creationComplete="vstTopLevelScreens_creationCompleteHandler(event)">
         <s:NavigatorContent name="{Screens.LOADING}" width="100%" height="100%">
            <scr:LoadingScreen/>
         </s:NavigatorContent>
         <s:NavigatorContent name="{Screens.LOGIN}" width="100%" height="100%"/>
         <s:NavigatorContent id="navcontMain" name="{Screens.MAIN}" width="100%" height="100%">
            <scr:MainScreen/>
            <s:TextArea visible="false" id="profilerTextArea" width="400" height="500" x="200"/>
         </s:NavigatorContent>
         <s:NavigatorContent name="{Screens.BATTLE}" width="100%" height="100%"/>
      </ns:ViewStack>
   </base:SpinnerContainer>
   
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import components.screens.MainScreen;
         
         import controllers.GlobalFlags;
         import controllers.messages.MessagesProcessor;
         import controllers.messages.ResponseMessagesTracker;
         import controllers.screens.Screens;
         import controllers.screens.ScreensSwitch;
         import controllers.startup.StartupManager;
         
         import globalevents.GlobalEvent;
         
         import mx.events.FlexEvent;
         
         import utils.profiler.Profiler;
         
         
         private function vstTopLevelScreens_creationCompleteHandler(event:FlexEvent) : void
         {
            var s:ScreensSwitch = ScreensSwitch.getInstance();
            s.setViewStack(vstTopLevelScreens);
            s.setConfig({"defaultScreenName":Screens.LOADING});
            s.showScreen(Screens.LOADING);
         }
         
         
         protected function this_keyDownHandler(event:KeyboardEvent):void
         {
            if (event.ctrlKey && event.keyCode == Keyboard.SPACE)
            {
               System.setClipboard(Profiler.resultsString);
            }
            else if (event.ctrlKey && event.keyCode == Keyboard.HOME)
            {
               throw new Error("Dont you ever press ctrl+home again!");
            }
         }
         
         
         private function this_applicationCompleteHandler(event:FlexEvent) : void
         {
            stage.addEventListener(KeyboardEvent.KEY_UP, stage_keyboardEventHandler);
            stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyboardEventHandler);
            _mainTimer = new Timer(500);
            _mainTimer.start();
            _mainTimer.addEventListener(TimerEvent.TIMER, mainTimer_timerHandler);
         }
         
         
         private function stage_keyboardEventHandler(event:KeyboardEvent) : void
         {
            EventBroker.broadcast(event);
         }
         
         
         /* ##################################################################### */
         /* ### TIME BASED LOGIC EXECUTION AND MESSAGE PROCESSING MARSHALLING ### */
         /* ##################################################################### */
         
         
         private var _mainTimer:Timer;
         
         
         // we only need one instance of this event 
         private var _timedUpdateEvent:GlobalEvent = new GlobalEvent(GlobalEvent.TIMED_UPDATE, false);
         
         
         private var _messagesProcessor:MessagesProcessor = MessagesProcessor.getInstance();
         private var _respMsgTracker:ResponseMessagesTracker = ResponseMessagesTracker.getInstance();
         
         
         /**
          * 
          * Each time Flash Player starts constructing a new frame:
          * 
          * <p>The event <code>GlobalEvent.TIMED_UPDATE</code> dispatched through <code>EventBroker</code> is
          * handled by any models, components, controllers (or whatever other objects) that need to get their
          * properties updated periodically like building upgrade times, squad positions and similar stuff.
          * All accompanied code (in controllers, components and all sorts of other objects) is executed. If
          * any of that code needs current time, <code>DateUtil.nowDate</code> and
          * <code>DateUtil.nowTime</code> static properties are just for that.</p>
          * 
          * <p>Then <code>MessagesProcessor.process()</code> is called to process all messages received from
          * server.</p>
          * 
          * <p>Finally <code>ResponseMessagesTracker.checkWaitingMessages()</code> is called to check if
          * any of messages sent to the server earlier has time out, that is if response message has
          * not been received in time.</p>
          */
         private function mainTimer_timerHandler(event:TimerEvent):void
//         private function this_enterFrameHandler(event:Event):void
         {
            EventBroker.broadcast(_timedUpdateEvent);
            _messagesProcessor.process();
            _respMsgTracker.checkWaitingMessages();
         }
      ]]>
   </fx:Script>
   
</s:Application>
