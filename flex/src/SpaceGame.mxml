<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:base="components.base.*"
               xmlns:logging="com.adobe.ac.logging.*"
               xmlns:popups="components.popups.*"
               xmlns:utils="utils.*"
               xmlns:screen="components.base.screen.*"
               skinClass="components.skins.ApplicationContainerSkin"
               width="100%" height="100%"
               initialize="StartupManager.loadStartupInfo()"
               applicationComplete="this_applicationCompleteHandler(event)"
               keyDown="this_keyDownHandler(event)">
   
   
   <fx:Declarations>
      <logging:GlobalExceptionHandler preventDefault="true">
         <utils:GlobalErrorHandler/>
      </logging:GlobalExceptionHandler>
   </fx:Declarations>
   
   <fx:Style source="embed/skins.css"/>
   <fx:Style source="embed/style.css"/>
   
   <base:SpinnerContainer busy="{ApplicationLocker.getInstance().applicationLocked}"
                          left="0" right="0" top="0" bottom="0">
      <s:Group x="0" y="0" id="vstTopLevelScreens" width="100%" height="100%"
                    creationComplete="vstTopLevelScreens_creationCompleteHandler(event)">
         <screen:TopLevelScreenContainer screenName="{Screens.AUTHORIZATION}"/>
         <screen:TopLevelScreenContainer screenName="{Screens.LOADING}"
                                         localeBundlesLoaded="loadingscreen1_localeBundlesLoadedHandler(event)"/>
         <screen:TopLevelScreenContainer screenName="{Screens.MAIN}"/>
            <!--s:TextArea visible="false" id="profilerTextArea" width="400" height="500" x="200"/-->
         <screen:TopLevelScreenContainer screenName="{Screens.BATTLE}"/>
      </s:Group>
   </base:SpinnerContainer>
   
   <popups:ClientCrashPopup id="globalErrorPopUp" visible="{crashed}"
                            horizontalCenter="0" verticalCenter="0"
                            creationPolicy="all"/>
   
   <fx:Script>
      <![CDATA[
      import com.developmentarc.core.utils.EventBroker;

      import utils.ApplicationLocker;

      import controllers.messages.MessagesProcessor;
      import controllers.messages.ResponseMessagesTracker;
      import controllers.navigation.MCTopLevel;
      import controllers.screens.Screens;
      import controllers.startup.StartupManager;

      import globalevents.GlobalEvent;

      import models.events.LocaleEvent;

      import mx.events.FlexEvent;

      import utils.DateUtil;
      import utils.profiler.Profiler;

      [Bindable]
      private var crashed: Boolean = false;

      public function crash(msg: String, showDebugWarning: Boolean): void {
         if (!crashed) {
            crashed = true;
            globalErrorPopUp.messageText = msg;
            globalErrorPopUp.showDebugPlayerWarning = showDebugWarning;
         }
      }

      private function vstTopLevelScreens_creationCompleteHandler(event: FlexEvent): void {
         MCTopLevel.getInstance().showScreen(Screens.LOADING);
      }


      protected function this_keyDownHandler(event: KeyboardEvent): void {
         if (event.ctrlKey && event.keyCode == Keyboard.SPACE) {
            System.setClipboard(Profiler.resultsString);
         }
         else if (event.ctrlKey && event.keyCode == Keyboard.HOME) {
            throw new Error("Dont you ever press ctrl+home again!");
         }
      }


      private function this_applicationCompleteHandler(event: FlexEvent): void {
         flash.external.ExternalInterface.marshallExceptions = true;
         stage.addEventListener(KeyboardEvent.KEY_UP, stage_keyboardEventHandler);
         stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyboardEventHandler);
         _mainTimer = new Timer(500);
         _mainTimer.start();
         _mainTimer.addEventListener(TimerEvent.TIMER, mainTimer_timerHandler);
      }


      private function stage_keyboardEventHandler(event: KeyboardEvent): void {
         EventBroker.broadcast(event);
      }


      /* ##################################################################### */
      /* ### TIME BASED LOGIC EXECUTION AND MESSAGE PROCESSING MARSHALLING ### */
      /* ##################################################################### */


      private var _mainTimer: Timer;


      // we only need one instance of this event
      private var _timedUpdateEvent: GlobalEvent = new GlobalEvent(GlobalEvent.TIMED_UPDATE, false);


      private var _messagesProcessor: MessagesProcessor = MessagesProcessor.getInstance();
      private var _respMsgTracker: ResponseMessagesTracker = ResponseMessagesTracker.getInstance();


      /**
       *
       * Each time Flash Player starts constructing a new frame:
       *
       * <p>The event <code>GlobalEvent.TIMED_UPDATE</code> dispatched through <code>EventBroker</code> is
       * handled by any models, components, controllers (or whatever other objects) that need to get their
       * properties updated periodically like building upgrade times, squad positions and similar stuff.
       * All accompanied code (in controllers, components and all sorts of other objects) is executed. If
       * any of that code needs current time, <code>DateUtil.now</code> and static property are just for
       * that.</p>
       *
       * <p>Then <code>MessagesProcessor.process()</code> is called to process all messages received from
       * server.</p>
       *
       * <p>Finally <code>ResponseMessagesTracker.checkWaitingMessages()</code> is called to check if
       * any of messages sent to the server earlier has time out, that is if response message has
       * not been received in time.</p>
       */
      private function mainTimer_timerHandler(event: TimerEvent): void {
         DateUtil.now = new Date().time;
         EventBroker.broadcast(_timedUpdateEvent);
         _messagesProcessor.process();
         _respMsgTracker.checkWaitingMessages();
      }


      protected function loadingscreen1_localeBundlesLoadedHandler(event: LocaleEvent): void {
         globalErrorPopUp.setLabels();
      }
      ]]>
   </fx:Script>
   
</s:Application>
