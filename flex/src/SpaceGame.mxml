<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:ns="library://ns.adobe.com/flex/mx"
               xmlns:base="components.base.*"
               xmlns:scr="components.screens.*"
               xmlns:logging="com.adobe.ac.logging.*" 
               xmlns:utils="utils.*"
               width="100%" height="100%"
               applicationComplete="this_applicationCompleteHandler(event)"
               keyDown="this_keyDownHandler(event)" xmlns:planet="components.map.planet.*" >
   
   
   <fx:Declarations>
      <!--logging:GlobalExceptionHandler preventDefault="true">
      <utils:GlobalErrorHandler/>
      </logging:GlobalExceptionHandler-->
   </fx:Declarations>
   
   <fx:Style source="skins.css"/>
   <fx:Style source="style.css"/>
   
   <base:SpinnerContainer busy="{GlobalFlags.getInstance().lockApplication}"
                          left="0" right="0" top="0" bottom="0">
      <ns:ViewStack x="0" y="0" id="vstTopLevelScreens" width="100%" height="100%"
                    creationComplete="vstTopLevelScreens_creationCompleteHandler(event)">
         <s:NavigatorContent name="{Screens.LOADING}" width="100%" height="100%">
            <scr:LoadingScreen/>
         </s:NavigatorContent>
         <s:NavigatorContent name="{Screens.LOGIN}" width="100%" height="100%">
            <s:Group/>
         </s:NavigatorContent>
         <s:NavigatorContent name="{Screens.MAIN}" width="100%" height="100%">
            <scr:MainScreen/>
            <s:TextArea visible="false" id="profilerTextArea" width="400" height="500" x="200"/>
         </s:NavigatorContent>
      </ns:ViewStack>
   </base:SpinnerContainer>
   
   
   <fx:Script>
      <![CDATA[
         import com.developmentarc.core.utils.EventBroker;
         
         import controllers.GlobalFlags;
         import controllers.screens.Screens;
         import controllers.screens.ScreensSwitch;
         import controllers.startup.StartupManager;
         import controllers.ui.NavigationController;
         
         import models.DemoData;
         
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         
         import utils.assets.ImagePreloader;
         import utils.profiler.Profiler;
         import controllers.Messenger;
         
         
         private function vstTopLevelScreens_creationCompleteHandler(event:FlexEvent) : void
         {
            var s:ScreensSwitch = ScreensSwitch.getInstance();
            s.setViewStack(vstTopLevelScreens);
            s.setConfig({"defaultScreenName":Screens.LOADING});
            s.showScreen(Screens.LOADING);
         }
         
         
         [Bindable]
         /**
          * Set by <code>LoadingScreen</code> when images have been downloaded.
          * Skin class binds to this property.
          */
         public var backgroundImage:BitmapData = null;
         
         protected function this_keyDownHandler(event:KeyboardEvent):void
         {
            if (event.ctrlKey && event.shiftKey && event.keyCode == Keyboard.RIGHT)
            {
               NavigationController.getInstance().showBattle(DemoData.SPACE);
            }
            else if (event.ctrlKey && event.shiftKey && event.keyCode == Keyboard.DOWN)
            {
               NavigationController.getInstance().showBattle(DemoData.BATTLE);
            }
            else if (event.ctrlKey && event.shiftKey && event.keyCode == Keyboard.LEFT)
            {
               NavigationController.getInstance().showBattle(DemoData.GROUND);
            }
            else if (event.ctrlKey && event.shiftKey && event.keyCode == Keyboard.UP)
            {
               NavigationController.getInstance().showBattle(DemoData.TELEPORT);
            }
            else if (event.ctrlKey && event.keyCode == Keyboard.SPACE)
            {
               System.setClipboard(Profiler.resultsString);
            }
            else if (event.ctrlKey && event.keyCode == Keyboard.HOME)
            {
               throw new Error("Dont you ever press ctrl+home again!");
            }
         }
         
         
         private function this_applicationCompleteHandler(event:FlexEvent) : void
         {
            stage.addEventListener(KeyboardEvent.KEY_UP, stage_keyboardEventHandler);
            stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyboardEventHandler);
         }
         
         
         private function stage_keyboardEventHandler(event:KeyboardEvent) : void
         {
            EventBroker.broadcast(event);
         }
      ]]>
   </fx:Script>
   
</s:Application>
